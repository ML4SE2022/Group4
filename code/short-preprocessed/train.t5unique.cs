<s>public virtual ListSpeechSynthesisTasksResponse ListSpeechSynthesisTasks(ListSpeechSynthesisTasksRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListSpeechSynthesisTasksRequestMarshaller.Instance;options.ResponseUnmarshaller = ListSpeechSynthesisTasksResponseUnmarshaller.Instance;return Invoke<ListSpeechSynthesisTasksResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual UpdateJourneyStateResponse UpdateJourneyState(UpdateJourneyStateRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateJourneyStateRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateJourneyStateResponseUnmarshaller.Instance;return Invoke<UpdateJourneyStateResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public void RemovePresentationFormat(){MutableSection s = (MutableSection)FirstSection;s.RemoveProperty(PropertyIDMap.PID_PRESFORMAT);}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  2  0  0  1  3  0  0  0  2  4  0  0  0  5  6</s>
<s>public CellRangeAddressList(int firstRow, int lastRow, int firstCol, int lastCol): this(){AddCellRangeAddress(firstRow, firstCol, lastRow, lastCol);}</s></s>0  0  0  0  0  0  0  1  3  1  5  1  4  1  6  0  0  0  0  0  0  0  2  0  3  3  4  4  5  5  6  6</s>
<s>public virtual void delete(int key){int i = binarySearch(mKeys, 0, mSize, key);if (i >= 0){if (mValues[i]!= DELETED){mValues[i] = DELETED;mGarbage = true;}}}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  2  0  0  3  0  4  4  0  0  5  5  1  1  0  0  2  0  0  0  0  0  6  0  2  2  7  0  0  0  0  6  0  2  2  0  7  0  0  8  0  0</s>
<s>public virtual NGit.Api.CreateBranchCommand SetStartPoint(RevCommit startPoint){CheckCallable();this.startCommit = startPoint;this.startPoint = null;return this;}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  4  5  0  0  0  6  0  0  0  0  0  7  0  5  0  0  0  0  5  0  0  0  0</s>
<s>public int centerX(){return (left + right) >> 1;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  2  0</s>
<s>public virtual ListPresetsResponse ListPresets(){return ListPresets(new ListPresetsRequest());}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  2  0</s>
<s>public virtual DeleteFolderContentsResponse DeleteFolderContents(DeleteFolderContentsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteFolderContentsRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteFolderContentsResponseUnmarshaller.Instance;return Invoke<DeleteFolderContentsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual GetConsoleOutputResponse GetConsoleOutput(GetConsoleOutputRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetConsoleOutputRequestMarshaller.Instance;options.ResponseUnmarshaller = GetConsoleOutputResponseUnmarshaller.Instance;return Invoke<GetConsoleOutputResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual PutMailboxPermissionsResponse PutMailboxPermissions(PutMailboxPermissionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutMailboxPermissionsRequestMarshaller.Instance;options.ResponseUnmarshaller = PutMailboxPermissionsResponseUnmarshaller.Instance;return Invoke<PutMailboxPermissionsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual DisableSnapshotCopyResponse DisableSnapshotCopy(DisableSnapshotCopyRequest request){var options = new InvokeOptions();options.RequestMarshaller = DisableSnapshotCopyRequestMarshaller.Instance;options.ResponseUnmarshaller = DisableSnapshotCopyResponseUnmarshaller.Instance;return Invoke<DisableSnapshotCopyResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public static string StripExtension(string filename){int idx = filename.IndexOf('.');if (idx!= -1){filename = filename.Substring(0, idx);}return filename;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  2  0  0  0  1  3  0  0  0  0  0  2  0  0  0  0  0  1  0  0  0  1  4  0  0  0  2  2  0  1</s>
<s>public override java.nio.ByteBuffer putInt(int value){throw new System.NotImplementedException();}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  0  4  0  0  0  0  5  6  0</s>
<s>public int LastIndexOf(int o){int rval = _limit - 1;for (; rval >= 0; rval--){if (o == _array[rval]){break;}}return rval;}</s></s>0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  2  0  0  3  0  0  0  2  0  0  2  0  0  0  1  0  4  0  2  2  0  0  0  2</s>
<s>public virtual void SetCountsByTime(int[] counts, long msecStep){countsByTime = counts;countsByTimeStepMSec = msecStep;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  3  0  1  0  0  4  0  2</s>
<s>public FeatHdrRecord(RecordInputStream in1){futureHeader = new FtrHeader(in1);isf_sharedFeatureType = in1.ReadShort();reserved = (byte)in1.ReadByte();cbHdrData = in1.ReadInt();rgbHdrData = in1.ReadRemainder();}</s></s>0  0  0  0  0  0  0  0  1  4  0  0  0  0  2  0  0  3  0  4  4  0  0  5  0  0  0  4  6  0  0  0  7  0  0  0  0  0  4  8  0  0  0  9  0  0  0  4  10  0  0  0  11  0  0  0  4  12  0</s>
<s>public CopyOnWriteArrayList(){elements = libcore.util.EmptyArray.OBJECT;}</s></s>0  0  0  0  0  0  0  0  0  1  0  0  0  0  2  3  4  5  0</s>
<s>public WriteRequest(DeleteRequest deleteRequest){_deleteRequest = deleteRequest;}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  3</s>
<s>public void ReadFully(byte[] buf){_in.ReadFully(buf);}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  2  0  0  1  1</s>
<s>public static ICell GetCell(IRow row, int column){ICell cell = row.GetCell(column);if (cell == null){cell = row.CreateCell(column);}return cell;}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  4  0  0  0  0  0  5  0  0  0  3  1  0  4  4  0  0  5  0  0  0  0  5  0  0  0  3  6  0  4  4  0  5</s>
<s>public virtual void SetPackConfig(PackConfig pc){this.packConfig = pc;}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  3  0  2</s>
<s>public override string GetSignerName(){return "HMAC-SHA1";}</s></s>0  0  0  0  0  0  0  0  0  0  0</s>
<s>public virtual Antlr4.Runtime.Misc.IntervalSet Or(IIntSet a){Antlr4.Runtime.Misc.IntervalSet o = new Antlr4.Runtime.Misc.IntervalSet();o.AddAll(this);o.AddAll(a);return o;}</s></s>0  0  0  0  0  0  0  0  0  1  2  3  4  0  0  5  6  0  0  0  0  0  0  0  1  2  3  0  7  0  0  0  0  0  0  1  2  3  0  0  0  0  7  8  0  0  0  0  0  0  7  8  0  6  6  0  7</s>
<s>public override String ToString(){StringBuilder sb = new StringBuilder(64);sb.Append(GetType().Name).Append(" [");sb.Append(value);sb.Append("]");return sb.ToString();}</s></s>0  0  0  0  0  0  1  0  0  0  0  2  0  3  0  0  2  0  0  0  0  0  0  0  0  3  4  0  0  0  0  5  0  6  4  0  0  0  0  0  0  3  4  0  7  7  0  0  0  3  4  0  0  0  0  0  0  3  1  0</s>
<s>public virtual DescribeVpcEndpointServicePermissionsResponse DescribeVpcEndpointServicePermissions(DescribeVpcEndpointServicePermissionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeVpcEndpointServicePermissionsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeVpcEndpointServicePermissionsResponseUnmarshaller.Instance;return Invoke<DescribeVpcEndpointServicePermissionsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public static byte[] copyOfRange(byte[] original, int start, int end){if (start > end){throw new System.ArgumentException();}int originalLength = original.Length;if (start < 0 || start > originalLength){throw new System.IndexOutOfRangeException();}int resultLength = end - start;int copyLength = System.Math.Min(resultLength, originalLength - start);byte[] result = new byte[resultLength];System.Array.Copy(original, start, result, 0, copyLength);return result;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  3  0  0  0  2  3  0  0  0  0  4  5  0  0  0  0  0  6  0  0  1  7  0  0  0  2  0  0  2  6  0  0  0  0  4  8  0  0  0  0  0  9  0  0  3  2  0  0  0  0  10  0  0  0  0  4  11  12  0  9  9  0  0  6  2  0  0  0  0  0  0  13  0  0  0  0  0  9  0  0  0  0  4  14  15  0  1  1  2  2  13  13  0  0  10  10  0  13</s>
<s>public ListTopicsRequest(string nextToken){_nextToken = nextToken;}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  3</s>
<s>public override void Finish(FieldInfos fis, int numDocs){if (!(pendingDocs.Count == 0)){Flush();}if (numDocs!= this.numDocs){throw new Exception("Wrote " + this.numDocs + " docs, finish called with numDocs=" + numDocs);}indexWriter.Finish(numDocs, vectorsStream.GetFilePointer());CodecUtil.WriteFooter(vectorsStream);}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  3  0  0  0  0  0  0  4  5  0  0  0  0  6  0  0  0  3  0  0  3  0  0  0  7  0  0  0  0  0  0  0  0  3  0  3  0  0  0  8  0  0  3  3  0  0  0  9  10  0  0  0  0  11  12  0  9  9</s>
<s>public override bool IsIndexTerm(BytesRef term, TermStats stats){if (count >= interval){count = 1;return true;}else{count++;return false;}}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  3  4  0  0  0  5  6  0  0  0  5  0  0  0  0  0  0  0  5  0  0</s>
<s>public virtual AssociateDhcpOptionsResponse AssociateDhcpOptions(AssociateDhcpOptionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = AssociateDhcpOptionsRequestMarshaller.Instance;options.ResponseUnmarshaller = AssociateDhcpOptionsResponseUnmarshaller.Instance;return Invoke<AssociateDhcpOptionsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2){return Evaluate(srcRowIndex, srcColumnIndex, arg0, arg1, arg2, DEFAULT_ARG3);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  3  0  0  4  0  0  5  0  0  6  0  0  0  1  0  2  2  3  3  4  4  5  5  6  6  7  7</s>
<s>public virtual void Disconnect(){if (sock.IsConnected()){sock.Disconnect();}}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  1  0  0</s>
<s>public PredictionContext Add(PredictionContext ctx){if (ctx == PredictionContext.EMPTY)return PredictionContext.EMPTY;PredictionContext existing = cache.Get(ctx);if (existing!= null){return existing;}cache.Put(ctx, ctx);return ctx;}</s></s>0  0  0  0  0  1  0  0  0  2  0  0  0  2  0  0  3  0  0  0  3  0  0  0  0  4  0  0  0  5  6  0  2  2  0  0  4  0  0  0  4  0  0  0  5  7  0  2  2  2  2  0  2</s>
<s>public virtual UploadLayerPartResponse UploadLayerPart(UploadLayerPartRequest request){var options = new InvokeOptions();options.RequestMarshaller = UploadLayerPartRequestMarshaller.Instance;options.ResponseUnmarshaller = UploadLayerPartResponseUnmarshaller.Instance;return Invoke<UploadLayerPartResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual string GetScriptText(){return GetScriptText(null, null);}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0</s>
<s>public virtual DescribeClusterSubnetGroupsResponse DescribeClusterSubnetGroups(){return DescribeClusterSubnetGroups(new DescribeClusterSubnetGroupsRequest());}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  2  0</s>
<s>public override char SetIndex(int position){if (position < BeginIndex || position > EndIndex)throw new ArgumentException("Illegal Position: " + position);index = start + position;return Current;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  1  2  0  1  3  0  0  4  0  0  0  0  1  0  0  5  0  0  6  1  0  7</s>
<s>public virtual GetPhoneNumberOrderResponse GetPhoneNumberOrder(GetPhoneNumberOrderRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetPhoneNumberOrderRequestMarshaller.Instance;options.ResponseUnmarshaller = GetPhoneNumberOrderResponseUnmarshaller.Instance;return Invoke<GetPhoneNumberOrderResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public EpsilonTransition(ATNState target, int outermostPrecedenceReturn): base(target){this.outermostPrecedenceReturn = outermostPrecedenceReturn;}</s></s>0  0  0  0  0  0  0  0  1  3  2  4  0  0  3  0  0  0  0  0  0  4  0  4</s>
<s>public virtual NGit.Api.DiffCommand SetContextLines(int contextLines){this.contextLines = contextLines;return this;}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  0  4  0  0  0  0  0  4  0  4  0  0</s>
<s>public virtual RejectVpcPeeringConnectionResponse RejectVpcPeeringConnection(RejectVpcPeeringConnectionRequest request){var options = new InvokeOptions();options.RequestMarshaller = RejectVpcPeeringConnectionRequestMarshaller.Instance;options.ResponseUnmarshaller = RejectVpcPeeringConnectionResponseUnmarshaller.Instance;return Invoke<RejectVpcPeeringConnectionResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public static bool equals(int[] array1, int[] array2){if (array1 == array2){return true;}if (array1 == null || array2 == null || array1.Length!= array2.Length){return false;}{for (int i = 0; i < array1.Length; i++){if (array1[i]!= array2[i]){return false;}}}return true;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  2  0  0  0  1  2  0  0  0  0  0  0  0  1  0  0  2  0  0  0  1  3  0  2  3  0  0  0  0  0  0  0  0  4  0  0  0  4  0  1  3  0  4  0  0  0  0  1  0  4  4  0  2  0  4  4  0  0  0  0  0</s>
<s>public static void Main(string[] args){if (args.Length < 1){throw new ArgumentException();}QualityQueriesFinder qqf = new QualityQueriesFinder(FSDirectory.Open(new DirectoryInfo(args[0])));string[] q = qqf.BestQueries("body", 20);for (int i = 0; i < q.Length; i++){Console.WriteLine(newline + FormatQueryAsTrecTopic(i, q[i], null, null));}}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  1  2  0  0  0  0  3  0  0  0  4  0  5  0  0  4  0  0  0  0  6  7  0  0  0  8  0  0  0  1  0  0  0  0  0  0  0  0  0  9  0  0  0  5  10  0  0  0  0  0  0  0  0  0  11  0  0  0  11  0  9  2  0  11  0  0  0  0  12  13  0  0  0  14  0  15  0  11  11  0  0  9  0  11  11  0  0  0  0</s>
<s>public CharsRef(char[] chars, int offset, int length){this.chars = chars;this.Offset = offset;this.Length = length;Debug.Assert(IsValid());}</s></s>0  0  0  0  0  0  0  1  0  2  2  3  3  5  3  3  0  0  0  0  0  0  2  0  2  0  0  0  0  4  0  5  0  0  0  0  6  0  7  0  0  0  8  9  0  0  0  10  0</s>
<s>public virtual UpdateIPSetResponse UpdateIPSet(UpdateIPSetRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateIPSetRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateIPSetResponseUnmarshaller.Instance;return Invoke<UpdateIPSetResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual void print(object obj){print(Sharpen.StringHelper.GetValueOf(obj));}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  2  3  4  0  1  1</s>
<s>public override string ToString(){return "IndexFileDeleter.CommitPoint(" + segmentsFileName + ")";}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  1  0</s>
<s>public virtual bool WaitForGeneration(long targetGen, int maxMS){long curGen = writer.Generation;if (targetGen > curGen){throw new System.ArgumentException("targetGen=" + targetGen + " was never returned by the ReferenceManager instance (current gen=" + curGen + ")");}lock (this)if (targetGen <= searchingGen)return true;else{waitingGen = Math.Max(waitingGen, targetGen);reopenCond.Set();available.Reset();}long startMS = Time.NanoTime() / 1000000;while (targetGen > Interlocked.Read(ref searchingGen)){if (maxMS < 0){available.WaitOne();}else{long msLeft = (startMS + maxMS) - (Time.NanoTime()) / 1000000;if (msLeft <= 0){return false;}else{available.WaitOne(TimeSpan.FromMilliseconds(msLeft));}}}return true;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  0  0  3  0  0  4  5  0  0  1  3  0  0  0  0  6  7  0  0  0  0  0  0  0  1  0  3  0  0  0  0  0  1  8  0  0  0  0  0  9  0  0  0  10  11  0  9  9  1  1  0  0  0  12  13  0  0  0  0  14  15  0  0  0  0  0  16  0  0  0  0  17  18  0  0  0  0  1  0  0  19  20  0  0  8  0  0  0  2  0  0  0  0  0  14  21  0  0  0  0  0  0  22  0  0  0  0  16  2  0  0  0  0  17  18  0  0  0  0  22  0  0  0  0  0  0  0  0  14  21  0  0  0  0  23  24  0  22  22  0  0</s>
<s>public java.lang.StringBuffer append(bool b){return append(b? "true" : "false");}</s></s>0  0  0  0  0  0  0  1  2  3  0  0  0  4  0  0  0  3  0  0  0  4  0  0</s>
<s>public override java.nio.ByteBuffer put(int index, byte b){throw new java.nio.ReadOnlyBufferException();}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  0  4  0  0  5  0  0  0  0  0  0  1  6  0</s>
<s>public virtual int GetLineCount(){return lineCount;}</s></s>0  0  0  0  0  0  0  0  0  0  1</s>
<s>public override bool Equals(object o){return o is DutchStemmer;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  1  2  2</s>
<s>public virtual CreateNotificationSubscriptionResponse CreateNotificationSubscription(CreateNotificationSubscriptionRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateNotificationSubscriptionRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateNotificationSubscriptionResponseUnmarshaller.Instance;return Invoke<CreateNotificationSubscriptionResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual bool IsOutdated(){return snapshot.IsModified(GetFile());}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  2  0  0  0  3  0</s>
<s>public virtual DescribeVirtualInterfacesResponse DescribeVirtualInterfaces(){return DescribeVirtualInterfaces(new DescribeVirtualInterfacesRequest());}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  2  0</s>
<s>public override void onChanged(){this._enclosing.refreshExpGroupMetadataList(true, true);this._enclosing.notifyDataSetChanged();}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  0  0  0  0  0  1  3  0</s>
<s>public virtual DeleteEventTrackerResponse DeleteEventTracker(DeleteEventTrackerRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteEventTrackerRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteEventTrackerResponseUnmarshaller.Instance;return Invoke<DeleteEventTrackerResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override bool Matches(ValueEval x){if (x is BlankEval){switch (_operator.Code){case CmpOp.NONE:case CmpOp.EQ:return _value.Length == 0;case CmpOp.NE:return _value.Length!= 0;}return false;}if (!(x is StringEval)){return false;}String testedValue = ((StringEval)x).StringValue;if ((testedValue.Length < 1 && _value.Length < 1)){switch (_operator.Code){case CmpOp.NONE: return true;case CmpOp.EQ: return false;case CmpOp.NE: return true;}return false;}if (_pattern!= null){return Evaluate(_pattern.IsMatch(testedValue));}return Evaluate(string.Compare(testedValue, _value, StringComparison.CurrentCultureIgnoreCase));}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  2  3  3  0  0  0  4  5  0  0  0  0  6  7  0  0  6  8  0  0  0  9  10  0  0  0  0  6  11  0  0  0  9  10  0  0  0  0  0  0  0  2  12  12  0  0  0  0  0  13  0  14  0  0  0  0  12  2  15  0  0  0  0  0  14  10  0  0  0  9  10  0  0  0  0  4  5  0  0  0  0  6  7  0  0  0  0  0  6  8  0  0  0  0  0  6  11  0  0  0  0  0  0  16  0  0  0  0  17  0  0  0  0  16  18  0  14  14  0  0  17  0  0  0  0  0  19  0  14  14  9  9  0  0  20  21</s>
<s>public virtual ListWebsiteAuthorizationProvidersResponse ListWebsiteAuthorizationProviders(ListWebsiteAuthorizationProvidersRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListWebsiteAuthorizationProvidersRequestMarshaller.Instance;options.ResponseUnmarshaller = ListWebsiteAuthorizationProvidersResponseUnmarshaller.Instance;return Invoke<ListWebsiteAuthorizationProvidersResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override void write(char[] buf, int offset, int count){doWrite(buf, offset, count);}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  3  0  0  0  4  0  1  1  2  2  3  3</s>
<s>public String FormatAsString(){if (IsWholeColumnReference()){returnCellReference.ConvertNumToColString(_firstCell.Col)+ ":" +CellReference.ConvertNumToColString(_lastCell.Col);}StringBuilder sb = new StringBuilder(32);sb.Append(_firstCell.FormatAsString());if (!_isSingleCell){sb.Append(CELL_DELIMITER);if (_lastCell.SheetName == null){sb.Append(_lastCell.FormatAsString());}else{_lastCell.AppendCellReference(sb);}}return sb.ToString();}</s></s>0  0  0  0  0  1  0  0  0  0  2  0  0  0  0  0  0  0  3  4  0  0  0  5  6  0  0  0  7  4  0  0  0  8  6  0  0  9  0  10  0  0  9  0  0  0  0  0  0  10  11  0  0  0  0  5  1  0  0  0  12  0  0  0  0  10  11  0  13  13  0  0  0  8  14  0  0  0  0  0  10  11  0  0  0  0  8  1  0  0  0  0  0  8  15  0  10  10  0  0  0  10  16  0</s>
<s>public EscherGraphics Create(){EscherGraphics g = new EscherGraphics(escherGroup, workbook,foreground, font, verticalPointsPerPixel);return g;}</s></s>0  0  0  0  0  1  0  0  0  0  0  0  2  0  0  0  0  3  3  4  4  5  5  6  6  7  7  0  2</s>
<s>public DoubleDocValues(ValueSource vs){this.m_vs = vs;}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  0  0  2  0  3</s>
<s>public static CharArraySet GetDefaultStopSet(){return DefaultSetHolder.DEFAULT_STOP_SET;}</s></s>0  0  0  0  0  0  1  0  0  0  0  2  3</s>
<s>public virtual DeleteLoadBalancerPolicyResponse DeleteLoadBalancerPolicy(DeleteLoadBalancerPolicyRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteLoadBalancerPolicyRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteLoadBalancerPolicyResponseUnmarshaller.Instance;return Invoke<DeleteLoadBalancerPolicyResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual DecreaseReplicaCountResponse DecreaseReplicaCount(DecreaseReplicaCountRequest request){var options = new InvokeOptions();options.RequestMarshaller = DecreaseReplicaCountRequestMarshaller.Instance;options.ResponseUnmarshaller = DecreaseReplicaCountResponseUnmarshaller.Instance;return Invoke<DecreaseReplicaCountResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual RefUpdate.Result Update(RevWalk walk){RequireCanDoUpdate();try{return result = UpdateImpl(walk, new _Store_484(this));}catch (IOException x){result = RefUpdate.Result.IO_FAILURE;throw;}}</s></s>0  0  0  0  0  0  0  1  2  0  0  3  4  0  0  0  5  0  0  0  0  0  6  0  0  7  0  4  4  0  0  8  0  0  0  0  0  9  10  0  0  0  6  0  0  0  0  1  11  0</s>
<s>public virtual ICollection<string> GetChanged(){return Sharpen.Collections.UnmodifiableSet(diff.GetChanged());}</s></s>0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  2  3  4  0  0  0  0  5  1  0</s>
<s>public static string ToHex(long value){return ToHex(value, 16);}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  1  0  0</s>
<s>public int CreatePlaceholder(){return _offset++;}</s></s>0  0  0  0  0  0  0  0  0  0  1</s>
<s>public override bool Equals(object o){if (o is java.util.MapClass.Entry<K, V>){java.util.MapClass.Entry<K, V> other = (java.util.MapClass.Entry<K, V>)o;return ((object)key == null? other.getKey() == null : key.Equals(other.getKey())) && ((object)value == null? other.getValue() == null : value.Equals(other.getValue()));}return false;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  2  3  4  0  5  0  6  7  0  0  0  0  0  0  2  3  4  0  5  0  6  7  0  8  0  0  0  0  0  2  3  4  0  5  0  6  7  1  0  0  0  0  0  0  0  9  0  0  0  0  8  10  0  0  0  0  9  0  0  0  0  0  8  10  0  0  0  0  0  0  11  0  0  0  0  8  12  0  0  0  0  11  0  0  0  0  0  8  12  0  0  0</s>
<s>public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0,ValueEval arg1) {double result;try {double d0 = NumericFunction.SingleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);double d1 = NumericFunction.SingleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);double logE = Math.Log(d0);double base1 = d1;if (base1 == Math.E) {result = logE;} else {result = logE / Math.Log(base1);}NumericFunction.CheckValue(result);} catch (EvaluationException e) {return e.GetErrorEval();}return new NumberEval(result);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  3  0  0  4  0  0  5  0  0  0  0  6  6  0  0  0  0  0  0  7  0  0  0  8  9  0  4  4  2  2  3  3  0  0  0  0  10  0  0  0  8  9  0  5  5  2  2  3  3  0  0  0  0  11  0  0  0  12  13  0  7  7  0  0  0  0  14  0  10  0  0  14  0  12  15  0  0  0  6  0  11  0  0  0  6  0  0  11  0  0  12  13  0  14  14  0  0  0  8  16  0  6  6  0  0  17  18  0  0  0  0  18  19  0  0  0  20  0  6  6</s>
<s>public virtual DeleteFilterResponse DeleteFilter(DeleteFilterRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteFilterRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteFilterResponseUnmarshaller.Instance;return Invoke<DeleteFilterResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual CreateInstanceSnapshotResponse CreateInstanceSnapshot(CreateInstanceSnapshotRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateInstanceSnapshotRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateInstanceSnapshotResponseUnmarshaller.Instance;return Invoke<CreateInstanceSnapshotResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual IList<IToken> GetTokens(int start, int stop){return GetTokens(start, stop, null);}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  3  0  0  4  0  0  0  2  0  3  3  4  4  0  0</s>
<s>public static TermGroupFacetCollector CreateTermGroupFacetCollector(string groupField,string facetField,bool facetFieldMultivalued,BytesRef facetPrefix,int initialSize){if (facetFieldMultivalued){return new MV(groupField, facetField, facetPrefix, initialSize);}else{return new SV(groupField, facetField, facetPrefix, initialSize);}}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  3  0  0  4  0  5  6  0  0  7  0  0  4  0  0  0  8  0  2  2  3  3  6  6  7  7  0  0  0  9  0  2  2  3  3  6  6  7  7</s>
<s>public RenameAlbumRequest(): base("CloudPhoto", "2017-07-11", "RenameAlbum", "cloudphoto", "openAPI"){Protocol = ProtocolType.HTTPS;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  3  0</s>
<s>public virtual bool contains(object @object){lock (mutex){return c.contains(@object);}}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  0  3  0  0  1  1</s>
<s>public override java.nio.CharBuffer put(char[] src, int srcOffset, int charCount){if (charCount > remaining()){throw new java.nio.BufferOverflowException();}System.Array.Copy(src, srcOffset, backingArray, offset + _position, charCount);_position += charCount;return this;}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  0  0  0  4  0  0  5  0  0  6  0  0  0  6  0  7  0  0  0  0  0  0  0  1  8  0  0  0  0  0  9  10  11  0  4  4  5  5  12  12  0  0  13  14  6  6  0  0  14  0  6  0  0</s>
<s>public LegendRecord(RecordInputStream in1){field_1_xAxisUpperLeft = in1.ReadInt();field_2_yAxisUpperLeft = in1.ReadInt();field_3_xSize = in1.ReadInt();field_4_ySize = in1.ReadInt();field_5_type = (byte)in1.ReadByte();field_6_spacing = (byte)in1.ReadByte();field_7_options = in1.ReadShort();}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  0  0  3  4  0  0  0  5  0  0  0  3  4  0  0  0  6  0  0  0  3  4  0  0  0  7  0  0  0  3  4  0  0  0  8  0  0  0  0  0  3  9  0  0  0  10  0  0  0  0  0  3  9  0  0  0  11  0  0  0  3  12  0</s>
<s>public static byte[] EncodedTypeString(int typeCode){switch (typeCode){case OBJ_COMMIT:{return ENCODED_TYPE_COMMIT;}case OBJ_TREE:{return ENCODED_TYPE_TREE;}case OBJ_BLOB:{return ENCODED_TYPE_BLOB;}case OBJ_TAG:{return ENCODED_TYPE_TAG;}default:{throw new ArgumentException(MessageFormat.Format(JGitText.Get().badObjectType, Sharpen.Extensions.ValueOf(typeCode)));}}}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  0  0  0  2  0  0  3  0  0  4  0  0  5  0  0  6  0  0  7  0  0  8  0  0  9  0  0  0  0  0  10  0  0  0  0  11  12  0  0  0  0  0  13  14  0  15  0  0  0  0  16  17  18  0  1  1</s>
<s>public virtual ObjectId GetCalulatedPatchId(){return ObjectId.FromRaw(digest.Digest());}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  2  0  0  0  0  3  4  0</s>
<s>public DefaultRowHeightRecord(){field_1_option_flags = 0x0000;field_2_row_height = DEFAULT_ROW_HEIGHT;}</s></s>0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  2  0  3  0</s>
<s>public java.nio.ByteBuffer encode(java.nio.CharBuffer buffer){try{return newEncoder().onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE).onUnmappableCharacter(java.nio.charset.CodingErrorAction.REPLACE).encode(buffer);}catch (java.nio.charset.CharacterCodingException ex){throw new System.Exception(ex.Message, ex);}}</s></s>0  0  0  0  0  0  0  1  2  3  0  0  0  0  0  1  4  5  0  0  0  0  0  0  0  0  0  0  0  6  0  7  0  0  0  0  0  0  0  1  8  9  10  11  0  0  0  0  0  0  0  1  8  9  10  3  0  5  5  0  0  0  0  0  0  1  8  12  13  0  0  0  0  14  15  0  0  0  13  16  13  13</s>
<s>public sealed override java.nio.FloatBuffer get(float[] dst, int dstOffset, int floatCount){if (floatCount > remaining()){throw new java.nio.BufferUnderflowException();}System.Array.Copy(backingArray, offset + _position, dst, dstOffset, floatCount);_position += floatCount;return this;}</s></s>0  0  0  0  0  0  0  0  0  1  2  3  0  0  0  0  0  4  0  0  5  0  0  6  0  0  0  6  0  7  0  0  0  0  0  0  0  1  8  0  0  0  0  0  9  10  11  0  12  12  0  0  13  14  4  4  5  5  6  6  0  0  14  0  6  0  0</s>
<s>public virtual bool hasNext(){return this._nextEntry!= null;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  1  0</s>
<s>public virtual DeleteNatGatewayResponse DeleteNatGateway(DeleteNatGatewayRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteNatGatewayRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteNatGatewayResponseUnmarshaller.Instance;return Invoke<DeleteNatGatewayResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public String ResolveNameXText(int reFindex, int definedNameIndex){return linkTable.ResolveNameXText(reFindex, definedNameIndex, this);}</s></s>0  0  0  0  0  1  0  0  0  2  0  0  3  0  0  0  0  4  1  0  2  2  3  3  0  0</s>
<s>public virtual void SetMultiFields(string[] fields){if (fields == null){fields = new string[0];}QueryConfigHandler.Set(ConfigurationKeys.MULTI_FIELDS, fields);}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  1  0  0  0  0  0  0  0  0  0  2  3  0  0  0  4  5  1  1</s>
<s>public override bool IsCancelled(){Lock.Lock();try{return pm.IsCancelled();}finally{Lock.Unlock();}}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  1  0  0  0  0  0  0  2  0  0  0  0  0  0  0  1  3  0</s>
<s>public virtual RemoveTargetsResponse RemoveTargets(RemoveTargetsRequest request){var options = new InvokeOptions();options.RequestMarshaller = RemoveTargetsRequestMarshaller.Instance;options.ResponseUnmarshaller = RemoveTargetsResponseUnmarshaller.Instance;return Invoke<RemoveTargetsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public FuzzyQuery(Term term, int maxEdits, int prefixLength, int maxExpansions, bool transpositions): base(term.Field){if (maxEdits < 0 || maxEdits > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE){throw new System.ArgumentException("maxEdits must be between 0 and " + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE);}if (prefixLength < 0){throw new System.ArgumentException("prefixLength cannot be negative.");}if (maxExpansions < 0){throw new System.ArgumentException("maxExpansions cannot be negative.");}this.term = term;this.maxEdits = maxEdits;this.prefixLength = prefixLength;this.transpositions = transpositions;this.maxExpansions = maxExpansions;MultiTermRewriteMethod = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions);}</s></s>0  0  0  0  0  0  0  1  4  2  6  2  11  2  12  3  13  0  0  0  0  0  4  5  0  0  0  0  0  6  0  0  6  0  7  8  0  0  0  0  9  10  0  0  0  0  0  7  8  0  0  11  0  0  0  0  0  9  10  0  0  0  0  0  12  0  0  0  0  0  9  10  0  0  0  0  0  0  0  4  0  4  0  0  0  0  6  0  6  0  0  0  0  11  0  11  0  0  0  0  13  0  13  0  0  0  0  12  0  12  0  0  14  0  0  0  15  16  0  12  12</s>
<s>public virtual CheckoutCommand Checkout(){return new CheckoutCommand(repo);}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  2  2</s>
<s>public ValueEval Evaluate(String sheetName, int rowIndex, int columnIndex){IEvaluationCell cell = _sewb.GetEvaluationCell(sheetName, rowIndex, columnIndex);switch (cell.CellType){case CellType.Boolean:return BoolEval.ValueOf(cell.BooleanCellValue);case CellType.Error:return ErrorEval.ValueOf(cell.ErrorCellValue);case CellType.Formula:return _evaluator.Evaluate(cell);case CellType.Numeric:return new NumberEval(cell.NumericCellValue);case CellType.String:return new StringEval(cell.StringCellValue);case CellType.Blank:return null;}throw new InvalidOperationException("Bad cell type (" + cell.CellType + ")");}</s></s>0  0  0  0  0  1  0  0  2  3  0  0  4  0  0  5  0  0  0  6  0  7  0  0  0  8  9  0  3  3  4  4  5  5  0  0  7  10  0  0  0  0  10  11  0  0  0  12  13  0  0  0  7  14  0  0  0  10  15  0  0  0  16  13  0  0  0  7  17  0  0  0  10  18  0  0  0  19  1  0  7  7  0  0  0  10  20  0  0  21  0  0  0  7  22  0  0  0  10  2  0  0  23  0  0  0  7  24  0  0  0  10  25  0  0  0  0  26  0  0  0  0  0  0  7  10  0</s>
<s>public virtual PutFileSystemPolicyResponse PutFileSystemPolicy(PutFileSystemPolicyRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutFileSystemPolicyRequestMarshaller.Instance;options.ResponseUnmarshaller = PutFileSystemPolicyResponseUnmarshaller.Instance;return Invoke<PutFileSystemPolicyResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override long FileLength(string name){EnsureOpen();if (this.writer!= null){return writer.FileLength(name);}FileEntry e = entries[IndexFileNames.StripSegmentName(name)];if (e == null){throw new FileNotFoundException(name);}return e.Length;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  2  0  0  0  0  0  3  0  0  0  0  0  3  0  0  1  1  0  0  4  0  5  0  0  6  0  0  0  0  7  8  0  1  1  0  0  5  0  0  0  0  9  0  1  1  0  0  5  10</s>
<s>public virtual DescribeCacheClustersResponse DescribeCacheClusters(){return DescribeCacheClusters(new DescribeCacheClustersRequest());}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  2  0</s>
<s>public virtual void SetObjectId(RevObject obj){SetObjectId(obj, obj.Type);}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  2  2  0  0  2  3</s>
<s>public bool RowHasCells(int row){if (row > records.Length - 1) return false;  CellValueRecordInterface[] rowCells = records[row]; if (rowCells == null) return false;for (int col = 0; col < rowCells.Length; col++){if (rowCells[col]!= null) return true;}return false;}</s></s>0  0  0  0  0  0  0  0  0  1  0  0  0  1  0  0  2  3  0  0  0  0  0  0  4  0  0  5  0  0  2  0  1  1  0  0  5  0  0  0  0  0  0  0  6  0  0  0  6  0  5  3  0  6  0  0  0  0  5  0  6  6  0  0  0  0  0</s>
<s>public override TokenStream Create(TokenStream input){return new SpanishLightStemFilter(input);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  0  3  0  2  2</s>
<s>public StoredField(string name, int value): base(name, TYPE){FieldsData = new Int32(value);}</s></s>0  0  0  0  0  0  0  0  1  3  2  7  0  3  4  0  5  0  0  6  0  7  7  0</s>
<s>public virtual DescribePublicIpv4PoolsResponse DescribePublicIpv4Pools(DescribePublicIpv4PoolsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribePublicIpv4PoolsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribePublicIpv4PoolsResponseUnmarshaller.Instance;return Invoke<DescribePublicIpv4PoolsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public IndexRevision(IndexWriter writer){sdp = writer.Config.IndexDeletionPolicy as SnapshotDeletionPolicy;if (sdp == null)throw new ArgumentException("IndexWriter must be created with SnapshotDeletionPolicy", "writer");this.writer = writer;this.commit = sdp.Snapshot();this.version = RevisionVersion(commit);this.sourceFiles = RevisionFiles(commit);}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  0  0  0  3  4  5  6  0  0  2  0  0  0  7  0  0  0  0  0  0  0  0  0  3  0  3  0  0  0  0  8  0  0  0  2  9  0  0  0  0  0  10  0  0  11  0  8  8  0  0  0  0  12  0  0  13  0  8  8</s>
<s>public void SetTabIdArray(short[] array){_tabids = array;}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  2  0  1</s>
<s>public virtual UpdateObjectAttributesResponse UpdateObjectAttributes(UpdateObjectAttributesRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateObjectAttributesRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateObjectAttributesResponseUnmarshaller.Instance;return Invoke<UpdateObjectAttributesResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual GetGameSessionLogUrlResponse GetGameSessionLogUrl(GetGameSessionLogUrlRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetGameSessionLogUrlRequestMarshaller.Instance;options.ResponseUnmarshaller = GetGameSessionLogUrlResponseUnmarshaller.Instance;return Invoke<GetGameSessionLogUrlResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public RefCount(T @object){this.m_object = @object;}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  0  0  2  0  3</s>
<s>public override java.nio.ByteBuffer put(int index, byte b){checkIndex(index);backingArray[offset + index] = b;return this;}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  0  4  0  0  5  0  0  0  6  0  4  4  0  0  0  7  0  0  0  8  4  0  5  0  0</s>
<s>public virtual IntervalSet Look(ATNState s, ATNState stopState, RuleContext ctx){IntervalSet r = new IntervalSet();bool seeThruPreds = true;PredictionContext lookContext = ctx!= null? PredictionContext.FromRuleContext(s.atn, ctx) : null;Look(s, stopState, lookContext, r, new HashSet<ATNConfig>(), new BitSet(), seeThruPreds, true);return r;}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  2  4  0  5  6  0  0  0  0  0  7  0  0  0  0  0  0  0  0  8  0  0  0  0  9  0  10  0  0  0  6  0  0  0  9  11  0  0  0  3  12  6  6  0  0  0  1  0  3  3  4  4  10  10  7  7  0  0  0  13  0  14  0  0  0  15  0  8  8  0  0  0  7</s>
<s>public int GetValidationType(){return _validationType;}</s></s>0  0  0  0  0  0  0  0  0  1</s>
<s>public virtual DeleteTagCommand TagDelete(){return new DeleteTagCommand(repo);}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  2  2</s>
<s>public SortRescorer(Sort sort){this.sort = sort;}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  0  2  0  2</s>
<s>public void VerifyBelongsToWorkbook(HSSFWorkbook wb){if (wb.Workbook!= _workbook){throw new ArgumentException("This Style does not belong to the supplied Workbook. Are you trying to assign a style from one workbook to the cell of a differnt workbook?");}}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  0  2  3  4  0  0  0  5  0  0  0</s>
<s>public java.lang.StringBuffer insert(int index, object obj){return insert(index, obj == null? "null" : obj.ToString());}</s></s>0  0  0  0  0  0  0  1  2  3  0  0  0  4  0  0  5  0  0  0  3  0  4  4  0  0  0  5  0  0  0  0  5  6  0</s>
<s>public override bool ContainsKey(ICharSequence text){if (text == null){throw new ArgumentNullException("text");}return false;}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  2  0  0  0  0  3  0  0  0  0  0</s>
<s>public int CompareTo(HSSFRichTextString other){return _string.CompareTo(other._string);}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  0  3  0  0  0  0  2  3</s>
<s>public RequestSpotInstancesRequest(string spotPrice){_spotPrice = spotPrice;}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  3</s>
<s>public virtual ObjectId GetNewObjectId(){return newObjectId;}</s></s>0  0  0  0  0  0  1  0  0  0  2</s>
<s>public virtual void SetDeltaBaseAsOffset(bool deltaBaseAsOffset){this.deltaBaseAsOffset = deltaBaseAsOffset;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  1</s>
<s>public LengthFilterFactory(IDictionary<string, string> args): base(args){min = RequireInt32(args, MIN_KEY);max = RequireInt32(args, MAX_KEY);enablePositionIncrements = GetBoolean(args, "enablePositionIncrements", true);if (args.Count > 0){throw new System.ArgumentException("Unknown parameters: " + args);}}</s></s>0  0  0  0  0  0  0  0  1  0  2  2  0  0  3  0  4  0  0  5  0  3  3  6  6  0  0  0  7  0  0  5  0  3  3  8  8  0  0  0  9  0  0  10  0  3  3  0  0  0  0  0  0  0  0  3  11  0  0  0  0  0  12  13  0  0  0  0  3  0</s>
<s>public TruncateTokenFilter(TokenStream input, int length): base(input){if (length < 1){throw new System.ArgumentOutOfRangeException("length parameter must be a positive number: " + length);}this.length = length;this.termAttribute = AddAttribute<ICharTermAttribute>();this.keywordAttr = AddAttribute<IKeywordAttribute>();}</s></s>0  0  0  0  0  0  0  0  1  3  2  4  0  0  3  0  0  0  0  4  0  0  0  0  0  5  6  0  0  0  0  4  0  0  0  0  4  0  4  0  0  0  0  7  0  0  0  8  0  9  0  0  0  0  0  10  0  0  0  8  0  11  0</s>
<s>public virtual ListDomainsResponse ListDomains(){return ListDomains(new ListDomainsRequest());}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  2  0</s>
<s>public override TokenStream Create(TokenStream input){return new ArabicStemFilter(input);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  0  3  0  2  2</s>
<s>public virtual NGit.Api.PushCommand SetRefSpecs(IList<RefSpec> specs){CheckCallable();this.refSpecs.Clear();Sharpen.Collections.AddAll(this.refSpecs, specs);return this;}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  0  4  0  5  6  0  0  0  7  0  0  0  0  0  0  8  9  0  0  0  0  0  10  11  12  0  0  0  0  8  6  6  0  0</s>
<s>public virtual NGit.Blame.BlameGenerator SetDiffAlgorithm(DiffAlgorithm algorithm){diffAlgorithm = algorithm;return this;}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  4  5  0  0  0  6  0  5  0  0</s>
<s>public virtual GroupingSearch SetIncludeMaxScore(bool includeMaxScore){this.includeMaxScore = includeMaxScore;return this;}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  0  0  0  2  0  2  0  0</s>
<s>public override Field[] CreateIndexableFields(IShape shape){double distErr = SpatialArgs.CalcDistanceFromErrPct(shape, m_distErrPct, m_ctx);return CreateIndexableFields(shape, distErr);}</s></s>0  0  0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  0  5  6  0  3  3  7  7  8  8  0  0  1  0  3  3  4  4</s>
<s>public virtual PutMethodResponseResponse PutMethodResponse(PutMethodResponseRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutMethodResponseRequestMarshaller.Instance;options.ResponseUnmarshaller = PutMethodResponseResponseUnmarshaller.Instance;return Invoke<PutMethodResponseResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public LegacyCredentials(Credential legacyCredential){this.legacyCredential = legacyCredential;}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  0  2  0  2</s>
<s>public virtual DescribeFeatureTransformationResponse DescribeFeatureTransformation(DescribeFeatureTransformationRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeFeatureTransformationRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeFeatureTransformationResponseUnmarshaller.Instance;return Invoke<DescribeFeatureTransformationResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual DeleteRouteResponse DeleteRoute(DeleteRouteRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteRouteRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteRouteResponseUnmarshaller.Instance;return Invoke<DeleteRouteResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual AssociatePhoneNumbersWithVoiceConnectorResponse AssociatePhoneNumbersWithVoiceConnector(AssociatePhoneNumbersWithVoiceConnectorRequest request){var options = new InvokeOptions();options.RequestMarshaller = AssociatePhoneNumbersWithVoiceConnectorRequestMarshaller.Instance;options.ResponseUnmarshaller = AssociatePhoneNumbersWithVoiceConnectorResponseUnmarshaller.Instance;return Invoke<AssociatePhoneNumbersWithVoiceConnectorResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public long RamBytesUsed(){return ((blocks!= null)? (blockSize * blocks.Length) : 0);}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  2  0  1  3  0</s>
<s>public short ReadShort(){return _in.ReadShort();}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  0  0</s>
<s>public virtual UpdatePipelineNotificationsResponse UpdatePipelineNotifications(UpdatePipelineNotificationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdatePipelineNotificationsRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdatePipelineNotificationsResponseUnmarshaller.Instance;return Invoke<UpdatePipelineNotificationsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override java.io.Writer append(char c){write(c);return this;}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  0  4  0  0  0  5  0  4  4  0  0</s>
<s>public override java.util.Iterator<V> iterator(){return new java.util.Hashtable<K, V>.ValueIterator(this._enclosing);}</s></s>0  0  0  0  0  0  0  0  1  0  2  0  3  4  0  0  0  0  0  0  0  0  1  0  5  0  6  3  7  0  0  0  0  8</s>
<s>public UnitsRecord(RecordInputStream in1){field_1_units = in1.ReadShort();}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  0  0  3  4  0</s>
<s>public virtual bool IsEmpty(){return first;}</s></s>0  0  0  0  0  0  0  0  0  0  1</s>
<s>public override string ToString(){return "ANY_DIFF";}</s></s>0  0  0  0  0  0  0  0  0  0  0</s>
<s>public virtual UpdateDomainNameResponse UpdateDomainName(UpdateDomainNameRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateDomainNameRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateDomainNameResponseUnmarshaller.Instance;return Invoke<UpdateDomainNameResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public DeleteSnapshotRequest(string snapshotId){_snapshotId = snapshotId;}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  3</s>
<s>public void ReadFully(byte[] buf){ReadFully(buf, 0, buf.Length);}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  1  0  0  0  0  1  2</s>
<s>public SliceReader(Int32BlockPool pool){this.pool = pool;}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  0  2  0  2</s>
<s>public virtual void SetDeltaSearchMemoryLimit(long memoryLimit){deltaSearchMemoryLimit = memoryLimit;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  2  0  1</s>
<s>public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append("[BOOKBOOL]\n");buffer.Append("   .savelinkvalues  = ").Append(StringUtil.ToHexString(SaveLinkValues)).Append("\n");buffer.Append("[/BOOKBOOL]\n");return buffer.ToString();}</s></s>0  0  0  0  0  0  1  0  0  0  0  2  0  3  0  0  2  0  0  0  0  3  4  0  0  0  0  0  0  0  0  0  0  0  3  4  0  0  0  4  0  0  0  0  5  6  0  7  7  4  0  0  0  0  0  0  0  3  4  0  0  0  0  0  0  0  3  1  0</s>
<s>public virtual DescribeTransitGatewayAttachmentsResponse DescribeTransitGatewayAttachments(DescribeTransitGatewayAttachmentsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeTransitGatewayAttachmentsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeTransitGatewayAttachmentsResponseUnmarshaller.Instance;return Invoke<DescribeTransitGatewayAttachmentsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual CreateVpcResponse CreateVpc(CreateVpcRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateVpcRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateVpcResponseUnmarshaller.Instance;return Invoke<CreateVpcResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual DescribeElasticGpusResponse DescribeElasticGpus(DescribeElasticGpusRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeElasticGpusRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeElasticGpusResponseUnmarshaller.Instance;return Invoke<DescribeElasticGpusResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override java.nio.IntBuffer put(int c){if (_position == _limit){throw new java.nio.BufferOverflowException();}byteBuffer.putInt(_position++ * libcore.io.SizeOf.INT, c);return this;}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  0  4  0  0  0  5  6  0  0  0  0  0  0  1  7  0  0  0  0  8  9  0  0  0  0  5  0  0  0  10  11  12  13  4  4  0  0</s>
<s>public virtual UpdateEndpointsBatchResponse UpdateEndpointsBatch(UpdateEndpointsBatchRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateEndpointsBatchRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateEndpointsBatchResponseUnmarshaller.Instance;return Invoke<UpdateEndpointsBatchResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual void FromRaw(byte[] bs, int p){w1 = NB.DecodeInt32(bs, p);w2 = NB.DecodeInt32(bs, p + 4);w3 = NB.DecodeInt32(bs, p + 8);w4 = NB.DecodeInt32(bs, p + 12);w5 = NB.DecodeInt32(bs, p + 16);}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  3  0  0  0  4  5  0  1  1  2  2  0  0  6  0  0  0  4  5  0  1  1  0  0  2  0  0  0  7  0  0  0  4  5  0  1  1  0  0  2  0  0  0  8  0  0  0  4  5  0  1  1  0  0  2  0  0  0  9  0  0  0  4  5  0  1  1  0  0  2  0</s>
<s>public static NGit.Transport.OpenSshConfig Get(FS fs){FilePath home = fs.UserHome();if (home == null){home = new FilePath(".").GetAbsoluteFile();}FilePath config = new FilePath(new FilePath(home, ".ssh"), Constants.CONFIG);NGit.Transport.OpenSshConfig osc = new NGit.Transport.OpenSshConfig(home, config);osc.Refresh();return osc;}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  4  5  0  0  0  6  0  7  0  0  0  5  8  0  0  0  7  0  0  0  0  7  0  0  0  0  6  0  0  0  9  0  0  0  6  0  10  0  0  6  0  0  0  6  0  7  7  0  0  0  0  11  12  0  0  0  0  0  1  2  0  13  0  0  0  0  0  1  2  0  7  7  10  10  0  0  0  13  14  0  0  13</s>
<s>public VCenterRecord(RecordInputStream in1){field_1_vcenter = in1.ReadShort();}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  0  0  3  4  0</s>
<s>public virtual Stream ObtainFile(string sessionId, string source, string fileName){lock (padlock){EnsureOpen();ReplicationSession session;if (sessions.TryGetValue(sessionId, out session) && session!= null && session.IsExpired(ExpirationThreshold)){ReleaseSession(sessionId);session = null;}if (session == null){throw new SessionExpiredException(string.Format("session ({0}) expired while obtaining file: source={1} file={2}", sessionId, source, fileName));}sessions[sessionId].MarkAccessed();return session.Revision.Revision.Open(source, fileName);}}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  3  0  0  4  0  0  5  0  0  0  6  0  0  0  7  8  8  0  0  0  0  0  9  10  0  2  2  0  8  0  8  0  0  0  8  11  0  12  12  0  0  0  13  0  2  2  0  0  8  0  0  0  0  8  0  0  0  0  14  0  0  0  0  0  15  0  0  0  2  2  3  3  4  4  0  0  0  0  9  0  2  2  16  0  0  0  0  0  0  8  17  17  18  0  3  3  4  4</s>
<s>public virtual DownloadDefaultKeyPairResponse DownloadDefaultKeyPair(DownloadDefaultKeyPairRequest request){var options = new InvokeOptions();options.RequestMarshaller = DownloadDefaultKeyPairRequestMarshaller.Instance;options.ResponseUnmarshaller = DownloadDefaultKeyPairResponseUnmarshaller.Instance;return Invoke<DownloadDefaultKeyPairResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponse DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponseUnmarshaller.Instance;return Invoke<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual ResetEbsDefaultKmsKeyIdResponse ResetEbsDefaultKmsKeyId(ResetEbsDefaultKmsKeyIdRequest request){var options = new InvokeOptions();options.RequestMarshaller = ResetEbsDefaultKmsKeyIdRequestMarshaller.Instance;options.ResponseUnmarshaller = ResetEbsDefaultKmsKeyIdResponseUnmarshaller.Instance;return Invoke<ResetEbsDefaultKmsKeyIdResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public int GetPropertiesPerBlock(){return bigBlockSize / POIFSConstants.PROPERTY_SIZE;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  2  3</s>
<s>public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval numberVE){return this.Evaluate(srcRowIndex, srcColumnIndex, numberVE, null);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  3  0  0  4  0  0  0  0  0  1  0  2  2  3  3  4  4  0  0</s>
<s>public virtual GetFindingsStatisticsResponse GetFindingsStatistics(GetFindingsStatisticsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetFindingsStatisticsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetFindingsStatisticsResponseUnmarshaller.Instance;return Invoke<GetFindingsStatisticsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual ModifyDBClusterResponse ModifyDBCluster(ModifyDBClusterRequest request){var options = new InvokeOptions();options.RequestMarshaller = ModifyDBClusterRequestMarshaller.Instance;options.ResponseUnmarshaller = ModifyDBClusterResponseUnmarshaller.Instance;return Invoke<ModifyDBClusterResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public LimitTokenCountFilterFactory(IDictionary<string, string> args): base(args){maxTokenCount = RequireInt32(args, MAX_TOKEN_COUNT_KEY);consumeAllTokens = GetBoolean(args, CONSUME_ALL_TOKENS_KEY, false);if (args.Count > 0){throw new System.ArgumentException("Unknown parameters: " + args);}}</s></s>0  0  0  0  0  0  0  0  1  0  2  2  0  0  3  0  4  0  0  5  0  3  3  6  6  0  0  0  7  0  0  8  0  3  3  9  9  0  0  0  0  0  0  3  10  0  0  0  0  0  11  12  0  0  0  0  3  0</s>
<s>public virtual Query Build(IQueryNode queryNode){if (!(queryNode is MatchNoDocsQueryNode)){throw new QueryNodeException(new Message(QueryParserMessages.LUCENE_QUERY_CONVERSION_ERROR, queryNode.ToQueryString(new EscapeQuerySyntax()), queryNode.GetType().Name));}return new BooleanQuery();}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  3  4  4  0  0  0  5  0  0  0  6  0  0  0  7  8  0  0  0  3  9  0  0  0  10  0  0  0  0  0  3  11  0  12  0  0  13  0</s>
<s>public GetUserPolicyRequest(string userName, string policyName){_userName = userName;_policyName = policyName;}</s></s>0  0  0  0  0  0  0  0  1  3  1  5  0  0  0  0  2  0  3  0  0  4  0  5</s>
<s>public virtual RotateEncryptionKeyResponse RotateEncryptionKey(RotateEncryptionKeyRequest request){var options = new InvokeOptions();options.RequestMarshaller = RotateEncryptionKeyRequestMarshaller.Instance;options.ResponseUnmarshaller = RotateEncryptionKeyResponseUnmarshaller.Instance;return Invoke<RotateEncryptionKeyResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual int GetLinesAdded(){return nAdded;}</s></s>0  0  0  0  0  0  0  0  0  0  1</s>
<s>public virtual IList<IToken> GetHiddenTokensToLeft(int tokenIndex, int channel){LazyInit();if (tokenIndex < 0 || tokenIndex >= tokens.Count){throw new ArgumentOutOfRangeException(tokenIndex + " not in 0.." + (tokens.Count - 1));}if (tokenIndex == 0){return null;}int prevOnChannel = PreviousTokenOnChannel(tokenIndex - 1, Lexer.DefaultTokenChannel);if (prevOnChannel == tokenIndex - 1){return null;}int from = prevOnChannel + 1;int to = tokenIndex - 1;return FilterForChannel(from, to, channel);}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  3  0  0  4  0  0  0  5  0  0  0  0  3  0  0  3  0  6  7  0  0  0  8  0  0  0  0  3  0  0  0  0  6  7  0  0  0  3  0  0  0  0  0  0  0  0  9  0  0  10  0  0  0  3  0  0  0  11  12  0  0  9  0  3  0  0  0  0  0  0  0  0  13  0  0  9  0  0  0  0  0  14  0  0  3  0  0  0  15  0  13  13  14  14  4  4</s>
<s>public virtual DescribeValidDBInstanceModificationsResponse DescribeValidDBInstanceModifications(DescribeValidDBInstanceModificationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeValidDBInstanceModificationsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeValidDBInstanceModificationsResponseUnmarshaller.Instance;return Invoke<DescribeValidDBInstanceModificationsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public void Add(RevFlag flag){flags |= flag.mask;}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  3  0  0  2  4</s>
<s>public virtual void clear(){java.util.Iterator<E> it = iterator();while (it.hasNext()){it.next();it.remove();}}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  2  3  4  5  0  0  6  0  0  0  0  5  7  0  0  0  0  0  5  8  0  0  0  0  5  9  0</s>
<s>public virtual RegisterImageResponse RegisterImage(RegisterImageRequest request){var options = new InvokeOptions();options.RequestMarshaller = RegisterImageRequestMarshaller.Instance;options.ResponseUnmarshaller = RegisterImageResponseUnmarshaller.Instance;return Invoke<RegisterImageResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override bool Equals(object o){if (!(o is TermQuery)){return false;}TermQuery other = (TermQuery)o;return (this.Boost == other.Boost) && this.term.Equals(other.term);}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  2  2  0  0  0  0  0  2  0  3  0  0  2  1  0  0  0  0  0  0  4  0  3  4  0  0  0  0  5  0  0  0  0  3  5</s>
<s>public URI(string scheme, string authority, string path, string query, string fragment){if (scheme!= null && path!= null &&!string.IsNullOrEmpty(path) && path[0]!= '/'){throw new java.net.URISyntaxException(path, "Relative path");}java.lang.StringBuilder uri = new java.lang.StringBuilder();if (scheme!= null){uri.append(scheme);uri.append(':');}if (authority!= null){uri.append("");AUTHORITY_ENCODER.appendEncoded(uri, authority);}if (path!= null){PATH_ENCODER.appendEncoded(uri, path);}if (query!= null){uri.append('?');ALL_LEGAL_ENCODER.appendEncoded(uri, query);}if (fragment!= null){uri.append('#');ALL_LEGAL_ENCODER.appendEncoded(uri, fragment);}parseURI(uri.ToString(), false);}</s></s>0  0  0  0  0  0  0  0  1  2  1  12  1  3  1  16  1  18  0  0  0  0  0  0  0  2  0  0  3  0  0  0  0  1  4  0  3  3  0  0  3  0  0  0  0  0  0  0  0  0  5  6  7  0  3  3  0  0  0  0  0  0  5  8  9  0  10  0  0  0  0  5  8  9  0  0  0  2  0  0  0  0  0  10  11  0  2  2  0  0  0  10  11  0  0  0  0  0  12  0  0  0  0  0  10  11  0  0  0  0  0  0  13  14  0  10  10  12  12  0  0  3  0  0  0  0  0  15  14  0  10  10  3  3  0  0  16  0  0  0  0  0  10  11  0  0  0  0  0  0  17  14  0  10  10  16  16  0  0  18  0  0  0  0  0  10  11  0  0  0  0  0  0  17  14  0  10  10  18  18  0  0  19  0  0  0  0  10  20  0  0  0</s>
<s>public BlameGenerator(Repository repository, string path){this.repository = repository;this.resultPath = PathFilter.Create(path);idBuf = new MutableObjectId();SetFollowFileRenames(true);InitRevPool(false);remaining = -1;}</s></s>0  0  0  0  0  0  0  0  1  3  2  7  0  0  0  0  0  0  3  0  3  0  0  0  0  4  0  0  0  5  6  0  7  7  0  0  8  0  0  9  0  0  0  10  0  0  0  0  0  11  0  0  0  0  0  12  0  0  0</s>
<s>public virtual void writeTo(java.io.OutputStream @out){throw new System.NotImplementedException();}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  2  3  4  0  0  0  0  5  6  0</s>
<s>public DeletableItem(string name, List<Attribute> attributes){_name = name;_attributes = attributes;}</s></s>0  0  0  0  0  0  0  0  1  4  2  0  0  0  0  0  3  0  4  0  0  5  0  6</s>
<s>public virtual DescribeGroupResponse DescribeGroup(DescribeGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeGroupResponseUnmarshaller.Instance;return Invoke<DescribeGroupResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual EnableVpcClassicLinkResponse EnableVpcClassicLink(EnableVpcClassicLinkRequest request){var options = new InvokeOptions();options.RequestMarshaller = EnableVpcClassicLinkRequestMarshaller.Instance;options.ResponseUnmarshaller = EnableVpcClassicLinkResponseUnmarshaller.Instance;return Invoke<EnableVpcClassicLinkResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual DescribeStacksResponse DescribeStacks(){return DescribeStacks(new DescribeStacksRequest());}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  2  0</s>
<s>public override java.nio.CharBuffer duplicate(){return copy(this);}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  0  0  4  0  0  0</s>
<s>public static double Mod(double n, double d){double result = 0;if (d == 0){result = double.NaN;}else if (Sign(n) == Sign(d)){result = n % d;}else{result = ((n % d) + d) % d;}return result;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  0  0  3  0  0  0  0  2  0  0  0  0  3  0  0  0  4  0  0  0  5  0  1  1  0  5  0  2  2  0  0  0  3  0  0  1  2  0  0  0  3  0  0  0  0  0  0  1  2  2  2  0  3</s>
<s>public static string GetLocalizedMessage(string key, CultureInfo locale){string message = GetResourceBundleObject(key, locale);if (message == null){return "Message with key:" + key + " and locale: " + locale+ " not found.";}return message;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  2  3  0  0  0  0  0  4  0  0  5  0  1  1  3  3  0  0  4  0  0  0  0  0  0  0  0  1  0  3  0  0  4</s>
<s>public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser){if (Child == null)return "";return Child.ToQueryString(escapeSyntaxParser) + "^"+ GetValueString();}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  3  0  0  0  0  0  0  0  0  3  0  0  2  2  0  0  4  0</s>
<s>public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser){if (GetChild() == null)return "";return "( " + GetChild().ToQueryString(escapeSyntaxParser) + " )";}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  0  3  0  0  0  0  0  0  0  0  0  0  0  3  0  0  0  2  2  0</s>
<s>public virtual GetInvalidationResponse GetInvalidation(GetInvalidationRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetInvalidationRequestMarshaller.Instance;options.ResponseUnmarshaller = GetInvalidationResponseUnmarshaller.Instance;return Invoke<GetInvalidationResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public String FormatAsString(){return FormatAsString(null, false);}</s></s>0  0  0  0  0  1  0  0  0  0  1  0  0  0  0  0</s>
<s>public int PrefixCompare(byte[] bs, int p){int cmp;cmp = NB.CompareUInt32(w1, Mask(1, NB.DecodeInt32(bs, p)));if (cmp!= 0){return cmp;}cmp = NB.CompareUInt32(w2, Mask(2, NB.DecodeInt32(bs, p + 4)));if (cmp!= 0){return cmp;}cmp = NB.CompareUInt32(w3, Mask(3, NB.DecodeInt32(bs, p + 8)));if (cmp!= 0){return cmp;}cmp = NB.CompareUInt32(w4, Mask(4, NB.DecodeInt32(bs, p + 12)));if (cmp!= 0){return cmp;}return NB.CompareUInt32(w5, Mask(5, NB.DecodeInt32(bs, p + 16)));}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  0  3  3  0  0  3  0  0  0  4  5  0  6  6  0  0  7  0  0  0  0  0  0  4  8  0  1  1  2  2  0  0  3  0  0  0  3  0  0  3  0  0  0  4  5  0  9  9  0  0  7  0  0  0  0  0  0  4  8  0  1  1  0  0  2  0  0  0  3  0  0  0  3  0  0  3  0  0  0  4  5  0  10  10  0  0  7  0  0  0  0  0  0  4  8  0  1  1  0  0  2  0  0  0  3  0  0  0  3  0  0  3  0  0  0  4  5  0  11  11  0  0  7  0  0  0  0  0  0  4  8  0  1  1  0  0  2  0  0  0  3  0  0  0  3  0  0  0  4  5  0  12  12  0  0  7  0  0  0  0  0  0  4  8  0  1  1  0  0  2  0</s>
<s>public virtual AddApplicationInputProcessingConfigurationResponse AddApplicationInputProcessingConfiguration(AddApplicationInputProcessingConfigurationRequest request){var options = new InvokeOptions();options.RequestMarshaller = AddApplicationInputProcessingConfigurationRequestMarshaller.Instance;options.ResponseUnmarshaller = AddApplicationInputProcessingConfigurationResponseUnmarshaller.Instance;return Invoke<AddApplicationInputProcessingConfigurationResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public static TermRangeQuery NewStringRange(string field, string lowerTerm, string upperTerm, bool includeLower, bool includeUpper){BytesRef lower = lowerTerm == null? null : new BytesRef(lowerTerm);BytesRef upper = upperTerm == null? null : new BytesRef(upperTerm);return new TermRangeQuery(field, lower, upper, includeLower, includeUpper);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  3  0  0  4  0  0  5  0  0  6  0  0  0  7  0  8  0  0  0  3  0  0  0  7  0  3  3  0  0  7  0  9  0  0  0  4  0  0  0  7  0  4  4  0  0  0  0  2  2  8  8  9  9  5  5  6  6</s>
<s>static public double FV(double r, int nper, double pmt, double pv, int type){double fv = -(pv * Math.Pow(1 + r, nper) + pmt * (1 + r * type) * (Math.Pow(1 + r, nper) - 1) / r);return fv;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  3  0  0  4  0  0  5  0  0  0  0  0  6  0  0  0  0  0  4  0  0  7  8  0  0  0  0  1  2  2  0  0  0  3  0  0  0  0  1  5  0  0  0  0  7  8  0  0  0  0  1  2  2  0  1  0  6</s>
<s>public int CheckExternSheet(int firstSheetIndex, int lastSheetIndex){int thisWbIndex = -1; for (int i = 0; i < _externalBookBlocks.Length; i++){SupBookRecord ebr = _externalBookBlocks[i].GetExternalBookRecord();if (ebr.IsInternalReferences){thisWbIndex = i;break;}}if (thisWbIndex < 0){throw new InvalidOperationException("Could not find 'internal references' EXTERNALBOOK");}int j = _externSheetRecord.GetRefIxForSheet(thisWbIndex, firstSheetIndex, lastSheetIndex);if (j >= 0){return j;}return _externSheetRecord.AddRef(thisWbIndex, firstSheetIndex, lastSheetIndex);}</s></s>0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  0  0  3  0  0  0  0  0  0  0  4  0  0  0  4  0  5  6  0  4  0  0  0  7  0  8  0  0  0  0  5  0  4  4  9  0  0  0  8  10  0  0  0  3  0  4  0  0  0  3  0  0  0  0  11  0  0  0  0  0  0  0  12  0  0  0  13  14  0  3  3  1  1  2  2  0  0  12  0  0  0  12  0  0  0  13  15  0  3  3  1  1  2  2</s>
<s>public virtual DescribeSentimentDetectionJobResponse DescribeSentimentDetectionJob(DescribeSentimentDetectionJobRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeSentimentDetectionJobRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeSentimentDetectionJobResponseUnmarshaller.Instance;return Invoke<DescribeSentimentDetectionJobResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append("[UNITS]\n");buffer.Append("   .units                = ").Append("0x").Append(HexDump.ToHex(Units)).Append(" (").Append(Units).Append(" )");buffer.Append(Environment.NewLine);buffer.Append("[/UNITS]\n");return buffer.ToString();}</s></s>0  0  0  0  0  0  1  0  0  0  0  2  0  3  0  0  2  0  0  0  0  3  4  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  3  4  0  0  0  4  0  0  0  4  0  0  0  0  5  6  0  7  7  4  0  0  0  4  0  7  7  4  0  0  0  0  0  0  3  4  0  0  0  8  9  0  0  0  3  4  0  0  0  0  0  0  0  3  1  0</s>
<s>public java.util.NavigableMap<K, V> tailMap(K from, bool inclusive){java.util.TreeMap.Bound fromBound = inclusive? java.util.TreeMap.Bound.INCLUSIVE: java.util.TreeMap.Bound.EXCLUSIVE;return this.subMap(from, fromBound, default(K), java.util.TreeMap.Bound.NO_BOUND);}</s></s>0  0  0  0  0  0  0  1  0  2  0  3  4  5  0  0  3  6  0  0  7  0  0  0  0  0  0  0  1  8  9  0  10  0  0  7  0  0  0  0  0  1  8  9  11  0  0  0  0  0  1  8  9  12  0  0  0  0  13  0  6  6  10  10  0  0  3  0  0  0  0  0  0  1  8  9  14</s>
<s>public static int CompareTo(Ref o1, Ref o2){return Sharpen.Runtime.CompareOrdinal(o1.GetName(), o2.GetName());}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  1  3  0  0  0  0  0  4  5  6  0  0  0  0  2  7  0  0  0  0  3  7  0</s>
<s>public virtual PutEventsConfigurationResponse PutEventsConfiguration(PutEventsConfigurationRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutEventsConfigurationRequestMarshaller.Instance;options.ResponseUnmarshaller = PutEventsConfigurationResponseUnmarshaller.Instance;return Invoke<PutEventsConfigurationResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual DetachFromIndexResponse DetachFromIndex(DetachFromIndexRequest request){var options = new InvokeOptions();options.RequestMarshaller = DetachFromIndexRequestMarshaller.Instance;options.ResponseUnmarshaller = DetachFromIndexResponseUnmarshaller.Instance;return Invoke<DetachFromIndexResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual RebaseCommand Rebase(){return new RebaseCommand(repo);}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  2  2</s>
<s>public ISearchGroup<T> Next(){ISearchGroup<T> group = iter.Current;if (group.SortValues == null){throw new ArgumentException("group.sortValues is null; you must pass fillFields=true to the first pass collector");}return group;}</s></s>0  0  0  0  0  0  0  1  2  0  0  0  0  0  0  0  1  0  3  0  0  4  5  0  0  0  3  6  0  0  0  0  7  0  0  0  0  3</s>
<s>public virtual UpdateMLModelResponse UpdateMLModel(UpdateMLModelRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateMLModelRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateMLModelResponseUnmarshaller.Instance;return Invoke<UpdateMLModelResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual CreateIPSetResponse CreateIPSet(CreateIPSetRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateIPSetRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateIPSetResponseUnmarshaller.Instance;return Invoke<CreateIPSetResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public FieldDateResolutionFCListener(QueryConfigHandler config){this.config = config;}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  0  2  0  2</s>
<s>public override bool containsValue(object value){java.util.HashMap.HashMapEntry<K, V>[] tab = table;int len = tab.Length;if (value == null){{for (int i = 0; i < len; i++){{for (java.util.HashMap.HashMapEntry<K, V> e = tab[i]; e!= null; e = e.next){if (e.value == null){return true;}}}}}return entryForNullKey!= null && (object)entryForNullKey.value == null;}{for (int i_1 = 0; i_1 < len; i_1++){{for (java.util.HashMap.HashMapEntry<K, V> e = tab[i_1]; e!= null; e = e.next){if (value.Equals(e.value)){return true;}}}}}return entryForNullKey!= null && value.Equals(entryForNullKey.value);}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  2  3  4  0  5  0  6  7  0  0  8  0  9  0  0  0  0  10  0  0  8  11  0  0  1  0  0  0  0  0  0  0  12  0  0  0  12  10  0  12  0  0  0  0  0  0  0  2  3  4  5  6  0  0  7  13  0  0  8  0  12  12  0  13  0  0  13  0  0  13  14  0  0  0  0  13  1  0  0  0  0  0  0  0  15  0  0  0  0  0  15  1  0  0  0  0  0  0  16  0  0  0  16  10  0  16  0  0  0  0  0  0  0  2  3  4  5  6  0  0  7  13  0  0  8  0  16  16  0  13  0  0  13  0  0  13  14  0  0  0  0  1  17  0  0  0  13  1  0  0  0  0  0  0  15  0  0  0  1  17  0  0  0  15  1</s>
<s>public virtual DescribeWorkspaceBundlesResponse DescribeWorkspaceBundles(DescribeWorkspaceBundlesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeWorkspaceBundlesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeWorkspaceBundlesResponseUnmarshaller.Instance;return Invoke<DescribeWorkspaceBundlesResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public DocsEnum Reset(int[] postings){this.postings = postings;upto = -1;return this;}</s></s>0  0  0  0  0  1  0  0  0  0  0  2  0  0  0  0  0  2  0  2  0  0  3  0  0  0  0  0</s>
<s>public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(sid); out1.WriteShort(_reserved0);out1.WriteInt(_engineId);}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  0  2  3  0  4  4  0  0  0  2  3  0  5  5  0  0  0  2  6  0  7  7</s>
<s>public static java.nio.CharBuffer allocate(int capacity_1){if (capacity_1 < 0){throw new System.ArgumentException();}return new java.nio.ReadWriteCharArrayBuffer(capacity_1);}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  0  4  0  0  0  4  0  0  0  0  0  5  6  0  0  0  0  0  0  1  7  0  4  4</s>
<s>public override String ToFormulaString(String[] operands){StringBuilder buffer = new StringBuilder();buffer.Append(operands[0]);buffer.Append(">=");buffer.Append(operands[1]);return buffer.ToString();}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  2  0  0  0  3  0  4  0  0  3  0  0  0  0  4  5  0  0  0  2  0  0  0  0  0  0  4  5  0  0  0  0  0  0  4  5  0  0  0  2  0  0  0  0  0  0  4  6  0</s>
<s>public virtual DeletePipelineResponse DeletePipeline(DeletePipelineRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeletePipelineRequestMarshaller.Instance;options.ResponseUnmarshaller = DeletePipelineResponseUnmarshaller.Instance;return Invoke<DeletePipelineResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public InterfaceHdrRecord(int codePage){_codepage = codePage;}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  3</s>
<s>public virtual DescribeScalingParametersResponse DescribeScalingParameters(DescribeScalingParametersRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeScalingParametersRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeScalingParametersResponseUnmarshaller.Instance;return Invoke<DescribeScalingParametersResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public java.util.MapClass.Entry<K, V> higherEntry(K key){return this._enclosing.immutableCopy(this.findBounded(key, java.util.TreeMap.Relation.HIGHER));}</s></s>0  0  0  0  0  0  0  0  1  2  0  3  0  4  5  6  0  0  4  7  0  0  0  0  0  0  8  9  0  0  0  0  0  10  0  7  7  0  0  0  0  0  0  1  11  12  13</s>
<s>public CreateSpotDatafeedSubscriptionRequest(string bucket){_bucket = bucket;}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  3</s>
<s>public virtual string GetLocalizedMessage(){return GetLocalizedMessage(CultureInfo.InvariantCulture);}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  2</s>
<s>public UDFFinder GetUDFFinder(){return _uBook.GetUDFFinder();}</s></s>0  0  0  0  0  1  0  0  0  0  0  2  1  0</s>
<s>public ExternalName GetExternalName(String nameName, String sheetName, int externalWorkbookNumber){throw new InvalidOperationException("XSSF-style external names are not supported for HSSF");}</s></s>0  0  0  0  0  1  0  0  2  3  0  2  4  0  0  5  0  0  0  6  0  0  0</s>
<s>public OldFormulaRecord(RecordInputStream ris) :base(ris, ris.Sid == biff2_sid){;if (IsBiff2){field_4_value = ris.ReadDouble();}else{long valueLongBits = ris.ReadLong();specialCachedValue = SpecialCachedValue.Create(valueLongBits);if (specialCachedValue == null){field_4_value = BitConverter.Int64BitsToDouble(valueLongBits);}}if (IsBiff2){field_5_options = (short)ris.ReadUByte();}else{field_5_options = ris.ReadShort();}int expression_len = ris.ReadShort();int nBytesAvailable = ris.Available();field_6_Parsed_expr = Formula.Read(expression_len, ris, nBytesAvailable);}</s></s>0  0  0  0  0  0  0  1  2  0  0  0  2  2  0  0  0  2  3  4  0  0  0  0  5  0  0  0  6  0  0  0  2  7  0  0  0  0  0  0  8  0  0  0  2  9  0  0  0  10  0  0  0  11  12  0  8  8  0  0  10  0  0  0  0  6  0  0  0  13  14  0  8  8  0  5  0  0  0  15  0  0  0  0  0  2  16  0  0  0  0  15  0  0  0  2  17  0  0  0  0  0  18  0  0  0  2  17  0  0  0  0  0  19  0  0  0  2  20  0  0  0  21  0  0  0  22  23  0  18  18  2  2  19  19</s>
<s>public virtual int Stem(char[] s, int len){Debug.Assert(s.Length >= len + 1, "this stemmer requires an oversized array of at least 1");len = plural.Apply(s, len);len = unification.Apply(s, len);len = adverb.Apply(s, len);int oldlen;do{oldlen = len;len = augmentative.Apply(s, len);} while (len!= oldlen);oldlen = len;len = noun.Apply(s, len);if (len == oldlen) {len = verb.Apply(s, len);}len = vowel.Apply(s, len);for (int i = 0; i < len; i++){switch (s[i]){case 'á':s[i] = 'a';break;case 'é':case 'ê':s[i] = 'e';break;case 'í':s[i] = 'i';break;case 'ó':s[i] = 'o';break;case 'ú':s[i] = 'u';break;}}return len;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  0  3  4  0  0  0  0  1  5  0  2  0  0  0  0  0  2  18  0  0  6  7  0  1  1  2  2  0  0  2  18  0  0  8  7  0  1  1  2  2  0  0  2  18  0  0  9  7  0  1  1  2  2  0  0  0  10  10  0  0  0  0  10  18  2  0  0  2  18  0  0  11  7  0  1  1  2  2  0  2  10  0  0  10  18  2  0  0  2  18  0  0  12  7  0  1  1  2  2  0  0  2  10  0  0  0  2  18  0  0  13  7  0  1  1  2  2  0  0  2  18  0  0  14  7  0  1  1  2  2  0  0  0  0  15  0  0  0  15  2  0  15  0  0  0  1  0  15  15  0  0  0  0  0  0  0  16  0  17  17  19  0  0  0  0  0  0  0  0  0  0  17  0  18  18  0  0  0  0  0  0  0  0  0  19  0  19  19  20  0  0  0  0  0  0  0  0  18  0  20  20  0  0  0  0  0  0  0  0  0  19  0  21  21  0  0  0  0  22</s>
<s>public bool SameProperties(FontRecord other){returnfield_1_font_height == other.field_1_font_height &&field_2_attributes == other.field_2_attributes &&field_3_color_palette_index == other.field_3_color_palette_index &&field_4_bold_weight == other.field_4_bold_weight &&field_5_base_sub_script == other.field_5_base_sub_script &&field_6_underline == other.field_6_underline &&field_7_family == other.field_7_family &&field_8_charset == other.field_8_charset &&field_9_zero == other.field_9_zero &&field_11_font_name.Equals(other.field_11_font_name);}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  0  0  0  0  0  0  0  3  0  2  4  0  5  0  2  5  0  6  0  2  6  0  7  0  2  7  0  8  0  2  8  0  9  0  2  9  0  10  0  2  10  0  11  0  2  11  0  12  0  2  12  0  0  13  14  0  0  0  2  13</s>
<s>public override String ToFormulaString(){return HSSFErrorConstants.GetText(HSSFErrorConstants.ERROR_REF);}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  2  3  0  0  0  2  4</s>
<s>public virtual StartTextDetectionResponse StartTextDetection(StartTextDetectionRequest request){var options = new InvokeOptions();options.RequestMarshaller = StartTextDetectionRequestMarshaller.Instance;options.ResponseUnmarshaller = StartTextDetectionResponseUnmarshaller.Instance;return Invoke<StartTextDetectionResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public DeleteMessageBatchRequestEntry(string id, string receiptHandle){_id = id;_receiptHandle = receiptHandle;}</s></s>0  0  0  0  0  0  0  0  1  3  1  5  0  0  0  0  2  0  3  0  0  4  0  5</s>
<s>public override TokenStream Create(TokenStream input){return new PatternCaptureGroupTokenFilter(input, preserveOriginal, pattern);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  0  3  0  2  2  4  4  5  5</s>
<s>public SigningCertificate(string userName, string certificateId, string certificateBody, StatusType status){_userName = userName;_certificateId = certificateId;_certificateBody = certificateBody;_status = status;}</s></s>0  0  0  0  0  0  0  0  1  4  1  6  1  8  2  10  0  0  0  0  3  0  4  0  0  5  0  6  0  0  7  0  8  0  0  9  0  10</s>
<s>public DistributionConfig(string callerReference, bool enabled){_callerReference = callerReference;_enabled = enabled;}</s></s>0  0  0  0  0  0  0  0  1  4  2  6  0  0  0  0  3  0  4  0  0  5  0  6</s>
<s>public FastCharStream(TextReader r){input = r;}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  3</s>
<s>public int end(int group_1){ensureMatch();return matchOffsets[(group_1 * 2) + 1];}</s></s>0  0  0  0  0  0  0  0  0  1  0  0  0  2  0  0  0  3  0  0  0  0  0  1  0  0</s>
<s>public override java.util.MapClass.Entry<K, V> next(){return this.nextEntry();}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  3  0  4  5  6  0  0  0  0  0  0  7  0</s>
<s>public virtual NGit.Api.BlameCommand SetTextComparator(RawTextComparator textComparator){this.textComparator = textComparator;return this;}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  4  5  0  0  0  0  0  5  0  5  0  0</s>
<s>public T Pop(){if (size > 0){T result = heap[1]; heap[1] = heap[size]; heap[size] = default(T); size--;DownHeap(); return result;}else{return default(T);}}</s></s>0  0  0  0  0  1  0  0  0  0  2  0  0  0  0  0  0  3  0  0  4  0  0  0  0  0  0  4  0  0  0  0  0  4  0  2  2  0  0  0  4  0  2  2  0  0  0  0  0  2  0  0  5  0  0  3  0  0  0  0</s>
<s>public override string ToString(){return "arc=" + fstArc + " state=" + fsaState;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  2</s>
<s>public static string ShortenRefName(string noteRefName){if (noteRefName.StartsWith(Constants.R_NOTES)){return Sharpen.Runtime.Substring(noteRefName, Constants.R_NOTES.Length);}return noteRefName;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  1  2  0  0  0  3  4  0  0  0  0  0  5  6  7  0  1  1  0  0  0  3  4  8  0  1</s>
<s>public virtual DescribeDomainsResponse DescribeDomains(){return DescribeDomains(new DescribeDomainsRequest());}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  2  0</s>
<s>public int Available(){return _le.Available();}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  0  0</s>
<s>public virtual GetContentModerationResponse GetContentModeration(GetContentModerationRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetContentModerationRequestMarshaller.Instance;options.ResponseUnmarshaller = GetContentModerationResponseUnmarshaller.Instance;return Invoke<GetContentModerationResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public PrintStream(java.io.OutputStream @out) : base(@out){if (@out == null){throw new System.ArgumentNullException();}}</s></s>0  0  0  0  0  0  0  0  1  0  0  0  2  0  0  0  0  2  0  0  0  0  0  3  4  0</s>
<s>public override long RamBytesUsed(){long ramBytesUsed = 0;foreach (TermsReader r in fields.Values){ramBytesUsed += r.dict == null? 0 : r.dict.GetSizeInBytes();}return ramBytesUsed;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  2  3  0  4  5  0  0  0  1  0  0  0  0  3  6  0  0  0  0  0  3  6  7  0  0  1</s>
<s>public virtual GetIntegrationResponse GetIntegration(GetIntegrationRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetIntegrationRequestMarshaller.Instance;options.ResponseUnmarshaller = GetIntegrationResponseUnmarshaller.Instance;return Invoke<GetIntegrationResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override void setVisibility(int v){if (getVisibility()!= v){base.setVisibility(v);if (mIndeterminate){if (v == GONE || v == INVISIBLE){stopAnimation();}else{startAnimation();}}}}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  2  0  1  0  0  0  0  0  0  0  1  1  0  3  0  0  0  0  1  4  0  1  5  0  0  0  6  0  0  0  0  7  0</s>
<s>public override bool Matches(char[] s, int len){if (!base.Matches(s, len)){return false;}for (int i = 0; i < m_exceptions.Length; i++){if (StemmerUtil.EndsWith(s, len, m_exceptions[i])){return false;}}return true;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  0  0  0  0  0  1  1  2  2  0  0  0  0  0  0  0  3  0  0  0  3  0  4  5  0  3  0  0  0  0  6  7  0  1  1  2  2  0  0  4  0  3  3  0  0  0  0  0</s>
<s>public virtual DescribeFleetCapacityResponse DescribeFleetCapacity(DescribeFleetCapacityRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeFleetCapacityRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeFleetCapacityResponseUnmarshaller.Instance;return Invoke<DescribeFleetCapacityResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public UploadPackInternalServerErrorException(Exception why){Sharpen.Extensions.InitCause(this, why);}</s></s>0  0  0  0  0  0  0  0  1  5  0  0  0  0  0  0  2  3  4  0  0  0  5  5</s>
<s>public virtual GetNetworkResponse GetNetwork(GetNetworkRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetNetworkRequestMarshaller.Instance;options.ResponseUnmarshaller = GetNetworkResponseUnmarshaller.Instance;return Invoke<GetNetworkResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual AllocatePrivateVirtualInterfaceResponse AllocatePrivateVirtualInterface(AllocatePrivateVirtualInterfaceRequest request){var options = new InvokeOptions();options.RequestMarshaller = AllocatePrivateVirtualInterfaceRequestMarshaller.Instance;options.ResponseUnmarshaller = AllocatePrivateVirtualInterfaceResponseUnmarshaller.Instance;return Invoke<AllocatePrivateVirtualInterfaceResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual GetDeploymentResponse GetDeployment(GetDeploymentRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetDeploymentRequestMarshaller.Instance;options.ResponseUnmarshaller = GetDeploymentResponseUnmarshaller.Instance;return Invoke<GetDeploymentResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public UpdateRepoAuthorizationRequest(): base("cr", "2016-06-07", "UpdateRepoAuthorization", "cr", "openAPI"){UriPattern = "/repos/[RepoNamespace]/[RepoName]/authorizations/[AuthorizeId]";Method = MethodType.POST;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  2  0  0  3  4  0</s>
<s>public void FoldToASCII(char[] input, int length){if (preserveOriginal){state = CaptureState();}int maxSizeNeeded = 4 * length;if (output.Length < maxSizeNeeded){output = new char[ArrayUtil.Oversize(maxSizeNeeded, RamUsageEstimator.NUM_BYTES_CHAR)];}outputPos = FoldToASCII(input, 0, output, 0, length);}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  3  0  0  0  4  0  0  5  0  0  0  0  0  6  0  0  0  2  0  0  0  7  8  6  0  0  0  7  0  0  0  0  0  0  0  9  10  0  6  6  0  0  11  12  0  0  13  0  0  0  0  1  1  0  0  7  7  0  0  2  2</s>
<s>public bool HasEntry(String name){if (excludes.Contains(name)){return false;}return directory.HasEntry(name);}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  0  3  4  0  2  2  0  0  0  0  0  0  5  0  0  2  2</s>
<s>public virtual void SetLockMessage(string msg){lockMessage = msg;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  2  0  1</s>
<s>public virtual ReflogCommand Reflog(){return new ReflogCommand(repo);}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  2  2</s>
<s>public void Serialize(ILittleEndianOutput out1){out1.WriteShort(FirstRow);out1.WriteShort(LastRow);out1.WriteShort(FirstColumn);out1.WriteShort(LastColumn);}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  0  2  3  0  4  4  0  0  0  2  3  0  5  5  0  0  0  2  3  0  6  6  0  0  0  2  3  0  7  7</s>
<s>public static int Response(HttpURLConnection c){try{return c.GetResponseCode();}catch (ConnectException ce){string host = c.GetURL().GetHost();if ("Connection timed out: connect".Equals(ce.Message)){throw new ConnectException(MessageFormat.Format(JGitText.Get().connectionTimeOut,host));}throw new ConnectException(ce.Message + " " + host);}}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  0  2  3  0  0  0  4  5  0  0  0  0  0  6  0  0  0  0  0  2  7  0  8  0  0  0  0  0  9  0  0  0  5  10  0  0  0  4  0  0  0  0  11  12  0  0  0  0  0  13  14  0  15  6  6  0  0  4  0  0  0  0  0  5  10  0  6</s>
<s>public static void fill(long[] array, long value){{for (int i = 0; i < array.Length; i++){array[i] = value;}}}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  0  0  0  3  0  0  0  3  0  1  4  0  3  0  0  0  0  1  0  3  3  0  2</s>
<s>public override void Serialize(ILittleEndianOutput out1){out1.WriteInt(PositionOfBof);out1.WriteShort(field_2_option_flags);String name = field_5_sheetname;out1.WriteByte(name.Length);out1.WriteByte(field_4_isMultibyteUnicode);if (IsMultibyte){StringUtil.PutUnicodeLE(name, out1);}else{StringUtil.PutCompressedUnicode(name, out1);}}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  0  2  3  0  4  4  0  0  0  2  5  0  6  6  0  0  7  0  8  0  9  0  0  0  2  10  0  0  0  8  11  0  0  0  2  10  0  12  12  0  13  0  0  0  0  14  15  0  8  8  2  2  0  0  0  0  14  16  0  8  8  2  2</s>
<s>public static string GetNonBlankTextOrFail(XmlElement e){string v = GetText(e);if (null!= v)v = v.Trim();if (null == v || 0 == v.Length){throw new ParserException(e.ToString() + " has no text");}return v;}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  3  0  0  4  0  2  2  0  0  0  3  0  0  3  0  0  0  3  5  0  0  0  0  0  3  0  0  0  3  6  0  0  0  7  0  0  0  0  0  2  8  0  0  0  3</s>
<s>public virtual void BuildFieldConfig(FieldConfig fieldConfig){IDictionary<string, float?> fieldBoostMap = this.config.Get(ConfigurationKeys.FIELD_BOOST_MAP);if (fieldBoostMap!= null){float? boost;if (fieldBoostMap.TryGetValue(fieldConfig.Field, out boost) && boost!= null){fieldConfig.Set(ConfigurationKeys.BOOST, boost);}}}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  0  3  0  0  0  0  0  4  0  0  0  0  0  5  6  0  0  0  7  8  0  0  4  0  0  0  0  0  0  9  9  0  0  0  0  4  10  0  0  0  2  11  0  9  0  9  0  0  0  0  0  2  12  0  0  0  7  13  9  9</s>
<s>public virtual PutLifecyclePolicyResponse PutLifecyclePolicy(PutLifecyclePolicyRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutLifecyclePolicyRequestMarshaller.Instance;options.ResponseUnmarshaller = PutLifecyclePolicyResponseUnmarshaller.Instance;return Invoke<PutLifecyclePolicyResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual java.util.SortedSet<E> subSet(E start, E end){return subSet(start, true, end, false);}</s></s>0  0  0  0  0  0  0  0  1  0  2  0  3  4  0  0  3  5  0  3  6  0  0  0  4  0  5  5  0  0  6  6  0  0</s>
<s>public override void SetParams(string @params){base.SetParams(@params);if (@params!= null){int multiplier;if (@params.EndsWith("s", StringComparison.Ordinal)){multiplier = 1;@params = @params.Substring(0, @params.Length - 1);}else if (@params.EndsWith("m", StringComparison.Ordinal)){multiplier = 60;@params = @params.Substring(0, @params.Length - 1);}else if (@params.EndsWith("h", StringComparison.Ordinal)){multiplier = 3600;@params = @params.Substring(0, @params.Length - 1);}else{multiplier = 1;}waitTimeSec = double.Parse(@params, CultureInfo.InvariantCulture) * multiplier;}else{throw new ArgumentException("you must specify the wait time, eg: 10.0s, 4.5m, 2h");}}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  1  1  0  0  1  0  0  0  0  0  2  2  0  0  0  1  3  0  0  0  0  0  4  5  0  0  0  2  0  0  0  0  1  0  0  0  1  6  0  0  0  0  0  0  1  7  0  0  0  0  1  3  0  0  0  0  0  4  5  0  0  0  2  0  0  0  0  1  0  0  0  1  6  0  0  0  0  0  0  1  7  0  0  0  0  1  3  0  0  0  0  0  4  5  0  0  0  2  0  0  0  0  1  0  0  0  1  6  0  0  0  0  0  0  1  7  0  0  0  0  2  0  0  0  0  8  0  0  0  0  0  9  0  1  1  0  0  10  11  2  0  0  0  12  0  0  0</s>
<s>public PutAttributesRequest(string domainName, string itemName, List<ReplaceableAttribute> attributes, UpdateCondition expected){_domainName = domainName;_itemName = itemName;_attributes = attributes;_expected = expected;}</s></s>0  0  0  0  0  0  0  0  1  5  1  7  2  0  3  11  0  0  0  0  4  0  5  0  0  6  0  7  0  0  8  0  9  0  0  10  0  11</s>
<s>public virtual DescribeStreamConsumerResponse DescribeStreamConsumer(DescribeStreamConsumerRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeStreamConsumerRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeStreamConsumerResponseUnmarshaller.Instance;return Invoke<DescribeStreamConsumerResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual void Freeze(){this.frozen = true;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0</s>
<s>public FuzzyLikeThisQueryBuilder(Analyzer analyzer){this.analyzer = analyzer;}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  0  2  0  2</s>
<s>public virtual CopyDBClusterSnapshotResponse CopyDBClusterSnapshot(CopyDBClusterSnapshotRequest request){var options = new InvokeOptions();options.RequestMarshaller = CopyDBClusterSnapshotRequestMarshaller.Instance;options.ResponseUnmarshaller = CopyDBClusterSnapshotResponseUnmarshaller.Instance;return Invoke<CopyDBClusterSnapshotResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public OutputStreamDataOutput(Stream os){this._writer = new BinaryWriter(os);}</s></s>0  0  0  0  0  0  0  0  1  4  0  0  0  0  0  0  2  0  0  3  0  4  4</s>
<s>public virtual string FindPattern(string pat){int k = base.Find(pat);if (k >= 0){return UnpackValues(k);}return "";}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  2  0  0  0  0  3  0  1  1  0  0  2  0  0  0  0  4  0  2  2  0  0</s>
<s>public static int Murmurhash3_x86_32(BytesRef bytes, int seed){return Murmurhash3_x86_32(bytes.Bytes, bytes.Offset, bytes.Length, seed);}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  3  0  0  0  0  0  0  0  2  4  0  0  2  5  0  0  2  6  3  3</s>
<s>public virtual bool IsOverridable(){return overridable;}</s></s>0  0  0  0  0  0  0  0  0  0  1</s>
<s>public virtual UpdateMemberResponse UpdateMember(UpdateMemberRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateMemberRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateMemberResponseUnmarshaller.Instance;return Invoke<UpdateMemberResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual CopyFpgaImageResponse CopyFpgaImage(CopyFpgaImageRequest request){var options = new InvokeOptions();options.RequestMarshaller = CopyFpgaImageRequestMarshaller.Instance;options.ResponseUnmarshaller = CopyFpgaImageResponseUnmarshaller.Instance;return Invoke<CopyFpgaImageResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual void Inform(IResourceLoader loader){try{ OpenNLPOpsFactory.GetPOSTaggerModel(posTaggerModelFile, loader);}catch (IOException e){throw new ArgumentException(e.ToString(), e);}}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  0  3  4  0  5  5  2  2  0  0  6  7  0  0  0  8  0  0  0  0  7  9  0  7  7</s>
<s>public CellRangeAddress(int firstRow, int lastRow, int firstCol, int lastCol): base(firstRow, lastRow, firstCol, lastCol){if (lastRow < firstRow || lastCol < firstCol)throw new ArgumentException("lastRow < firstRow || lastCol < firstCol");}</s></s>0  0  0  0  0  0  0  0  1  2  1  3  1  4  1  5  0  0  2  3  4  5  0  0  0  0  0  3  2  0  5  4  0  0  6  0  0  0</s>
<s>public override bool Equals(ATNConfig a, ATNConfig b){if (a == b){return true;}if (a == null || b == null){return false;}return a.state.stateNumber == b.state.stateNumber && a.context.Equals(b.context);}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  1  3  0  0  0  2  3  0  0  0  0  0  0  2  0  0  3  0  0  0  0  0  0  0  0  0  2  4  5  0  0  3  4  5  0  0  0  2  6  0  0  0  0  3  6</s>
<s>public virtual NGit.Api.PushCommand SetPushTags(){refSpecs.AddItem(NGit.Transport.Transport.REFSPEC_TAGS);return this;}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  0  0  0  4  5  0  0  0  0  0  0  6  6  7  0  0</s>
<s>public virtual CreateEvaluationResponse CreateEvaluation(CreateEvaluationRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateEvaluationRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateEvaluationResponseUnmarshaller.Instance;return Invoke<CreateEvaluationResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual DescribeOrderableDBInstanceOptionsResponse DescribeOrderableDBInstanceOptions(DescribeOrderableDBInstanceOptionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeOrderableDBInstanceOptionsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeOrderableDBInstanceOptionsResponseUnmarshaller.Instance;return Invoke<DescribeOrderableDBInstanceOptionsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public long GetPosition(){return (long)currentBlockIndex * outerInstance.blockSize + currentBlockUpto;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  2  3  4</s>
<s>public override TokenStream Create(TokenStream input){return new FrenchLightStemFilter(input);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  0  3  0  2  2</s>
<s>public virtual AssignPrivateIpAddressesResponse AssignPrivateIpAddresses(AssignPrivateIpAddressesRequest request){var options = new InvokeOptions();options.RequestMarshaller = AssignPrivateIpAddressesRequestMarshaller.Instance;options.ResponseUnmarshaller = AssignPrivateIpAddressesResponseUnmarshaller.Instance;return Invoke<AssignPrivateIpAddressesResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override bool SetExecute(FilePath f, bool canExec){return false;}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  3  0  0  0</s>
<s>public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval lookup_value, ValueEval table_array,ValueEval col_index, ValueEval range_lookup){try{ValueEval lookupValue = OperandResolver.GetSingleValue(lookup_value, srcRowIndex, srcColumnIndex);TwoDEval tableArray = LookupUtils.ResolveTableArrayArg(table_array);bool isRangeLookup = LookupUtils.ResolveRangeLookupArg(range_lookup, srcRowIndex, srcColumnIndex);int rowIndex = LookupUtils.LookupIndexOfValue(lookupValue, LookupUtils.CreateColumnVector(tableArray, 0), isRangeLookup);int colIndex = LookupUtils.ResolveRowOrColIndexArg(col_index, srcRowIndex, srcColumnIndex);ValueVector resultCol = CreateResultColumnVector(tableArray, colIndex);return resultCol.GetItem(rowIndex);}catch (EvaluationException e){return e.GetErrorEval();}}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  3  0  0  4  0  0  5  0  0  6  0  0  7  0  0  0  0  0  0  0  8  0  0  0  9  10  0  4  4  2  2  3  3  0  0  11  0  12  0  0  0  13  14  0  5  5  0  0  0  0  15  0  0  0  13  16  0  7  7  2  2  3  3  0  0  0  0  17  0  0  0  13  18  0  8  8  0  0  0  13  19  0  12  12  0  0  15  15  0  0  0  0  20  0  0  0  13  21  0  6  6  2  2  3  3  0  0  22  0  23  0  0  24  0  12  12  20  20  0  0  0  23  25  0  17  17  0  0  26  27  0  0  0  0  27  28  0</s>
<s>public virtual CreateGameSessionResponse CreateGameSession(CreateGameSessionRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateGameSessionRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateGameSessionResponseUnmarshaller.Instance;return Invoke<CreateGameSessionResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public RowRecord GetRow(int rowIndex){if (rowIndex < 0 || rowIndex > 65535){throw new ArgumentException("The row number must be between 0 and 65535");}return (RowRecord)_rowRecords[rowIndex];}</s></s>0  0  0  0  0  1  0  0  0  2  0  0  0  0  2  0  0  2  0  0  0  0  3  0  0  0  0  0  0  0  4  0  2  2</s>
<s>public virtual DescribeClientPropertiesResponse DescribeClientProperties(DescribeClientPropertiesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeClientPropertiesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeClientPropertiesResponseUnmarshaller.Instance;return Invoke<DescribeClientPropertiesResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public Builder(CompositeReader reader){this.reader = reader;}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  0  2  0  2</s>
<s>public override void mark(int readlimit){lock (this){@in.mark(readlimit);}}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  2  0  0  1  1</s>
<s>public virtual void print(int inum){print(inum.ToString());}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  1  2  0</s>
<s>public static NGit.ObjectId FromRaw(int[] @is){return FromRaw(@is, 0);}</s></s>0  0  0  0  0  0  0  1  2  0  0  0  0  0  3  0  0  0  2  0  3  3  0  0</s>
<s>public override string ToString(){return Slice.ToString() + ":" + DocsEnum;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  2</s>
<s>public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(Mode);}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  0  2  3  0  4  4</s>
<s>public override int size(){return this._enclosing.size();}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0</s>
<s>public static int hashCode(object o){return (o == null)? 0 : o.GetHashCode();}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  0  1  2  0</s>
<s>public override java.nio.ByteBuffer putFloat(int index, float value){throw new java.nio.ReadOnlyBufferException();}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  0  4  0  0  5  0  0  0  0  0  0  1  6  0</s>
<s>public virtual ListJournalS3ExportsForLedgerResponse ListJournalS3ExportsForLedger(ListJournalS3ExportsForLedgerRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListJournalS3ExportsForLedgerRequestMarshaller.Instance;options.ResponseUnmarshaller = ListJournalS3ExportsForLedgerResponseUnmarshaller.Instance;return Invoke<ListJournalS3ExportsForLedgerResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual DeleteMessageBatchResponse DeleteMessageBatch(DeleteMessageBatchRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteMessageBatchRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteMessageBatchResponseUnmarshaller.Instance;return Invoke<DeleteMessageBatchResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override void Write(ILittleEndianOutput out1){out1.WriteByte(Sid + PtgClass);WriteCoordinates(out1);}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  0  2  3  0  0  0  4  5  0  0  6  0  2  2</s>
<s>public FSTCompletionBuilder(int buckets, IBytesRefSorter sorter, int shareMaxTailLength){if (buckets < 1 || buckets > 255){throw new System.ArgumentException("Buckets must be >= 1 and <= 255: " + buckets);}if (sorter == null){throw new System.ArgumentException("BytesRefSorter must not be null.");}this.sorter = sorter;this.buckets = buckets;this.shareMaxTailLength = shareMaxTailLength;}</s></s>0  0  0  0  0  0  0  0  1  3  2  6  1  7  0  0  0  0  0  3  0  0  3  0  0  0  0  0  4  5  0  0  0  0  3  0  0  6  0  0  0  0  0  4  5  0  0  0  0  0  0  0  6  0  6  0  0  0  0  3  0  3  0  0  0  0  7  0  7</s>
<s>public virtual void IncRef(){refCount.IncrementAndGet();}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  2  0</s>
<s>public override bool Supports(params CredentialItem[] items){foreach (CredentialItem i in items){if (i is CredentialItem.Username){continue;}else{if (i is CredentialItem.Password){continue;}else{return false;}}}return true;}</s></s>0  0  0  0  0  0  0  0  0  1  0  2  0  0  1  3  2  0  0  0  3  0  0  1  4  0  0  0  0  0  3  0  0  1  5  0  0  0  0  0  0  0</s>
<s>public DeleteVpnConnectionRequest(string vpnConnectionId){_vpnConnectionId = vpnConnectionId;}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  3</s>
<s>public ValueEval Evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex){if (args.Length!= 4){return ErrorEval.VALUE_INVALID;}return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2], args[3]);}</s></s>0  0  0  0  0  1  0  0  0  0  0  2  0  0  3  0  0  4  0  0  0  0  2  5  0  0  0  0  6  7  0  0  1  0  3  3  4  4  0  0  2  0  0  0  0  0  2  0  0  0  0  0  2  0  0  0  0  0  2  0  0  0</s>
<s>public virtual void print(double d){print(d.ToString());}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  1  2  0</s>
<s>public virtual UpdateUserProfileResponse UpdateUserProfile(UpdateUserProfileRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateUserProfileRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateUserProfileResponseUnmarshaller.Instance;return Invoke<UpdateUserProfileResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override TreeFilter Clone(){TreeFilter[] s = new TreeFilter[subfilters.Length];for (int i = 0; i < s.Length; i++){s[i] = subfilters[i].Clone();}return new AndTreeFilter.List(s);}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  2  0  0  0  0  0  0  3  4  0  0  0  0  5  0  0  0  5  0  2  4  0  5  0  0  0  0  2  0  5  5  0  0  0  0  3  0  5  5  1  0  0  0  0  6  7  0  2  2</s>
<s>public GetFederationTokenRequest(string name){_name = name;}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  3</s>
<s>public static ICell TranslateUnicodeValues(ICell cell){String s = cell.RichStringCellValue.String;bool foundUnicode = false;String lowerCaseStr = s.ToLower();for (int i = 0; i < unicodeMappings.Length; i++){UnicodeMapping entry = unicodeMappings[i];String key = entry.entityName;if (lowerCaseStr.IndexOf(key, StringComparison.Ordinal)!= -1){s = s.Replace(key, entry.resolvedValue);foundUnicode = true;}}if (foundUnicode){cell.SetCellValue(new HSSFRichTextString(s));}return cell;}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  0  3  0  4  0  0  0  2  5  3  0  0  0  0  6  0  0  0  0  3  0  7  0  0  0  4  8  0  0  0  0  0  9  0  0  0  9  0  10  11  0  9  0  0  0  12  0  13  0  0  10  0  9  9  0  0  3  0  14  0  0  13  15  0  0  0  0  7  16  0  14  14  0  0  17  18  0  0  0  0  0  4  0  0  0  4  19  0  14  14  0  0  13  20  0  0  6  0  0  0  6  0  0  0  0  2  21  0  0  0  22  0  4  4  0  2</s>
<s>public virtual CreateChangeSetResponse CreateChangeSet(CreateChangeSetRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateChangeSetRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateChangeSetResponseUnmarshaller.Instance;return Invoke<CreateChangeSetResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>protected internal SubmoduleStatusCommand(Repository repo) : base(repo){paths = new AList<string>();}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  2  0  3  0  0  0  4  0  0  0  0</s>
<s>public virtual int GetResultStart(){return currentSource.regionList.resultStart;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  2  3</s>
<s>public static BigInteger Round(BigInteger bi, int nBits){if (nBits < 1){return bi;}return bi+(HALF_BITS[nBits]);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  3  0  0  0  3  0  0  0  2  0  0  2  0  0  4  0  3  3</s>
<s>public static DateTime Round(DateTime date, Resolution resolution){return new DateTime(Round(date.Ticks / TimeSpan.TicksPerMillisecond, resolution));}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  3  4  0  0  0  0  0  0  0  1  0  0  0  0  2  5  0  6  7  4  4</s>
<s>public static int CompareArrayByPrefix(char[] shortArray, int shortIndex,char[] longArray, int longIndex){if (shortArray == null)return 0;else if (longArray == null)return (shortIndex < shortArray.Length)? 1 : 0;int si = shortIndex, li = longIndex;while (si < shortArray.Length && li < longArray.Length&& shortArray[si] == longArray[li]){si++;li++;}if (si == shortArray.Length){return 0;}else{if (li == longArray.Length)return 1;else return (shortArray[si] > longArray[li])? 1 : -1;}}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  0  3  0  0  4  0  0  0  1  0  0  0  0  0  3  0  0  0  0  0  2  0  1  5  0  0  0  0  0  0  6  0  2  0  7  0  4  0  0  0  0  6  0  1  5  0  7  0  3  5  0  0  1  0  6  6  0  3  0  7  7  0  0  0  6  0  0  7  0  0  6  0  1  5  0  0  0  0  0  0  7  0  3  5  0  0  0  0  0  0  0  1  0  6  6  0  3  0  7  7  0  0  0</s>
<s>public virtual AttachInternetGatewayResponse AttachInternetGateway(AttachInternetGatewayRequest request){var options = new InvokeOptions();options.RequestMarshaller = AttachInternetGatewayRequestMarshaller.Instance;options.ResponseUnmarshaller = AttachInternetGatewayResponseUnmarshaller.Instance;return Invoke<AttachInternetGatewayResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual bool containsValue(object value){lock (this){if (value == null){throw new System.ArgumentNullException();}java.util.Hashtable.HashtableEntry<K, V>[] tab = table;int len = tab.Length;{for (int i = 0; i < len; i++){{for (java.util.Hashtable.HashtableEntry<K, V> e = tab[i]; e!= null; e = e.next){if (value.Equals(e.value)){return true;}}}}}return false;}}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  0  0  0  2  3  0  0  0  0  0  0  0  4  5  6  0  7  0  8  9  0  0  10  0  11  0  0  0  0  12  0  0  10  13  0  0  0  0  0  14  0  0  0  14  12  0  14  0  0  0  0  0  0  0  4  5  6  7  8  0  0  9  15  0  0  10  0  14  14  0  15  0  0  15  0  0  15  16  0  0  0  0  1  17  0  0  0  15  1  0  0  0  0  0</s>
<s>public override String ToFormulaString(String[] operands){StringBuilder buffer = new StringBuilder();buffer.Append(operands[0]);buffer.Append("<=");buffer.Append(operands[1]);return buffer.ToString();}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  2  0  0  0  3  0  4  0  0  3  0  0  0  0  4  5  0  0  0  2  0  0  0  0  0  0  4  5  0  0  0  0  0  0  4  5  0  0  0  2  0  0  0  0  0  0  4  6  0</s>
<s>public override void write(string str){write(str.ToCharArray());}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  1  2  0</s>
<s>public Sort(SortField field){SetSort(field);}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  3  3</s>
<s>public virtual DescribeEventCategoriesResponse DescribeEventCategories(DescribeEventCategoriesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeEventCategoriesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeEventCategoriesResponseUnmarshaller.Instance;return Invoke<DescribeEventCategoriesResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual UpdateDeviceResponse UpdateDevice(UpdateDeviceRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateDeviceRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateDeviceResponseUnmarshaller.Instance;return Invoke<UpdateDeviceResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual CreateWorkerBlockResponse CreateWorkerBlock(CreateWorkerBlockRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateWorkerBlockRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateWorkerBlockResponseUnmarshaller.Instance;return Invoke<CreateWorkerBlockResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual void reset(){lock (this){throw new System.IO.IOException();}}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  2  3  0</s>
<s>public void SetReader(TextReader input){if (input == null){throw new System.ArgumentNullException("value", "input must not be null");}else if (this.m_input!= ILLEGAL_STATE_READER){throw new InvalidOperationException("TokenStream contract violation: Close() call missing");}this.inputPending = input;Debug.Assert(SetReaderTestPoint());}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  2  0  0  0  0  0  3  4  0  0  0  0  0  0  0  0  0  5  6  0  0  0  7  0  0  0  0  0  0  0  8  0  2  0  0  0  9  10  0  0  0  11  0</s>
<s>public virtual GetUsagePlanKeysResponse GetUsagePlanKeys(GetUsagePlanKeysRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetUsagePlanKeysRequestMarshaller.Instance;options.ResponseUnmarshaller = GetUsagePlanKeysResponseUnmarshaller.Instance;return Invoke<GetUsagePlanKeysResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override string ToString(){StringBuilder sb = new StringBuilder();sb.Append("subInfos=(");foreach (SubInfo si in subInfos)sb.Append(si.ToString());sb.Append(")/").Append(Number.ToString(totalBoost)).Append('(').Append(startOffset).Append(',').Append(endOffset).Append(')');return sb.ToString();}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  0  2  0  0  1  0  0  0  0  2  3  0  0  0  0  4  5  6  0  0  0  2  3  0  0  0  0  5  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  2  3  0  0  0  3  0  0  0  0  7  0  0  8  8  3  0  0  0  3  0  9  9  3  0  0  0  3  0  10  10  3  0  0  0  0  0  0  2  0  0</s>
<s>public override TokenStream Create(TokenStream input){return new LimitTokenPositionFilter(input, maxTokenPosition, consumeAllTokens);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  0  3  0  2  2  4  4  5  5</s>
<s>public virtual DescribeFleetUtilizationResponse DescribeFleetUtilization(DescribeFleetUtilizationRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeFleetUtilizationRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeFleetUtilizationResponseUnmarshaller.Instance;return Invoke<DescribeFleetUtilizationResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual void Inform(IResourceLoader loader){Stream stream = null;try{if (dictFile!= null) {dictionary = GetWordSet(loader, dictFile, false);}stream = loader.OpenResource(hypFile);var xmlEncoding = string.IsNullOrEmpty(encoding)? Encoding.UTF8 : Encoding.GetEncoding(encoding);hyphenator = HyphenationCompoundWordTokenFilter.GetHyphenationTree(stream, xmlEncoding);}finally{IOUtils.DisposeWhileHandlingException(stream);}}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  3  0  4  0  0  0  0  0  0  5  0  0  0  0  6  0  0  7  0  2  2  5  5  0  0  0  0  4  0  0  0  2  8  0  9  9  0  0  0  0  10  0  0  0  0  0  11  0  12  12  0  13  14  0  0  13  15  0  12  12  0  0  16  0  0  0  17  18  0  4  4  10  10  0  0  0  0  0  19  20  0  4  4</s>
<s>public virtual DeclineInvitationsResponse DeclineInvitations(DeclineInvitationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeclineInvitationsRequestMarshaller.Instance;options.ResponseUnmarshaller = DeclineInvitationsResponseUnmarshaller.Instance;return Invoke<DeclineInvitationsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual DescribeAutoScalingGroupsResponse DescribeAutoScalingGroups(){return DescribeAutoScalingGroups(new DescribeAutoScalingGroupsRequest());}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  2  0</s>
<s>public override string ToString(){return string.Format("pushMode({0})", mode);}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  2  2</s>
<s>public virtual NGit.Api.CreateBranchCommand SetStartPoint(string startPoint){CheckCallable();this.startPoint = startPoint;this.startCommit = null;return this;}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  0  4  0  0  0  5  0  0  0  0  0  4  0  4  0  0  0  0  6  0  0  0  0</s>
<s>public virtual StopDBInstanceResponse StopDBInstance(StopDBInstanceRequest request){var options = new InvokeOptions();options.RequestMarshaller = StopDBInstanceRequestMarshaller.Instance;options.ResponseUnmarshaller = StopDBInstanceResponseUnmarshaller.Instance;return Invoke<StopDBInstanceResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public SuggestWordQueue(int size, IComparer<SuggestWord> comparer): base(size){this.comparer = comparer;}</s></s>0  0  0  0  0  0  0  0  1  3  2  0  0  0  3  0  0  0  0  0  0  4  0  4</s>
<s>public LBCookieStickinessPolicy(string policyName, long cookieExpirationPeriod){_policyName = policyName;_cookieExpirationPeriod = cookieExpirationPeriod;}</s></s>0  0  0  0  0  0  0  0  1  4  2  6  0  0  0  0  3  0  4  0  0  5  0  6</s>
<s>public SheetRangeEvaluator(int firstSheetIndex, int lastSheetIndex, SheetRefEvaluator[] sheetEvaluators){if (firstSheetIndex < 0){throw new ArgumentException("Invalid firstSheetIndex: " + firstSheetIndex + ".");}if (lastSheetIndex < firstSheetIndex){throw new ArgumentException("Invalid lastSheetIndex: " + lastSheetIndex + " for firstSheetIndex: " + firstSheetIndex + ".");}_firstSheetIndex = firstSheetIndex;_lastSheetIndex = lastSheetIndex;_sheetEvaluators = sheetEvaluators;}</s></s>0  0  0  0  0  0  0  0  1  3  1  5  2  0  0  0  0  0  3  0  0  0  0  4  0  0  0  0  0  3  0  0  0  5  3  0  0  0  4  0  0  0  0  0  0  0  5  0  3  0  0  0  6  0  3  0  0  7  0  5  0  0  8  0  9</s>
<s>public RevokeTokenRequest(): base("OnsMqtt", "2019-12-11", "RevokeToken", "onsmqtt", "openAPI"){Method = MethodType.POST;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  3  0</s>
<s>public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1){AreaEval aeRange;double result;try{ValueEval ve = OperandResolver.GetSingleValue(arg0, srcRowIndex, srcColumnIndex);result = OperandResolver.CoerceValueToDouble(ve);if (Double.IsNaN(result) || Double.IsInfinity(result)){throw new EvaluationException(ErrorEval.NUM_ERROR);}aeRange = ConvertRangeArg(arg1);}catch (EvaluationException e){return e.GetErrorEval();}return eval(srcRowIndex, srcColumnIndex, result, aeRange, true);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  3  0  0  4  0  0  5  0  0  0  6  7  7  0  0  0  8  8  0  0  0  0  0  0  9  0  0  0  10  11  0  4  4  2  2  3  3  0  0  8  0  0  0  10  12  0  9  9  0  0  0  0  13  14  0  8  8  0  0  13  15  0  8  8  0  0  0  16  0  0  0  17  18  0  0  7  0  0  19  0  5  5  0  0  16  20  0  0  0  0  20  21  0  0  0  22  0  2  2  3  3  8  8  7  7  0  0</s>
<s>public override String ToFormulaString(){return "";}</s></s>0  0  0  0  0  0  1  0  0  0  0</s>
<s>public sbyte readByte() throws IOException{if (bufferPos == bufferSize){refill();}Debug.Assert(bufferPos == buffer.position(), "bufferPos=" + bufferPos + " vs buffer.position()=" + buffer.position());bufferPos++;return buffer.get();}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  2  0  0  0  3  0  0  0  0  4  5  0  0  0  1  0  0  6  7  0  0  0  0  0  0  1  0  0  0  6  7  0  0  0  1  0  0  0  6  8  0</s>
<s>public virtual ListTargetsByRuleResponse ListTargetsByRule(ListTargetsByRuleRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTargetsByRuleRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTargetsByRuleResponseUnmarshaller.Instance;return Invoke<ListTargetsByRuleResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual DisassociateQualificationFromWorkerResponse DisassociateQualificationFromWorker(DisassociateQualificationFromWorkerRequest request){var options = new InvokeOptions();options.RequestMarshaller = DisassociateQualificationFromWorkerRequestMarshaller.Instance;options.ResponseUnmarshaller = DisassociateQualificationFromWorkerResponseUnmarshaller.Instance;return Invoke<DisassociateQualificationFromWorkerResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override bool Equals(object obj){if (this == obj){return true;}if (obj == null){return false;}if (this.GetType()!= obj.GetType()){return false;}CompiledAutomaton other = (CompiledAutomaton)obj;if (Type!= other.Type){return false;}if (Type == AUTOMATON_TYPE.SINGLE || Type == AUTOMATON_TYPE.PREFIX){if (!Term.Equals(other.Term)){return false;}}else if (Type == AUTOMATON_TYPE.NORMAL){if (!RunAutomaton.Equals(other.RunAutomaton)){return false;}}return true;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  2  0  0  0  1  2  0  0  0  0  0  0  3  0  4  0  0  3  1  0  0  5  0  4  5  0  0  0  0  0  0  5  0  6  7  0  5  0  6  8  0  0  0  0  0  9  0  0  0  0  4  9  0  0  0  0  0  5  0  6  10  0  0  0  0  0  11  0  0  0  0  4  11  0  0  0  0  0</s>
<s>public static CharFilterFactory ForName(string name, IDictionary<string, string> args){return loader.NewInstance(name, args);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  3  0  0  0  4  0  0  0  0  5  6  0  2  2  4  4</s>
<s>public override string ToString(){string[] units = new string[] { "bytes", "KiB", "MiB", "GiB" };long sz = GetIndexSize();int u = 0;while (1024 <= sz && u < units.Length - 1){int rem = (int)(sz % 1024);sz /= 1024;if (rem!= 0){sz++;}u++;}return "DeltaIndex[" + sz + " " + units[u] + "]";}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  2  0  0  3  0  0  0  0  0  4  0  0  0  0  0  0  2  0  4  0  0  1  5  0  0  0  0  0  0  6  0  0  0  0  0  2  0  0  0  2  0  0  0  0  6  0  0  0  0  2  0  0  4  0  0  0  0  0  0  2  0  0  1  0  4  4  0</s>
<s>public CompositeReaderContext Build(){return (CompositeReaderContext)Build(null, reader, 0, 0);}</s></s>0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  0  2  2  0  0  0  0</s>
<s>public virtual void mark(int readLimit){throw new System.IO.IOException();}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  2  3  4  0</s>
<s>public virtual void Collect(int doc){long time = clock.Get();if (timeout < time){if (greedy){collector.Collect(doc);}throw new TimeExceededException(timeout - t0, time - t0, docBase + doc);}collector.Collect(doc);}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  2  0  0  0  3  4  0  0  0  5  2  0  0  6  0  0  0  0  7  0  0  1  1  0  0  8  0  0  0  5  9  0  0  2  9  0  0  10  1  0  0  0  7  0  0  1  1</s>
<s>public LocalFile(FilePath directory, int inCoreLimit) : base(inCoreLimit){this.directory = directory;}</s></s>0  0  0  0  0  0  0  0  1  4  2  3  0  0  3  0  0  0  0  0  0  4  0  4</s>
<s>public override E remove(int index){object[] a = array;int s = _size;if (index >= s){throwIndexOutOfBoundsException(index, s);}E result = (E)a[index];System.Array.Copy(a, index + 1, a, index, --s - index);a[s] = null;_size = s;modCount++;return result;}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  0  0  0  0  0  3  0  4  0  0  0  0  5  0  6  0  0  2  5  0  0  0  7  0  2  2  5  5  0  0  0  0  8  0  0  0  0  3  0  2  2  0  0  0  0  9  10  11  0  3  3  0  0  2  0  3  3  2  2  0  0  0  5  2  0  0  0  3  0  5  5  0  0  0  0  6  0  5  0  0  12  0  8</s>
<s>public virtual RequestUploadCredentialsResponse RequestUploadCredentials(RequestUploadCredentialsRequest request){var options = new InvokeOptions();options.RequestMarshaller = RequestUploadCredentialsRequestMarshaller.Instance;options.ResponseUnmarshaller = RequestUploadCredentialsResponseUnmarshaller.Instance;return Invoke<RequestUploadCredentialsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual void CopyTo(OutputStream @out){if (IsLarge()){ObjectStream @in = OpenStream();try{long sz = @in.GetSize();byte[] tmp = new byte[8192];long copied = 0;while (copied < sz){int n = @in.Read(tmp);if (n < 0){throw new EOFException();}@out.Write(tmp, 0, n);copied += n;}if (0 <= @in.Read()){throw new EOFException();}}finally{@in.Close();}}else{@out.Write(GetCachedBytes());}}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  3  0  0  0  0  4  0  5  0  0  6  0  0  0  0  0  0  0  7  0  0  0  5  8  0  0  0  0  0  0  0  9  0  0  0  0  0  0  0  0  0  0  10  0  0  0  0  10  7  0  0  0  0  0  11  0  0  0  5  12  0  9  9  0  0  11  0  0  0  0  13  0  0  0  0  2  14  0  9  9  0  0  11  11  0  0  10  0  11  0  0  0  0  0  5  12  0  0  0  0  13  0  0  0  0  0  0  5  15  0  0  0  0  0  2  14  0  0  0  16  0</s>
<s>public override V remove(object key){if (key == null){return removeNullKey();}int hash = secondaryHash(key.GetHashCode());java.util.HashMap.HashMapEntry<K, V>[] tab = table;int index = hash & (tab.Length - 1);{java.util.HashMap.HashMapEntry<K, V> e = tab[index];java.util.HashMap.HashMapEntry<K, V> prev = null;for (; e!= null; prev = e, e = e.next){if (e.hash == hash && key.Equals(e.key)){if (prev == null){tab[index] = e.next;}else{prev.next = e.next;}modCount++;_size--;postRemove(e);return e.value;}}}return default(V);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  0  2  0  0  0  0  3  0  0  0  0  0  4  0  0  5  0  0  0  0  2  6  0  0  0  0  0  0  0  7  8  9  0  10  0  11  0  0  0  12  0  13  0  0  0  0  14  0  0  4  0  0  0  12  15  0  0  0  0  0  0  0  7  8  9  0  10  0  11  0  0  16  0  0  12  0  14  14  0  0  0  0  0  7  8  9  0  10  0  11  0  0  17  0  0  0  0  16  0  0  17  0  16  0  16  0  0  16  18  0  0  0  0  0  16  4  4  0  0  2  19  0  0  0  16  2  0  0  0  17  0  0  0  0  0  12  0  14  14  0  0  16  18  0  0  0  0  17  18  0  0  16  18  0  0  20  0  0  21  0  0  22  0  16  16  0  0  16  23  0  0  0</s>
<s>public override RevFilter Negate(){return a;}</s></s>0  0  0  0  0  0  1  0  0  0  2</s>
<s>public virtual DescribeVpcsResponse DescribeVpcs(DescribeVpcsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeVpcsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeVpcsResponseUnmarshaller.Instance;return Invoke<DescribeVpcsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual UpdateGameSessionQueueResponse UpdateGameSessionQueue(UpdateGameSessionQueueRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateGameSessionQueueRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateGameSessionQueueResponseUnmarshaller.Instance;return Invoke<UpdateGameSessionQueueResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public String GetTitle(){return title;}</s></s>0  0  0  0  0  1  0  0  0  2</s>
<s>public void SetNewHeads(IList<Head> newHeads){if (this.newHeads!= null){throw new InvalidOperationException(JGitText.Get().propertyIsAlreadyNonNull);}this.newHeads = newHeads;}</s></s>0  0  0  0  0  0  0  0  0  1  0  2  3  0  0  0  0  0  3  0  0  0  0  4  0  0  0  0  0  5  6  0  7  0  0  0  0  3  0  3</s>
<s>public virtual ObjectId GetExpectedOldObjectId(){return expectedOldObjectId;}</s></s>0  0  0  0  0  0  1  0  0  0  2</s>
<s>public virtual GetRecordsResponse GetRecords(GetRecordsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetRecordsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetRecordsResponseUnmarshaller.Instance;return Invoke<GetRecordsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public Deleted3DPxg(int externalWorkbookNumber, String sheetName){this.externalWorkbookNumber = externalWorkbookNumber;this.sheetName = sheetName;}</s></s>0  0  0  0  0  0  0  0  1  3  2  4  0  0  0  0  0  0  3  0  3  0  0  0  0  4  0  4</s>
<s>public void Execute(Lexer lexer){lexer.Skip();}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  0  2  3  0</s>
<s>public virtual DescribeScheduledInstancesResponse DescribeScheduledInstances(DescribeScheduledInstancesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeScheduledInstancesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeScheduledInstancesResponseUnmarshaller.Instance;return Invoke<DescribeScheduledInstancesResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public MultiFields(Fields[] subs, ReaderSlice[] subSlices){this.subs = subs;this.subSlices = subSlices;}</s></s>0  0  0  0  0  0  1  0  2  2  3  0  4  4  0  0  0  0  0  0  2  0  2  0  4  0  4  0</s>
<s>public int PeekNextSid(){if (!HasNext()){return -1;}return ((Record)_list[_nextIndex]).Sid;}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  2  0  3  0  4  4  5</s>
<s>public virtual ConfigureAgentResponse ConfigureAgent(ConfigureAgentRequest request){var options = new InvokeOptions();options.RequestMarshaller = ConfigureAgentRequestMarshaller.Instance;options.ResponseUnmarshaller = ConfigureAgentResponseUnmarshaller.Instance;return Invoke<ConfigureAgentResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual GetStreamingDistributionResponse GetStreamingDistribution(GetStreamingDistributionRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetStreamingDistributionRequestMarshaller.Instance;options.ResponseUnmarshaller = GetStreamingDistributionResponseUnmarshaller.Instance;return Invoke<GetStreamingDistributionResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual ListTrialComponentsResponse ListTrialComponents(ListTrialComponentsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTrialComponentsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTrialComponentsResponseUnmarshaller.Instance;return Invoke<ListTrialComponentsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override java.nio.ByteBuffer putShort(int index, short value){throw new System.NotImplementedException();}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  0  4  0  0  5  0  0  0  0  6  7  0</s>
<s>public int CompareNormalised(NormalisedDecimal other){int cmp = _relativeDecimalExponent - other._relativeDecimalExponent;if (cmp!= 0){return cmp;}if (_wholePart > other._wholePart){return 1;}if (_wholePart < other._wholePart){return -1;}return _fractionalPart - other._fractionalPart;}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  3  0  0  4  0  2  4  0  0  3  0  0  0  3  0  0  5  0  2  5  0  0  0  0  0  5  0  2  5  0  0  0  0  0  0  6  0  2  6</s>
<s>public override TokenStream Create(TokenStream input){return new JapaneseKatakanaStemFilter(input, minimumLength);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  0  3  0  2  2  4  4</s>
<s>public virtual EnableAvailabilityZonesForLoadBalancerResponse EnableAvailabilityZonesForLoadBalancer(EnableAvailabilityZonesForLoadBalancerRequest request){var options = new InvokeOptions();options.RequestMarshaller = EnableAvailabilityZonesForLoadBalancerRequestMarshaller.Instance;options.ResponseUnmarshaller = EnableAvailabilityZonesForLoadBalancerResponseUnmarshaller.Instance;return Invoke<EnableAvailabilityZonesForLoadBalancerResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual UpdateEnvironmentResponse UpdateEnvironment(UpdateEnvironmentRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateEnvironmentRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateEnvironmentResponseUnmarshaller.Instance;return Invoke<UpdateEnvironmentResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual ListTagsForDomainResponse ListTagsForDomain(ListTagsForDomainRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTagsForDomainRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTagsForDomainResponseUnmarshaller.Instance;return Invoke<ListTagsForDomainResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public static double Log(double @base, double x){return Math.Log(x) / Math.Log(@base);}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  0  0  3  0  0  2  2  0  0  3  0  0  1  1</s>
<s>public virtual void writeBoolean(bool val){throw new System.NotImplementedException();}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  2  3  0</s>
<s>public override bool Equals(object other){if (!(other is java.nio.ByteBuffer)){return false;}java.nio.ByteBuffer otherBuffer = (java.nio.ByteBuffer)other;if (remaining()!= otherBuffer.remaining()){return false;}int myPosition = _position;int otherPosition = otherBuffer._position;bool equalSoFar = true;while (equalSoFar && (myPosition < _limit)){equalSoFar = get(myPosition++) == otherBuffer.get(otherPosition++);}return equalSoFar;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  2  3  4  0  0  0  0  0  0  0  2  3  4  0  5  0  0  0  0  2  3  4  1  0  0  0  6  0  0  0  5  6  0  0  0  0  0  0  0  0  7  0  8  0  0  0  0  9  0  0  5  8  0  0  0  0  10  0  0  0  0  10  0  0  7  11  0  0  0  10  0  0  0  12  0  0  0  7  0  0  5  12  0  0  0  9  0  10</s>
<s>public virtual DescribeVirtualGatewaysResponse DescribeVirtualGateways(){return DescribeVirtualGateways(new DescribeVirtualGatewaysRequest());}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  2  0</s>
<s>public virtual FieldConfig GetFieldConfig(string fieldName){FieldConfig fieldConfig = new FieldConfig(StringUtils.ToString(fieldName));foreach (IFieldConfigListener listener in this.listeners){listener.BuildFieldConfig(fieldConfig);}return fieldConfig;}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  0  0  0  3  0  0  0  0  0  0  0  4  5  0  2  2  0  6  7  0  0  8  0  0  0  0  7  9  0  3  3  0  3</s>
<s>public void SetProperty(IRow row, int column){ICell cell = CellUtil.GetCell(row, column);CellUtil.SetCellStyleProperty(cell, _workbook, _propertyName, _propertyValue);}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  3  0  0  0  4  0  5  0  0  0  6  7  0  2  2  3  3  0  0  0  6  8  0  5  5  9  9  10  10  11  11</s>
<s>public virtual RebootInstancesResponse RebootInstances(RebootInstancesRequest request){var options = new InvokeOptions();options.RequestMarshaller = RebootInstancesRequestMarshaller.Instance;options.ResponseUnmarshaller = RebootInstancesResponseUnmarshaller.Instance;return Invoke<RebootInstancesResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public Predicate(int ruleIndex, int predIndex, bool isCtxDependent){this.ruleIndex = ruleIndex;this.predIndex = predIndex;this.isCtxDependent = isCtxDependent;}</s></s>0  0  0  0  0  0  0  0  1  3  1  4  2  5  0  0  0  0  0  0  3  0  3  0  0  0  0  4  0  4  0  0  0  0  5  0  5</s>
<s>public void FillPolygon(int[] xPoints, int[] yPoints,int nPoints){int right = FindBiggest(xPoints);int bottom = FindBiggest(yPoints);int left = FindSmallest(xPoints);int top = FindSmallest(yPoints);HSSFPolygon shape = escherGroup.CreatePolygon(new HSSFChildAnchor(left, top, right, bottom));shape.SetPolygonDrawArea(right - left, bottom - top);shape.SetPoints(AddToAll(xPoints, -left), AddToAll(yPoints, -top));shape.SetLineStyleColor(foreground.R, foreground.G, foreground.B);shape.SetFillColor(foreground.R, foreground.G, foreground.B);}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  2  0  0  3  0  0  0  0  0  4  0  0  5  0  1  1  0  0  0  0  6  0  0  5  0  2  2  0  0  0  0  7  0  0  8  0  1  1  0  0  0  0  9  0  0  8  0  2  2  0  0  10  0  11  0  0  0  12  13  0  0  0  14  0  7  7  9  9  4  4  6  6  0  0  0  11  15  0  0  0  4  7  0  0  6  9  0  0  0  11  16  0  0  0  17  0  1  1  0  0  7  0  0  17  0  2  2  0  0  9  0  0  0  11  18  0  0  0  19  20  0  0  19  21  0  0  19  22  0  0  0  11  23  0  0  0  19  20  0  0  19  21  0  0  19  22</s>
<s>public ListEventsRequest(): base("CloudPhoto", "2017-07-11", "ListEvents", "cloudphoto", "openAPI"){Protocol = ProtocolType.HTTPS;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  3  0</s>
<s>public virtual ListIAMPolicyAssignmentsResponse ListIAMPolicyAssignments(ListIAMPolicyAssignmentsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListIAMPolicyAssignmentsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListIAMPolicyAssignmentsResponseUnmarshaller.Instance;return Invoke<ListIAMPolicyAssignmentsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public CountingOutputStream(OutputStream @out){this.@out = @out;}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  0  2  0  2</s>
<s>public override void SeekExact(BytesRef target, TermState otherState){if (!target.Equals(term)){state.CopyFrom(otherState);term = BytesRef.DeepCopyOf(target);seekPending = true;}}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  3  4  0  0  0  0  0  2  5  0  6  6  0  0  0  0  7  8  0  4  4  0  0  6  0  0  0  1  9  0  2  2  0  0  10  0  0</s>
<s>public void seek(long pos) throws IOException{if (pos!= FilePointer){long alignedPos = pos & ALIGN_NOT_MASK;filePos = alignedPos - bufferSize;int delta = (int)(pos - alignedPos);if (delta!= 0){refill();buffer.position(delta);bufferPos = delta;}else{bufferPos = bufferSize;}}}</s></s>0  0  0  0  0  0  0  0  0  1  0  0  0  0  1  2  0  0  0  0  0  3  0  0  1  4  0  0  5  0  0  3  6  0  0  0  0  7  0  0  0  0  0  1  3  0  0  7  0  0  0  0  8  0  0  0  0  9  10  0  7  7  0  0  11  0  7  0  0  0  11  0  6</s>
<s>public override void clear(){removeAllElements();}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  0</s>
<s>public QueryCustomerByPhoneRequest(): base("xspace", "2017-07-20", "QueryCustomerByPhone"){UriPattern = "/customerbyphone";Method = MethodType.POST;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  2  0  0  3  4  0</s>
<s>public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0){return this.Evaluate(srcRowIndex, srcColumnIndex, arg0, null);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  3  0  0  4  0  0  0  0  0  1  0  2  2  3  3  4  4  0  0</s>
<s>public virtual ListDashboardVersionsResponse ListDashboardVersions(ListDashboardVersionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListDashboardVersionsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListDashboardVersionsResponseUnmarshaller.Instance;return Invoke<ListDashboardVersionsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override java.nio.IntBuffer put(int c){if (_position == _limit){throw new java.nio.BufferOverflowException();}backingArray[offset + _position++] = c;return this;}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  0  4  0  0  0  5  6  0  0  0  0  0  0  1  7  0  0  0  0  8  0  0  0  9  0  5  0  4  0  0</s>
<s>public virtual DeleteHostedZoneResponse DeleteHostedZone(DeleteHostedZoneRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteHostedZoneRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteHostedZoneResponseUnmarshaller.Instance;return Invoke<DeleteHostedZoneResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual CreateReceiptRuleResponse CreateReceiptRule(CreateReceiptRuleRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateReceiptRuleRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateReceiptRuleResponseUnmarshaller.Instance;return Invoke<CreateReceiptRuleResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual RefUpdate.Result Rename(){try{result = DoRename();return result;}catch (IOException err){result = RefUpdate.Result.IO_FAILURE;throw;}}</s></s>0  0  0  0  0  0  0  1  2  0  0  0  0  0  0  3  0  0  4  0  0  3  0  0  5  6  0  0  0  3  0  0  0  0  1  7  0</s>
<s>public virtual DescribeDBInstancesResponse DescribeDBInstances(){return DescribeDBInstances(new DescribeDBInstancesRequest());}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  2  0</s>
<s>public override string ToString(){return ruleName + ":" + bypassTokenType;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  2</s>
<s>public override string ToQueryString(IEscapeQuerySyntax escaper){return "[DELETEDCHILD]";}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0</s>
<s>public virtual CreateAccountResponse CreateAccount(CreateAccountRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateAccountRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateAccountResponseUnmarshaller.Instance;return Invoke<CreateAccountResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override java.util.MapClass.Entry<K, V> next(){return this.nextEntry();}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  3  0  4  5  6  0  0  0  0  0  0  7  0</s>
<s>public BaseRef(RefEval re){_refEval = re;_areaEval = null;_firstRowIndex = re.Row;_firstColumnIndex = re.Column;_height = 1;_width = 1;}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  3  0  0  4  0  0  0  0  5  0  0  3  6  0  0  7  0  0  3  8  0  0  9  0  0  0  0  10  0  0</s>
<s>public override void Decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations){for (int i = 0; i < iterations; ++i){long block = blocks[blocksOffset++];for (int shift = 62; shift >= 0; shift -= 2){values[valuesOffset++] = ((long)((ulong)block >> shift)) & 3;}}}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  0  3  0  0  4  0  0  5  0  0  0  0  0  6  0  0  0  6  5  0  6  0  0  0  0  0  7  0  0  1  0  0  0  2  0  0  0  0  8  0  0  0  8  0  0  8  0  0  0  0  0  0  3  0  0  0  4  0  0  0  0  0  0  0  0  0  7  8  0</s>
<s>public virtual void UnrollRecursionContexts(ParserRuleContext _parentctx){_precedenceStack.RemoveAt(_precedenceStack.Count - 1);_ctx.Stop = _input.LT(-1);ParserRuleContext retctx = _ctx;if (_parseListeners!= null){while (_ctx!= _parentctx){TriggerExitRuleEvent();_ctx = (ParserRuleContext)_ctx.Parent;}}else{_ctx = _parentctx;}retctx.Parent = _parentctx;if (_buildParseTrees && _parentctx!= null){_parentctx.AddChild(retctx);}}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  0  3  4  0  0  0  0  3  5  0  0  0  0  6  7  0  0  0  8  9  0  0  0  0  0  0  1  0  10  0  6  0  0  11  0  0  0  0  6  2  0  0  0  12  0  0  0  6  0  0  1  0  6  13  0  0  0  6  0  2  0  0  0  10  13  0  2  0  0  14  0  2  0  0  0  0  0  2  15  0  10  10</s>
<s>public CancelBundleTaskRequest(string bundleId){_bundleId = bundleId;}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  3</s>
<s>public virtual void Add(CharsRef input, CharsRef output, bool includeOrig){Add(input, CountWords(input), output, CountWords(output), includeOrig);}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  1  3  0  0  4  0  0  0  0  0  2  2  0  0  5  0  2  2  3  3  0  0  5  0  3  3  4  4</s>
<s>public virtual SetIdentityDkimEnabledResponse SetIdentityDkimEnabled(SetIdentityDkimEnabledRequest request){var options = new InvokeOptions();options.RequestMarshaller = SetIdentityDkimEnabledRequestMarshaller.Instance;options.ResponseUnmarshaller = SetIdentityDkimEnabledResponseUnmarshaller.Instance;return Invoke<SetIdentityDkimEnabledResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual GetResolverEndpointResponse GetResolverEndpoint(GetResolverEndpointRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetResolverEndpointRequestMarshaller.Instance;options.ResponseUnmarshaller = GetResolverEndpointResponseUnmarshaller.Instance;return Invoke<GetResolverEndpointResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public void setText(string value){@string = value;start = offset = 0;end = value.Length;}</s></s>0  0  0  0  0  0  0  0  0  1  0  0  0  2  0  1  0  0  3  0  0  4  0  0  0  0  5  0  0  1  6</s>
<s>public override string ToString(){return ToString(0);}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  0</s>
<s>public void AdjustIndex(int offset){_firstSheetIndex += offset;_lastSheetIndex += offset;}</s></s>0  0  0  0  0  0  0  0  0  1  0  0  0  2  0  1  0  0  3  0  1</s>
<s>public GalicianStemFilterFactory(IDictionary<string, string> args): base(args){if (args.Count > 0){throw new System.ArgumentException("Unknown parameters: " + args);}}</s></s>0  0  0  0  0  0  0  0  1  0  2  2  0  0  0  3  0  0  0  0  0  3  4  0  0  0  0  0  5  6  0  0  0  0  3</s>
<s>public virtual ListRepositoryAssociationsResponse ListRepositoryAssociations(ListRepositoryAssociationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListRepositoryAssociationsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListRepositoryAssociationsResponseUnmarshaller.Instance;return Invoke<ListRepositoryAssociationsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override void SetParams(string @params){base.SetParams(@params);maxNumSegments = (int)double.Parse(@params, CultureInfo.InvariantCulture);}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  1  1  0  0  2  0  0  0  0  0  0  3  0  1  1  0  0  4  5</s>
<s>public override char getChar(){return (char)getShort();}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  1  0</s>
<s>public override void Next(int delta){if (delta == 1){prevPtr = currPtr;currPtr = nextPtr;if (!Eof){ParseEntry();}return;}int end = raw.Length;int ptr = nextPtr;while (--delta > 0 && ptr!= end){prevPtr = ptr;while (raw[ptr]!= 0){ptr++;}ptr += Constants.OBJECT_ID_LENGTH + 1;}if (delta!= 0){throw Sharpen.Extensions.CreateIndexOutOfRangeException(delta);}currPtr = ptr;if (!Eof){ParseEntry();}}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  2  0  3  0  0  3  0  4  0  0  5  0  0  0  6  0  0  0  0  0  0  7  0  0  8  9  0  0  0  0  10  0  4  0  0  0  0  1  0  0  10  7  0  0  0  2  0  10  0  0  0  8  0  10  10  0  0  0  0  10  0  0  10  0  0  0  11  12  0  0  0  1  0  0  0  0  0  0  13  14  15  0  1  1  0  0  3  0  10  0  0  5  0  0  0  6  0</s>
<s>public virtual ReceiveCommand.Type GetType(){return type;}</s></s>0  0  0  0  0  0  0  1  2  0  0  0  3</s>
<s>public override java.nio.CharBuffer duplicate(){return copy(this, _mark);}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  0  0  4  0  0  0  5  5</s>
<s>public NGramFilterFactory(IDictionary<string, string> args): base(args){minGramSize = GetInt32(args, "minGramSize", NGramTokenFilter.DEFAULT_MIN_NGRAM_SIZE);maxGramSize = GetInt32(args, "maxGramSize", NGramTokenFilter.DEFAULT_MAX_NGRAM_SIZE);if (args.Count > 0){throw new System.ArgumentException("Unknown parameters: " + args);}}</s></s>0  0  0  0  0  0  0  0  1  0  2  2  0  0  3  0  4  0  0  5  0  3  3  0  0  0  0  6  7  0  0  0  8  0  0  5  0  3  3  0  0  0  0  6  9  0  0  0  0  3  10  0  0  0  0  0  11  12  0  0  0  0  3  0</s>
<s>public virtual AddRoleToDBClusterResponse AddRoleToDBCluster(AddRoleToDBClusterRequest request){var options = new InvokeOptions();options.RequestMarshaller = AddRoleToDBClusterRequestMarshaller.Instance;options.ResponseUnmarshaller = AddRoleToDBClusterResponseUnmarshaller.Instance;return Invoke<AddRoleToDBClusterResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual NGit.Blame.BlameGenerator SetTextComparator(RawTextComparator comparator){textComparator = comparator;return this;}</s></s>0  0  0  0  0  0  0  0  1  2  3  0  0  4  5  0  0  0  6  0  5  0  0</s>
<s>public PatternCaptureGroupFilterFactory(IDictionary<string, string> args): base(args){pattern = GetPattern(args, "pattern");preserveOriginal = args.TryGetValue("preserve_original", out string value)? bool.Parse(value) : true;}</s></s>0  0  0  0  0  0  0  0  1  0  2  2  0  0  3  0  4  0  0  5  0  3  3  0  0  0  0  0  6  0  0  0  0  3  7  0  0  0  0  0  2  8  0  0  0  9  0  8  8  0  0</s>
<s>public virtual CreateObjectResponse CreateObject(CreateObjectRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateObjectRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateObjectResponseUnmarshaller.Instance;return Invoke<CreateObjectResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override string getActions(){return null;}</s></s>0  0  0  0  0  0  0  0  0  0  0</s>
<s>public override void onChanged(){if (this._enclosing.isShowing()){this._enclosing.show();}}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  0  0  1  3  0</s>
<s>public virtual CreateResourceGroupResponse CreateResourceGroup(CreateResourceGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateResourceGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateResourceGroupResponseUnmarshaller.Instance;return Invoke<CreateResourceGroupResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public static RevFilter Has(RevFlag a){RevFlagSet s = new RevFlagSet();s.AddItem(a);return new RevFlagFilter.HasAll(s);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  4  0  5  0  0  4  0  0  0  0  5  6  0  3  3  0  0  0  7  8  0  5  5</s>
<s>public override int size(){return this._enclosing._size;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  1  2</s>
<s>public override void Write(ILittleEndianOutput out1){out1.WriteByte(sid + PtgClass);out1.WriteShort(field_1_index_extern_sheet);out1.WriteInt(unused1);}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  0  2  3  0  0  0  4  5  0  0  0  2  6  0  7  7  0  0  0  2  8  0  9  9</s>
<s>public override string ToString(){return this.GetType().Name + "@" + m_directory + " lockFactory=" + LockFactory;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  2  0  3  0  4</s>
<s>public ValueEval Evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex){switch (args.Length){case 3:return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);case 4:return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2], args[3]);}return ErrorEval.VALUE_INVALID;}</s></s>0  0  0  0  0  1  0  0  0  0  0  2  0  0  3  0  0  4  0  0  0  2  5  0  0  0  0  0  0  1  0  3  3  4  4  0  0  2  0  0  0  0  0  2  0  0  0  0  0  2  0  0  0  0  0  0  0  0  1  0  3  3  4  4  0  0  2  0  0  0  0  0  2  0  0  0  0  0  2  0  0  0  0  0  2  0  0  0  0  0  6  7</s>
<s>public virtual CancelDataRepositoryTaskResponse CancelDataRepositoryTask(CancelDataRepositoryTaskRequest request){var options = new InvokeOptions();options.RequestMarshaller = CancelDataRepositoryTaskRequestMarshaller.Instance;options.ResponseUnmarshaller = CancelDataRepositoryTaskResponseUnmarshaller.Instance;return Invoke<CancelDataRepositoryTaskResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public DateFormatTokenizer(string format){this.format = format;}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  0  2  0  2</s>
<s>public static int GetBiasedExponent(long rawBits){return (int)((rawBits & EXPONENT_MASK) >> EXPONENT_SHIFT);}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  1  2  3</s>
<s>public override string ToString(){return "IB " + m_distribution.ToString() + "-" + m_lambda.ToString() + m_normalization.ToString();}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  2  0  0  0  0  3  0  0</s>
<s>public string GetName(){return name;}</s></s>0  0  0  0  0  0  0  0  0  1</s>
<s>public virtual bool InContext(string context){return false;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0</s>
<s>public override string ToString(){string desc;if (Directory!= null){desc = Directory.GetPath();}else{desc = GetType().Name + "-" + Runtime.IdentityHashCode(this);}return "Repository[" + desc + "]";}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  1  0  0  2  0  0  0  0  1  0  0  0  2  3  0  0  0  0  1  0  0  0  0  0  4  0  5  0  0  0  6  7  0  0  0  0  0  0  0  1  0</s>
<s>public int Serialize(int offset, byte[] data){LittleEndian.PutInt(data, offset, field_13_border_styles1);offset += 4;LittleEndian.PutInt(data, offset, field_14_border_styles2);offset += 4;return 8;}</s></s>0  0  0  0  0  0  0  0  0  1  0  0  0  0  2  0  0  0  0  3  4  0  2  2  1  1  5  5  0  0  1  0  0  0  0  0  3  4  0  2  2  1  1  6  6  0  0  1  0  0  0  0</s>
<s>public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations){for (int j = 0; j < iterations; ++j){var block = blocks[blocksOffset++];values[valuesOffset++] = ((int)((uint)block >> 7)) & 1;values[valuesOffset++] = ((int)((uint)block >> 6)) & 1;values[valuesOffset++] = ((int)((uint)block >> 5)) & 1;values[valuesOffset++] = ((int)((uint)block >> 4)) & 1;values[valuesOffset++] = ((int)((uint)block >> 3)) & 1;values[valuesOffset++] = ((int)((uint)block >> 2)) & 1;values[valuesOffset++] = ((int)((uint)block >> 1)) & 1;values[valuesOffset++] = block & 1;}}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  0  3  0  0  4  0  0  5  0  0  0  0  0  6  0  0  0  6  5  0  6  0  0  0  0  0  7  0  0  1  0  0  0  2  0  0  0  3  0  0  0  4  0  0  0  0  0  0  0  0  0  7  0  0  0  0  0  3  0  0  0  4  0  0  0  0  0  0  0  0  0  7  0  0  0  0  0  3  0  0  0  4  0  0  0  0  0  0  0  0  0  7  0  0  0  0  0  3  0  0  0  4  0  0  0  0  0  0  0  0  0  7  0  0  0  0  0  3  0  0  0  4  0  0  0  0  0  0  0  0  0  7  0  0  0  0  0  3  0  0  0  4  0  0  0  0  0  0  0  0  0  7  0  0  0  0  0  3  0  0  0  4  0  0  0  0  0  0  0  0  0  7  0  0  0  0  0  3  0  0  0  4  0  0  7  0</s>
<s>public PipedWriter(java.io.PipedReader destination) : base(destination){throw new System.NotImplementedException();}</s></s>0  0  0  0  0  0  0  0  1  0  0  0  2  0  0  0  0  0  3  4  0</s>
<s>public override string Dequote(byte[] @in, int ip, int ie){bool inquote = false;byte[] r = new byte[ie - ip];int rPtr = 0;while (ip < ie){byte b = @in[ip++];switch (b){case (byte)('\''):{inquote =!inquote;continue;goto case (byte)('\\');}case (byte)('\\'):{if (inquote || ip == ie){r[rPtr++] = b;}else{r[rPtr++] = @in[ip++];}continue;goto default;}default:{r[rPtr++] = b;continue;break;}}}return RawParseUtils.Decode(Constants.CHARSET, r, 0, rPtr);}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  3  0  0  0  0  0  4  0  0  0  0  0  0  0  0  5  0  0  0  0  0  0  3  2  0  0  0  0  6  0  0  0  0  2  3  0  0  0  0  0  7  0  0  1  0  0  0  2  0  7  0  0  0  0  0  0  0  0  0  0  0  4  0  0  4  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  4  0  2  3  0  0  0  0  5  0  0  0  6  0  7  0  0  0  0  5  0  0  0  6  0  0  1  0  0  0  2  0  0  0  0  0  0  0  0  5  0  0  0  6  0  7  0  0  0  0  0  8  9  0  0  0  10  11  5  5  0  0  6  6</s>
<s>public virtual CheckoutResult.Status GetStatus(){return myStatus;}</s></s>0  0  0  0  0  0  0  1  2  0  0  0  3</s>
<s>public DeltaRecord(RecordInputStream in1){field_1_max_change = in1.ReadDouble();}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  0  0  3  4  0</s>
<s>public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(Count);}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  0  0  2  3  0  4  4</s>
<s>public ListPartsRequest(string vaultName, string uploadId){_vaultName = vaultName;_uploadId = uploadId;}</s></s>0  0  0  0  0  0  0  0  1  3  1  5  0  0  0  0  2  0  3  0  0  4  0  5</s>
<s>public override void Set(int index, long value){int o = (int)((uint)index >> 2);int b = index & 3;int shift = b << 4;blocks[o] = (blocks[o] & ~(65535L << shift)) | (value << shift);}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  0  0  3  0  0  0  0  0  0  0  1  0  0  0  0  0  4  0  0  1  0  0  0  0  0  5  0  0  4  0  0  0  0  6  0  3  3  0  0  0  0  0  6  0  3  3  0  0  0  0  5  0  0  2  5</s>
<s>public virtual void SetRunInBackground(int deltaPri){runInBackground = true;this.deltaPri = deltaPri;}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  2  0  0  0  0  0  0  1  0  1</s>
<s>public TeeInputStream(InputStream src, OutputStream dst){this.src = src;this.dst = dst;}</s></s>0  0  0  0  0  0  0  0  1  3  2  4  0  0  0  0  0  0  3  0  3  0  0  0  0  4  0  4</s>
<s>public void AddChild(Property property){String name = property.Name;if (_children_names.Contains(name)){throw new IOException("Duplicate name \"" + name + "\"");}_children_names.Add(name);_children.Add(property);}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  3  0  4  0  0  2  5  0  0  0  6  7  0  4  4  0  0  0  8  0  0  0  0  0  0  4  0  0  0  0  0  6  9  0  4  4  0  0  0  10  9  0  2  2</s>
<s>public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0){int result;if (arg0 is AreaEval){result = ((AreaEval)arg0).Width;}else if (arg0 is RefEval){result = 1;}else{ return ErrorEval.VALUE_INVALID;}return new NumberEval(result);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  3  0  0  4  0  0  0  0  5  5  0  0  4  6  6  0  0  0  5  0  0  0  0  6  4  7  0  0  4  8  8  0  0  0  5  0  0  0  0  0  9  10  0  0  11  0  5  5</s>
<s>public virtual ListModelsResponse ListModels(ListModelsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListModelsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListModelsResponseUnmarshaller.Instance;return Invoke<ListModelsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public ExtensionQuery(Classic.QueryParser topLevelParser, string field, string rawQueryString){this.Field = field;this.RawQueryString = rawQueryString;this.TopLevelParser = topLevelParser;}</s></s>0  0  0  0  0  0  0  0  1  0  2  4  2  6  0  0  0  0  0  0  3  0  4  0  0  0  0  5  0  6  0  0  0  0  7  0  8</s>
<s>public override string ToString(){return resourceDescription;}</s></s>0  0  0  0  0  0  0  0  0  0  1</s>
<s>public virtual GetDeploymentInstanceResponse GetDeploymentInstance(GetDeploymentInstanceRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetDeploymentInstanceRequestMarshaller.Instance;options.ResponseUnmarshaller = GetDeploymentInstanceResponseUnmarshaller.Instance;return Invoke<GetDeploymentInstanceResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public MappingCharFilterFactory(IDictionary<string, string> args) : base(args){mapping = Get(args, "mapping");if (args.Count > 0){throw new System.ArgumentException("Unknown parameters: " + args);}}</s></s>0  0  0  0  0  0  0  0  1  0  2  2  0  0  3  0  4  0  0  5  0  3  3  0  0  0  0  0  0  3  6  0  0  0  0  0  7  8  0  0  0  0  3  0</s>
<s>public virtual bool PromptPassphrase(string msg){CredentialItem.StringType v = NewPrompt(msg);if (provider.Get(uri, v)){passphrase = v.GetValue();return true;}else{passphrase = null;return false;}}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  2  3  0  4  0  0  5  0  1  1  0  0  0  6  7  0  8  8  4  4  0  0  0  9  0  0  0  4  10  0  0  0  0  0  0  9  0  0  0  0</s>
<s>public virtual DescribeReservedDBInstancesResponse DescribeReservedDBInstances(){return DescribeReservedDBInstances(new DescribeReservedDBInstancesRequest());}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  2  0</s>
<s>public virtual UnsubscribeFromDatasetResponse UnsubscribeFromDataset(UnsubscribeFromDatasetRequest request){var options = new InvokeOptions();options.RequestMarshaller = UnsubscribeFromDatasetRequestMarshaller.Instance;options.ResponseUnmarshaller = UnsubscribeFromDatasetResponseUnmarshaller.Instance;return Invoke<UnsubscribeFromDatasetResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override int available(){if (buf == null){throw new System.IO.IOException();}return buf.Length - pos + @in.available();}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  2  3  4  0  0  0  0  0  1  5  6  0  0  7  0  0</s>
<s>public override V remove(object key){return this.isInBounds(key)? this._enclosing.remove(key) : default(V);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  0  0  0  0  3  0  2  2  0  0  0  0  4  1  0  2  2  0  0</s>
<s>public void InsertSST(){sst = new SSTRecord();records.Add(records.Count- 1, CreateExtendedSST());records.Add(records.Count - 2, sst);}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  0  3  4  0  0  0  0  3  5  0  0  0  6  0  0  0  0  3  4  0  0  0  0  3  5  0  1  1</s>
<s>public virtual AddApplicationCloudWatchLoggingOptionResponse AddApplicationCloudWatchLoggingOption(AddApplicationCloudWatchLoggingOptionRequest request){var options = new InvokeOptions();options.RequestMarshaller = AddApplicationCloudWatchLoggingOptionRequestMarshaller.Instance;options.ResponseUnmarshaller = AddApplicationCloudWatchLoggingOptionResponseUnmarshaller.Instance;return Invoke<AddApplicationCloudWatchLoggingOptionResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual ListCampaignsResponse ListCampaigns(ListCampaignsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListCampaignsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListCampaignsResponseUnmarshaller.Instance;return Invoke<ListCampaignsResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public void Execute(Lexer lexer){lexer.More();}</s></s>0  0  0  0  0  0  0  0  1  2  0  0  0  0  2  3  0</s>
<s>public SetFaceCoverRequest(): base("CloudPhoto", "2017-07-11", "SetFaceCover", "cloudphoto", "openAPI"){Protocol = ProtocolType.HTTPS;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  3  0</s>
<s>public virtual GetInstanceAccessResponse GetInstanceAccess(GetInstanceAccessRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetInstanceAccessRequestMarshaller.Instance;options.ResponseUnmarshaller = GetInstanceAccessResponseUnmarshaller.Instance;return Invoke<GetInstanceAccessResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override void Clear(){value = null;}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  0  0</s>
<s>public virtual GetFederationTokenResponse GetFederationToken(GetFederationTokenRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetFederationTokenRequestMarshaller.Instance;options.ResponseUnmarshaller = GetFederationTokenResponseUnmarshaller.Instance;return Invoke<GetFederationTokenResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override int First(){currentSentence = 0;text.SetIndex(text.BeginIndex);return Current;}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  2  3  0  0  0  2  4  0  5</s>
<s>public virtual QueryPhraseMap GetFieldTermMap(string fieldName, string term){QueryPhraseMap rootMap = GetRootMap(fieldName);if (rootMap == null) return null;rootMap.subMap.TryGetValue(term, out QueryPhraseMap result);return result;}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  3  0  0  0  0  0  4  0  0  5  0  2  2  0  0  4  0  0  0  0  0  0  0  4  6  7  0  3  3  0  0  0  8  0  8</s>
<s>public override bool contains(object o){if (!(o is java.util.MapClass.Entry<K, V>)){return false;}java.util.MapClass.Entry<object, object> e = (java.util.MapClass.Entry<object, object>)o;return this._enclosing.containsMapping(e.getKey(), e.getValue());}</s></s>0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  0  2  3  4  0  5  0  6  7  0  0  0  0  0  0  0  0  2  3  4  0  5  0  0  0  0  8  0  0  0  0  0  2  3  4  0  5  0  0  0  1  0  0  0  0  0  9  10  0  0  0  0  8  11  0  0  0  0  8  12  0</s>
<s>public virtual DeleteLexiconResponse DeleteLexicon(DeleteLexiconRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteLexiconRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteLexiconResponseUnmarshaller.Instance;return Invoke<DeleteLexiconResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual DomainMetadataResponse DomainMetadata(DomainMetadataRequest request){var options = new InvokeOptions();options.RequestMarshaller = DomainMetadataRequestMarshaller.Instance;options.ResponseUnmarshaller = DomainMetadataResponseUnmarshaller.Instance;return Invoke<DomainMetadataResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public RevFlag GetReinterestingFlag(){return REINTERESTING;}</s></s>0  0  0  0  0  1  0  0  0  2</s>
<s>public static void advise(FileDescriptor fd, long offset, long len, int advise) throws IOException{int code = posix_fadvise(fd, offset, len, advise);if (code!= 0){throw new Exception("posix_fadvise failed code=" + code);}}</s></s>0  0  0  0  0  0  0  0  0  1  2  0  0  3  0  0  4  0  0  0  0  0  0  0  0  0  5  0  0  6  0  2  2  3  3  4  4  0  0  0  0  5  0  0  0  0  7  0  0  0  0  5</s>
<s>public virtual DeleteSchemaResponse DeleteSchema(DeleteSchemaRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteSchemaRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteSchemaResponseUnmarshaller.Instance;return Invoke<DeleteSchemaResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual CreateBatchInferenceJobResponse CreateBatchInferenceJob(CreateBatchInferenceJobRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateBatchInferenceJobRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateBatchInferenceJobResponseUnmarshaller.Instance;return Invoke<CreateBatchInferenceJobResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public BitField(int mask){this._mask = mask;int num = 0;int num2 = mask;if (num2!= 0){while ((num2 & 1) == 0){num++;num2 = num2 >> 1;}}this._shift_count = num;}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  0  0  2  0  3  0  0  1  0  4  0  0  0  0  1  0  5  0  3  0  0  5  0  0  0  0  0  0  5  0  0  0  0  0  4  0  0  5  0  0  5  0  0  0  0  0  6  0  4</s>
<s>public virtual bool Failed(){return failingPaths.Count > 0;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  2  0</s>
<s>public override string ToString(){StringBuilder b = new StringBuilder();for (int i = 0; i < len; i++){if (i > 0){b.Append(' ');}b.Append(bytes[i].Value.ToBinaryString());}return b.ToString();}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  0  2  0  0  1  0  0  0  0  0  3  0  0  0  3  4  0  3  0  0  0  3  0  0  0  0  0  2  5  0  0  0  0  0  0  2  5  0  0  0  0  0  0  6  0  3  3  7  8  0  0  0  0  2  0  0</s>
<s>public virtual void remove(){if (this._enclosing.modCount!= this.expectedModCount){throw new java.util.ConcurrentModificationException();}if (this.lastReturned == null){throw new System.InvalidOperationException();}this._enclosing.remove(this.lastReturned.key);this.lastReturned = null;this.expectedModCount = this._enclosing.modCount;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  2  0  0  3  0  0  0  0  0  4  5  6  0  0  0  0  0  7  0  0  0  0  0  8  9  0  0  0  0  0  0  1  0  0  0  0  0  0  7  10  0  0  0  0  7  0  0  0  0  0  0  3  0  0  0  0  1  2</s>
<s>public override bool ShouldBeRecursive(){return path.ShouldBeRecursive() || ANY_DIFF.ShouldBeRecursive();}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  2  0  0</s>
<s>public DeleteQueueRequest(string queueUrl){_queueUrl = queueUrl;}</s></s>0  0  0  0  0  0  0  0  1  3  0  0  0  0  2  0  3</s>
<s>public ExternalName GetExternalName(int externSheetIndex, int externNameIndex){String nameName = linkTable.ResolveNameXText(externSheetIndex, externNameIndex, this);if (nameName == null){return null;}int ix = linkTable.ResolveNameXIx(externSheetIndex, externNameIndex);return new ExternalName(nameName, externNameIndex, ix);}</s></s>0  0  0  0  0  1  0  0  0  2  0  0  3  0  0  0  4  0  5  0  0  0  6  7  0  2  2  3  3  0  0  0  0  5  0  0  0  0  0  0  0  0  8  0  0  0  6  9  0  2  2  3  3  0  0  0  0  5  5  3  3  8  8</s>
<s>public virtual RegisterUserResponse RegisterUser(RegisterUserRequest request){var options = new InvokeOptions();options.RequestMarshaller = RegisterUserRequestMarshaller.Instance;options.ResponseUnmarshaller = RegisterUserResponseUnmarshaller.Instance;return Invoke<RegisterUserResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations){for (int j = 0; j < iterations; ++j){values[valuesOffset++] = blocks[blocksOffset++] & 0xFF;}}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  0  3  0  0  4  0  0  5  0  0  0  0  0  6  0  0  0  6  5  0  6  0  0  0  0  3  0  0  0  4  0  0  0  1  0  0  0  2  0</s>
<s>public ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0){return doFixed(arg0, new NumberEval(2), BoolEval.FALSE, srcRowIndex, srcColumnIndex);}</s></s>0  0  0  0  0  1  0  0  0  2  0  0  3  0  0  4  0  0  0  5  0  4  4  0  0  6  0  0  0  0  0  7  8  2  2  3  3</s>
<s>public sealed override object array(){return protectedArray();}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0</s>
<s>public int ReadUByte(){int ch;try{ch = in1.ReadByte();}catch (IOException e){throw new RuntimeException(e);}CheckEOF(ch);return ch;}</s></s>0  0  0  0  0  0  0  0  0  0  0  1  1  0  0  0  0  1  0  0  0  2  3  0  0  0  4  5  0  0  0  6  0  5  5  0  0  7  0  1  1  0  1</s>
<s>public static AttrPtg CreateSkip(int dist){return new AttrPtg(optiSkip.Set(0), dist, null, -1);}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  0  0  0  0  0  0  3  4  0  0  0  2  2  0  0  0  0  0</s>
<s>public virtual DescribeUserHierarchyGroupResponse DescribeUserHierarchyGroup(DescribeUserHierarchyGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeUserHierarchyGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeUserHierarchyGroupResponseUnmarshaller.Instance;return Invoke<DescribeUserHierarchyGroupResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public User(string path, string userName, string userId, string arn, DateTime createDate){_path = path;_userName = userName;_userId = userId;_arn = arn;_createDate = createDate;}</s></s>0  0  0  0  0  0  0  0  1  4  1  6  1  8  1  10  2  12  0  0  0  0  3  0  4  0  0  5  0  6  0  0  7  0  8  0  0  9  0  10  0  0  11  0  12</s>
<s>public override TokenStream Create(TokenStream input){try{NLPLemmatizerOp lemmatizerOp = OpenNLPOpsFactory.GetLemmatizer(dictionaryFile, lemmatizerModelFile);return new OpenNLPLemmatizerFilter(input, lemmatizerOp);}catch (IOException e){throw new Exception(e.ToString(), e);}}</s></s>0  0  0  0  0  0  1  0  0  0  2  0  0  0  0  0  3  0  4  0  0  0  5  6  0  7  7  8  8  0  0  9  0  2  2  4  4  0  0  10  11  0  0  0  12  0  0  0  0  11  13  0  11  11</s>
<s>public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations){for (int i = 0; i < iterations; ++i){long byte0 = blocks[blocksOffset++] & 0xFF;long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 4) | ((long)((ulong)byte1 >> 4));long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;}}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  0  3  0  0  4  0  0  5  0  0  0  0  0  6  0  0  0  6  5  0  6  0  0  0  0  0  7  0  0  0  1  0  0  0  2  0  0  0  0  0  8  0  0  0  1  0  0  0  2  0  0  0  0  3  0  0  0  4  0  0  0  0  7  0  0  0  0  0  0  0  0  8  0  0  0  0  0  9  0  0  0  1  0  0  0  2  0  0  0  0  3  0  0  0  4  0  0  0  0  0  0  8  0  0  9</s>
<s>public RebootInstanceRequest(): base("HPC", "2016-06-03", "RebootInstance"){Method = MethodType.POST;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  3  0</s>
<s>public virtual ListContainerInstancesResponse ListContainerInstances(ListContainerInstancesRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListContainerInstancesRequestMarshaller.Instance;options.ResponseUnmarshaller = ListContainerInstancesResponseUnmarshaller.Instance;return Invoke<ListContainerInstancesResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public virtual ListClustersResponse ListClusters(ListClustersRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListClustersRequestMarshaller.Instance;options.ResponseUnmarshaller = ListClustersResponseUnmarshaller.Instance;return Invoke<ListClustersResponse>(request, options);}</s></s>0  0  0  0  0  0  1  0  0  2  3  0  0  0  0  0  4  0  0  5  0  0  0  0  4  6  0  0  7  8  0  0  0  4  9  0  0  10  8  0  0  0  11  0  0  0  3  3  4  4</s>
<s>public static bool equals(bool[] array1, bool[] array2){if (array1 == array2){return true;}if (array1 == null || array2 == null || array1.Length!= array2.Length){return false;}{for (int i = 0; i < array1.Length; i++){if (array1[i]!= array2[i]){return false;}}}return true;}</s></s>0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  2  0  0  0  1  2  0  0  0  0  0  0  0  1  0  0  2  0  0  0  1  3  0  2  3  0  0  0  0  0  0  0  0  4  0  0  0  4  0  1  3  0  4  0  0  0  0  1  0  4  4  0  2  0  4  4  0  0  0  0  0</s>
