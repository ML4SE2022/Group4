<s>public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(field_1_vcenter);}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  1  0  0  1</s>
<s>public virtual void AddAll(NGit.Util.BlockList<T> src){if (src.size == 0){return;}int srcDirIdx = 0;for (; srcDirIdx < src.tailDirIdx; srcDirIdx++){AddAll(src.directory[srcDirIdx], 0, BLOCK_SIZE);}if (src.tailBlkIdx!= 0){AddAll(src.tailBlock, 0, src.tailBlkIdx);}}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  1  0  1  0  1  1  0  0  0  0  1  1  0  0  0  0  0  0  0  1  0  0  0  0  1  0  1  1  0  1  0  0  0  1  0  0  0  0  1  1  0  0  1  0  0  0  1  0  0  0  1  1  0  0  0  0  1  0  0  0  1  1  0  0  0  0  1  1</s>
<s>public override void WriteByte(byte b){if (outerInstance.upto == outerInstance.blockSize){if (outerInstance.currentBlock!= null){outerInstance.blocks.Add(outerInstance.currentBlock);outerInstance.blockEnd.Add(outerInstance.upto);}outerInstance.currentBlock = new byte[outerInstance.blockSize];outerInstance.upto = 0;}outerInstance.currentBlock[outerInstance.upto++] = (byte)b;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  1  1  0  1  1  0  0  0  0  1  1  0  0  0  0  0  0  1  1  1  0  0  0  1  1  0  0  0  0  1  1  1  0  0  0  1  1  0  0  0  1  1  0  0  0  0  0  0  1  1  0  0  0  1  1  0  0  0  0  0  0  1  1  0  0  0  0  1  1  0  0  0  1</s>
<s>public virtual ObjectId GetObjectId(){return objectId;}</s></s>0  0  0  0  0  1  1  0  0  0  1</s>
<s>public virtual DeleteDomainEntryResponse DeleteDomainEntry(DeleteDomainEntryRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteDomainEntryRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteDomainEntryResponseUnmarshaller.Instance;return Invoke<DeleteDomainEntryResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual long RamBytesUsed(){return fst == null? 0 : fst.GetSizeInBytes();}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  0  1  1  0</s>
<s>public string GetFullMessage(){byte[] raw = buffer;int msgB = RawParseUtils.TagMessage(raw, 0);if (msgB < 0){return string.Empty;}Encoding enc = RawParseUtils.ParseEncoding(raw);return RawParseUtils.Decode(enc, raw, msgB, raw.Length);}</s></s>0  0  0  0  0  1  0  0  0  0  0  0  0  0  1  0  1  0  0  0  0  1  0  0  0  1  1  0  0  1  0  0  0  0  1  0  0  0  0  0  1  0  0  1  0  1  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1  0  1  0  1  0  0  1  1</s>
<s>public POIFSFileSystem(){HeaderBlock headerBlock = new HeaderBlock(bigBlockSize);_property_table = new PropertyTable(headerBlock);_documents      = new ArrayList();_root           = null;}</s></s>0  0  0  0  0  1  0  0  0  1  1  1  0  0  0  1  0  0  1  0  0  1  0  0  0  1  0  0  1  0  0  0  0  1  0  0  0</s>
<s>public void Init(int address){slice = pool.Buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT];Debug.Assert(slice!= null);upto = address & ByteBlockPool.BYTE_BLOCK_MASK;offset0 = address;Debug.Assert(upto < slice.Length);}</s></s>0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  1  1  0  0  0  1  0  1  1  0  0  0  1  1  0  0  0  1  0  0  0  1  0  0  1  0  1  1  0  0  1  0  1  0  0  0  1  1  0  0  0  1  0  1  1</s>
<s>public virtual NGit.Api.SubmoduleAddCommand SetPath(string path){this.path = path;return this;}</s></s>0  0  0  0  0  0  0  1  1  1  1  0  0  0  1  0  0  0  0  0  1  0  1  0  0</s>
<s>public virtual ListIngestionsResponse ListIngestions(ListIngestionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListIngestionsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListIngestionsResponseUnmarshaller.Instance;return Invoke<ListIngestionsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public QueryParserTokenManager(ICharStream stream, int lexState): this(stream){SwitchTo(lexState);}</s></s>0  0  0  0  1  0  0  1  0  1  0  0  1  1  0  0  1  0</s>
<s>public virtual GetShardIteratorResponse GetShardIterator(GetShardIteratorRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetShardIteratorRequestMarshaller.Instance;options.ResponseUnmarshaller = GetShardIteratorResponseUnmarshaller.Instance;return Invoke<GetShardIteratorResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public ModifyStrategyRequest(): base("aegis", "2016-11-11", "ModifyStrategy", "vipaegis", "openAPI"){Method = MethodType.POST;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public override bool ready(){lock (@lock){if (@in == null){throw new System.IO.IOException("InputStreamReader is closed");}try{return bytes.hasRemaining() || @in.available() > 0;}catch (System.IO.IOException){return false;}}}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  0  0  0  1  1  1  0  0  0  0  0  0  0  0  0  1  1  0  0  0  0  1  1  0  0  0  0  0  0  1  1  1  0  0  0</s>
<s>protected internal EscherOptRecord GetOptRecord(){return _optRecord;}</s></s>0  0  0  0  0  1  1  0  0  0  1</s>
<s>public override int read(byte[] buffer, int offset, int length){lock (this){if (buffer == null){throw new System.ArgumentNullException("buffer == null");}java.util.Arrays.checkOffsetAndCount(buffer.Length, offset, length);if (length == 0){return 0;}int copylen = count - pos < length? count - pos : length;{for (int i = 0; i < copylen; i++){buffer[offset + i] = unchecked((byte)this.buffer[pos + i]);}}pos += copylen;return copylen;}}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  0  0  1  0  0  0  0  0  0  1  0  0  0  0  0  1  1  0  0  0  0  0  0  0  0  1  1  1  1  0  0  0  1  1  0  1  0  1  0  0  1  0  0  0  0  0  0  0  0  1  0  0  0  0  1  1  1  0  1  1  1  0  0  0  0  0  1  0  0  0  1  1  0  1  0  0  0  0  1  0  0  0  1  1  0  0  0  0  0  0  0  1  0  0  0  1  1  0  0  1  0  1  0  1</s>
<s>public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp){this.sentenceOp = sentenceOp;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  0  0  1  0  1</s>
<s>public virtual void print(string str){write(str!= null? str : Sharpen.StringHelper.GetValueOf((object)null));}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  0  1  0  1  0  0  0  1  1  1  0  0  0  0  0</s>
<s>public NotImplementedFunctionException(string functionName, NotImplementedException cause): base(functionName,cause){this.functionName = functionName;}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  0  0  1  1  0  0  0  0  0  0  1  0  1</s>
<s>public override V next(){return this.nextEntry().value;}</s></s>0  0  0  0  0  1  1  0  0  0  0  0  0  0  1  0  1</s>
<s>public override sealed void ReadBytes(byte[] b, int offset, int len, bool useBuffer){int available = bufferLength - bufferPosition;if (len <= available){if (len > 0) {Buffer.BlockCopy(m_buffer, bufferPosition, b, offset, len);}bufferPosition += len;}else{if (available > 0){Buffer.BlockCopy(m_buffer, bufferPosition, b, offset, available);offset += available;len -= available;bufferPosition += available;}if (useBuffer && len < bufferSize){Refill();if (bufferLength < len){Buffer.BlockCopy(m_buffer, 0, b, offset, bufferLength);throw new EndOfStreamException("read past EOF: " + this);}else{Buffer.BlockCopy(m_buffer, 0, b, offset, len);bufferPosition = len;}}else{long after = bufferStart + bufferPosition + len;if (after > Length){throw new EndOfStreamException("read past EOF: " + this);}ReadInternal(b, offset, len);bufferStart = after;bufferPosition = 0;bufferLength = 0; }}}</s></ss>
<s>public virtual TagQueueResponse TagQueue(TagQueueRequest request){var options = new InvokeOptions();options.RequestMarshaller = TagQueueRequestMarshaller.Instance;options.ResponseUnmarshaller = TagQueueResponseUnmarshaller.Instance;return Invoke<TagQueueResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override void Remove(){throw new NotSupportedException();}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0</s>
<s>public virtual ModifyCacheSubnetGroupResponse ModifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = ModifyCacheSubnetGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = ModifyCacheSubnetGroupResponseUnmarshaller.Instance;return Invoke<ModifyCacheSubnetGroupResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override void SetParams(string @params){base.SetParams(@params);culture = "";string ignore;StringTokenizer st = new StringTokenizer(@params, ",");if (st.MoveNext())culture = st.Current;if (st.MoveNext())culture += "-" + st.Current;if (st.MoveNext())ignore = st.Current;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  1  0  0  1  0  0  1  0  0  0  0  0  0  1  0  0  1  0  1  0  0  1  0  0  1  0  0  0  0  0  1  1  0  0  0  1  0  0  1  1  0  0  0  1  1  0  0  0  1  0  0  0  0  1  1  0  0  0  1  1  0  0  0  1  0  0  1  1</s>
<s>public virtual DeleteDocumentationVersionResponse DeleteDocumentationVersion(DeleteDocumentationVersionRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteDocumentationVersionRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteDocumentationVersionResponseUnmarshaller.Instance;return Invoke<DeleteDocumentationVersionResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override bool Equals(object obj){if (!(obj is FacetLabel)){return false;}FacetLabel other = (FacetLabel)obj;if (Length!= other.Length){return false; }for (int i = Length - 1; i >= 0; i--){if (!Components[i].Equals(other.Components[i], StringComparison.Ordinal)){return false;}}return true;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  1  0  1  0  0  0  0  0  1  0  1  0  0  1  1  0  0  1  0  1  1  0  0  0  0  0  0  0  1  0  0  1  0  0  1  0  0  1  0  0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  1  0  0  1  0  0  1  1  0  0  0  0  0</s>
<s>public virtual GetInstanceAccessDetailsResponse GetInstanceAccessDetails(GetInstanceAccessDetailsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetInstanceAccessDetailsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetInstanceAccessDetailsResponseUnmarshaller.Instance;return Invoke<GetInstanceAccessDetailsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public HSSFPolygon CreatePolygon(HSSFChildAnchor anchor){HSSFPolygon shape = new HSSFPolygon(this, anchor);shape.Parent = this;shape.Anchor = anchor;shapes.Add(shape);OnCreate(shape);return shape;}</s></s>0  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  0  0  0  1  0  0  0  1  1  0  0  0  0  0  1  1  0  1  0  0  0  1  1  0  0  1  0  0  1  0  0  1  0  1</s>
<s>public String GetSheetName(int sheetIndex){return GetBoundSheetRec(sheetIndex).Sheetname;}</s></s>0  0  0  0  1  1  0  0  0  1  0  0  0  0  1  0  0  1  1</s>
<s>public virtual GetDashboardResponse GetDashboard(GetDashboardRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetDashboardRequestMarshaller.Instance;options.ResponseUnmarshaller = GetDashboardResponseUnmarshaller.Instance;return Invoke<GetDashboardResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual AssociateSigninDelegateGroupsWithAccountResponse AssociateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request){var options = new InvokeOptions();options.RequestMarshaller = AssociateSigninDelegateGroupsWithAccountRequestMarshaller.Instance;options.ResponseUnmarshaller = AssociateSigninDelegateGroupsWithAccountResponseUnmarshaller.Instance;return Invoke<AssociateSigninDelegateGroupsWithAccountResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public void AddMultipleBlanks(MulBlankRecord mbr){for (int j = 0; j < mbr.NumColumns; j++){BlankRecord br = new BlankRecord();br.Column = j + mbr.FirstColumn;br.Row = mbr.Row;br.XFIndex = (mbr.GetXFAt(j));InsertCell(br);}}</s></s>0  0  0  0  0  1  0  0  1  1  0  0  0  0  0  1  0  0  0  1  0  1  1  0  1  0  0  0  1  0  1  0  0  1  0  0  0  0  1  1  0  0  1  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  0  0  1  1  0  0  1  0  0  1  0  0  1</s>
<s>public static string quote(string @string){java.lang.StringBuilder sb = new java.lang.StringBuilder();sb.append("\\Q");int apos = 0;int k;while ((k = @string.IndexOf("\\E", apos)) >= 0){sb.append(Sharpen.StringHelper.Substring(@string, apos, k + 2)).append("\\\\E\\Q");apos = k + 2;}return sb.append(Sharpen.StringHelper.Substring(@string, apos)).append("\\E").ToString();}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  1  1  1  0  1  0  0  0  0  1  1  1  0  0  0  0  1  1  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  1  1  0  0  0  0  0  1  0  0  0  0  0  0  0  1  1  0  0  0  0  0  1  1  1  0  0  1  0  1  0  0  1  0  1  0  0  0  0  0  0  0  0  1  0  0  1  0  0  0  0  0  0  0  0  1  1  0  0  0  0  0  1  1  1  0  0  1  0  1  1  0  0  0  0  1  0</s>
<s>public override java.nio.ByteBuffer putInt(int value){throw new java.nio.ReadOnlyBufferException();}</s></s>0  0  0  0  0  0  0  1  1  1  1  0  0  0  1  0  0  0  0  0  1  1  1  0</s>
<s>public ArrayPtg(Object[][] values2d){int nColumns = values2d[0].Length;int nRows = values2d.Length;_nColumns = (short)nColumns;_nRows = (short)nRows;Object[] vv = new Object[_nColumns * _nRows];for (int r = 0; r < nRows; r++){Object[] rowData = values2d[r];for (int c = 0; c < nColumns; c++){vv[GetValueIndex(c, r)] = rowData[c];}}_arrayValues = vv;_reserved0Int = 0;_reserved1Short = 0;_reserved2Byte = 0;}</s></s>0  0  0  0  0  0  0  1  0  1  0  0  0  1  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  1  0  0  1  1  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  0  1  0  0  1  0  0  0  1  0  0  1  1  0  0  0  0  0  1  0  0  0  1  1  0  1  0  0  0  0  1  0  0  1  0  0  1  0  0  1  0  0  0  0  1  0  0  0  1  1  0  1  0  0  0  0  1  0  0  0  1  0  0  1  0  1  0  0  1  0  0  1  0  0  0  1  0  1  0  0  0  1  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0</s>
<s>public virtual GetIceServerConfigResponse GetIceServerConfig(GetIceServerConfigRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetIceServerConfigRequestMarshaller.Instance;options.ResponseUnmarshaller = GetIceServerConfigResponseUnmarshaller.Instance;return Invoke<GetIceServerConfigResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override String ToString(){StringBuilder sb = new StringBuilder(64);sb.Append(GetType().Name).Append(" [");sb.Append(GetValueAsString());sb.Append("]");return sb.ToString();}</s></s>0  0  0  0  0  1  1  0  0  0  0  1  0  1  0  0  1  0  0  0  0  0  0  0  0  1  1  0  0  0  0  1  0  1  1  0  0  0  0  0  0  1  1  0  0  0  1  0  0  0  0  1  1  0  0  0  0  0  0  1  1  0</s>
<s>public override string ToString(string field){return "ToChildBlockJoinQuery (" + _parentQuery + ")";}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  1  0</s>
<s>public void IncRef(){refCount.IncrementAndGet();}</s></s>0  0  0  0  0  1  0  0  0  0  0  1  1  0</s>
<s>public virtual UpdateConfigurationSetSendingEnabledResponse UpdateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateConfigurationSetSendingEnabledRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateConfigurationSetSendingEnabledResponseUnmarshaller.Instance;return Invoke<UpdateConfigurationSetSendingEnabledResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public int GetNextXBATChainOffset(){return GetXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE;}</s></s>0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  1</s>
<s>public void multiplyByPowerOfTen(int pow10){TenPower tp = TenPower.GetInstance(Math.Abs(pow10));if (pow10 < 0){mulShift(tp._divisor, tp._divisorShift);}else{mulShift(tp._multiplicand, tp._multiplierShift);}}</s></s>0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  1  0  0  0  1  1  0  0  0  0  1  1  0  0  1  0  0  1  0  0  0  0  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  0  0  1  1  0  0  1  1</s>
<s>public override string ToString(){StringBuilder builder = new StringBuilder();int length = this.Length;builder.Append(Path.DirectorySeparatorChar);for (int i = 0; i < length; i++){builder.Append(this.GetComponent(i));if (i < (length - 1)){builder.Append(Path.DirectorySeparatorChar);}}return builder.ToString();}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0  1  0  0  1  0  0  0  0  0  1  0  0  0  1  0  0  0  1  1  0  0  0  1  1  0  0  0  0  1  0  0  0  1  1  0  1  0  0  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  1  0  0  1  0  0  0  0  0  1  1  0  0  0  1  1  0  0  0  1  1  0</s>
<s>public void withFetcher(ECSMetadataServiceCredentialsFetcher fetcher){this.fetcher = fetcher;this.fetcher.SetRoleName(roleName);}</s></s>0  0  0  0  0  1  0  0  1  1  0  0  0  0  0  1  0  1  0  0  0  0  0  1  1  0  0  1</s>
<s>public virtual void SetProgressMonitor(ProgressMonitor pm){progressMonitor = pm;}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  0  1  0  1</s>
<s>public override void Reset(){if (!First){ptr = 0;if (!Eof){ParseEntry();}}}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  1  0  0  0  0  1  0  0  0  1  0</s>
<s>public E previous(){if (iterator.previousIndex() >= start){return iterator.previous();}throw new java.util.NoSuchElementException();}</s></s>0  0  0  0  1  1  0  0  0  0  0  0  1  1  0  1  0  0  0  0  1  1  0  0  0  0  0  1  1  1  0</s>
<s>public virtual string GetNewPrefix(){return this.newPrefix;}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  1</s>
<s>public virtual int indexOfValue(int value){{for (int i = 0; i < mSize; i++){if (mValues[i] == value){return i;}}}return -1;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  1  0  0  0  1  1  0  1  0  0  0  0  1  0  0  1  1  0  0  1  0  0  0</s>
<s>public IList<CharsRef> UniqueStems(char[] word, int length){IList<CharsRef> stems = Stem(word, length);if (stems.Count < 2){return stems;}CharArraySet terms = new CharArraySet(LuceneVersion.LUCENE_CURRENT, 8, dictionary.ignoreCase); IList<CharsRef> deduped = new List<CharsRef>();foreach (CharsRef s in stems){if (!terms.Contains(s)){deduped.Add(s);terms.Add(s);}}return deduped;}</s></s>0  0  0  0  0  1  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  0  1  0  1  0  0  1  0  0  1  0  1  0  0  0  1  1  0  0  0  1  0  0  1  0  1  0  0  1  0  0  0  1  1  0  0  0  0  1  1  0  0  0  1  0  1  0  1  0  0  0  1  0  1  0  0  1  1  1  0  0  0  0  0  1  1  0  0  1  0  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1  0  1</s>
<s>public virtual GetGatewayResponsesResponse GetGatewayResponses(GetGatewayResponsesRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetGatewayResponsesRequestMarshaller.Instance;options.ResponseUnmarshaller = GetGatewayResponsesResponseUnmarshaller.Instance;return Invoke<GetGatewayResponsesResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public void SetPosition(long position){currentBlockIndex = (int)(position >> outerInstance.blockBits);currentBlock = outerInstance.blocks[currentBlockIndex];currentBlockUpto = (int)(position & outerInstance.blockMask);}</s></s>0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  0  0  1  0  1  1  0  0  1  0  0  0  1  1  0  0  1  0  0  1  0  0  0  0  0  1  0  1  1</s>
<s>public override long Skip(long n){int s = (int)Math.Min(Available(), Math.Max(0, n));ptr += s;return s;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  1  0  0  0  0  0  1  1  0  0  0  1  0  0  0  0  1  1  0  0  0  0  1  0  0  1  0  1  0  1</s>
<s>public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig){_bootstrapActionConfig = bootstrapActionConfig;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  1</s>
<s>public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(field_1_row);out1.WriteShort(field_2_col);out1.WriteShort(field_3_flags);out1.WriteShort(field_4_shapeid);out1.WriteShort(field_6_author.Length);out1.WriteByte(field_5_hasMultibyte? 0x01 : 0x00);if (field_5_hasMultibyte) {StringUtil.PutUnicodeLE(field_6_author, out1);} else {StringUtil.PutCompressedUnicode(field_6_author, out1);}if (field_7_padding!= null) {out1.WriteByte(Convert.ToInt32(field_7_padding, CultureInfo.InvariantCulture));}}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  0  1  1  0  0  0  1  1  0  0  0  1  0  0  0  1  0  0  0  0  1  1  0  0  1  0  1  0  0  0  0  1  1  0  0  1  0  1  0  0  1  0  0  0  0  0  1  1  0  0  0  0  1  1  0  0  1  0  0  1  1</s>
<s>public virtual int lastIndexOf(string @string){return lastIndexOf(@string, count);}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  1  0  1</s>
<s>public override bool add(E @object){return addLastImpl(@object);}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  0  1  0  0  1</s>
<s>public virtual void UnsetSection(string section, string subsection){ConfigSnapshot src;ConfigSnapshot res;do{src = state.Get();res = UnsetSection(src, section, subsection);}while (!state.CompareAndSet(src, res));}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  1  0  0  0  1  0  1  0  0  1  0  1  0  0  0  0  1  0  0  0  1  1  0  0  0  1  0  0  1  0  0  1  0  1  0  1  0  0  0  1  1  0  0  1  0  1</s>
<s>public string GetTagName(){return tagName;}</s></s>0  0  0  0  0  1  0  0  0  1</s>
<s>public void AddSubRecord(int index, SubRecord element){subrecords.Insert(index, element);}</s></s>0  0  0  0  0  1  0  0  0  1  0  1  1  0  0  0  0  1  1  0  0  1  0  1</s>
<s>public virtual bool remove(object @object){lock (mutex){return c.remove(@object);}}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1</s>
<s>public override TokenStream Create(TokenStream input){return new DoubleMetaphoneFilter(input, maxCodeLength, inject);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  1  0  0  1  0  1  0  1</s>
<s>public virtual long Length(){return InCoreLength();}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0</s>
<s>public virtual void SetValue(bool newValue){value = newValue;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  1</s>
<s>public Pair(ContentSource oldSource, ContentSource newSource){this.oldSource = oldSource;this.newSource = newSource;}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  0  0  0  0  0  0  1  0  1  0  0  0  0  1  0  1</s>
<s>public virtual int Get(int i){if (count <= i){throw Sharpen.Extensions.CreateIndexOutOfRangeException(i);}return entries[i];}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  1  1  0  0  0  0  0  1  1  1  0  0  1  0  0  1  0  0  1</s>
<s>public CreateRepoRequest(): base("cr", "2016-06-07", "CreateRepo", "cr", "openAPI"){UriPattern = "/repos";Method = MethodType.PUT;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public virtual bool IsDeltaBaseAsOffset(){return deltaBaseAsOffset;}</s></s>0  0  0  0  0  0  1  0  0  0  1</s>
<s>public void remove(){if (expectedModCount == list.modCount){if (lastLink!= null){java.util.LinkedList.Link<ET> next_1 = lastLink.next;java.util.LinkedList.Link<ET> previous_1 = lastLink.previous;next_1.previous = previous_1;previous_1.next = next_1;if (lastLink == link){pos--;}link = previous_1;lastLink = null;expectedModCount++;list._size--;list.modCount++;}else{throw new System.InvalidOperationException();}}else{throw new java.util.ConcurrentModificationException();}}</s></s>0  0  0  0  0  1  0  0  0  0  1  0  1  1  0  0  0  1  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  0  0  1  1  0  0  0  0  0  0  0  1  1  1  1  1  1  0  0  1  1  0  0  0  1  1  0  1  0  0  0  1  1  0  1  0  0  1  1  0  0  0  1  0  0  1  0  1  0  0  1  0  0  0  0  1  0  0  0  1  1  0  0  0  1  1  0  0  0  0  1  1  0  0  0  0  0  0  1  1  1  0</s>
<s>public virtual MergeShardsResponse MergeShards(MergeShardsRequest request){var options = new InvokeOptions();options.RequestMarshaller = MergeShardsRequestMarshaller.Instance;options.ResponseUnmarshaller = MergeShardsResponseUnmarshaller.Instance;return Invoke<MergeShardsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual AllocateHostedConnectionResponse AllocateHostedConnection(AllocateHostedConnectionRequest request){var options = new InvokeOptions();options.RequestMarshaller = AllocateHostedConnectionRequestMarshaller.Instance;options.ResponseUnmarshaller = AllocateHostedConnectionResponseUnmarshaller.Instance;return Invoke<AllocateHostedConnectionResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public int getBeginIndex(){return start;}</s></s>0  0  0  0  0  1  0  0  0  1</s>
<s>public static WeightedTerm[] GetTerms(Query query){return GetTerms(query, false);}</s></s>0  0  0  0  0  0  1  0  1  0  0  1  1  0  0  0  1  0  0  1  0  0</s>
<s>public override java.nio.ByteBuffer compact(){throw new java.nio.ReadOnlyBufferException();}</s></s>0  0  0  0  0  0  0  1  1  1  1  0  0  0  0  0  0  1  1  1  0</s>
<s>public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations){for (int i = 0; i < iterations; ++i){int byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (int)((uint)byte0 >> 2);int byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 4) | ((int)((uint)byte1 >> 4));int byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 2) | ((int)((uint)byte2 >> 6));values[valuesOffset++] = byte2 & 63;}}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  1  1  0  1  0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  1  0  0  1  0</s>
<s>public virtual string GetHumanishName(){if (string.Empty.Equals(GetPath()) || GetPath() == null){throw new ArgumentException();}string s = GetPath();string[] elements;if ("file".Equals(scheme) || LOCAL_FILE.Matcher(s).Matches()){elements = s.Split("[\\" + FilePath.separatorChar + "/]");}else{elements = s.Split("/");}if (elements.Length == 0){throw new ArgumentException();}string result = elements[elements.Length - 1];if (Constants.DOT_GIT.Equals(result)){result = elements[elements.Length - 2];}else{if (result.EndsWith(Constants.DOT_GIT_EXT)){result = Sharpen.Runtime.Substring(result, 0, result.Length - Constants.DOT_GIT_EXT.Length);}}return result;}</s></ss>
<s>public virtual DescribeNotebookInstanceLifecycleConfigResponse DescribeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeNotebookInstanceLifecycleConfigRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeNotebookInstanceLifecycleConfigResponseUnmarshaller.Instance;return Invoke<DescribeNotebookInstanceLifecycleConfigResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public string GetAccessKeySecret(){return AccessSecret;}</s></s>0  0  0  0  0  1  0  0  0  1</s>
<s>public virtual CreateVpnConnectionResponse CreateVpnConnection(CreateVpnConnectionRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateVpnConnectionRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateVpnConnectionResponseUnmarshaller.Instance;return Invoke<CreateVpnConnectionResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual DescribeVoicesResponse DescribeVoices(DescribeVoicesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeVoicesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeVoicesResponseUnmarshaller.Instance;return Invoke<DescribeVoicesResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual ListMonitoringExecutionsResponse ListMonitoringExecutions(ListMonitoringExecutionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListMonitoringExecutionsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListMonitoringExecutionsResponseUnmarshaller.Instance;return Invoke<ListMonitoringExecutionsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public DescribeJobRequest(string vaultName, string jobId){_vaultName = vaultName;_jobId = jobId;}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  0  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public EscherRecord GetEscherRecord(int index){return escherRecords[index];}</s></s>0  0  0  0  1  1  0  0  0  1  0  0  0  1  0  0  1</s>
<s>public virtual GetApisResponse GetApis(GetApisRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetApisRequestMarshaller.Instance;options.ResponseUnmarshaller = GetApisResponseUnmarshaller.Instance;return Invoke<GetApisResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual DeleteSmsChannelResponse DeleteSmsChannel(DeleteSmsChannelRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteSmsChannelRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteSmsChannelResponseUnmarshaller.Instance;return Invoke<DeleteSmsChannelResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual TrackingRefUpdate GetTrackingRefUpdate(){return trackingRefUpdate;}</s></s>0  0  0  0  0  1  1  0  0  0  1</s>
<s>public virtual void print(bool b){print(b.ToString());}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  0  1  1  0</s>
<s>public virtual IQueryNode GetChild(){return GetChildren()[0];}</s></s>0  0  0  0  0  1  1  0  0  0  0  0  1  0  0  0  0</s>
<s>public NotIgnoredFilter(int workdirTreeIndex){this.index = workdirTreeIndex;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  0  0  1  0  1</s>
<s>public AreaRecord(RecordInputStream in1){field_1_formatFlags = in1.ReadShort();}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  1  1  0</s>
<s>public GetThumbnailRequest(): base("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto", "openAPI"){Protocol = ProtocolType.HTTPS;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public virtual DescribeTransitGatewayVpcAttachmentsResponse DescribeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeTransitGatewayVpcAttachmentsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeTransitGatewayVpcAttachmentsResponseUnmarshaller.Instance;return Invoke<DescribeTransitGatewayVpcAttachmentsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual PutVoiceConnectorStreamingConfigurationResponse PutVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutVoiceConnectorStreamingConfigurationRequestMarshaller.Instance;options.ResponseUnmarshaller = PutVoiceConnectorStreamingConfigurationResponseUnmarshaller.Instance;return Invoke<PutVoiceConnectorStreamingConfigurationResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override OrdRange GetOrdRange(string dim){OrdRange result;prefixToOrdRange.TryGetValue(dim, out result);return result;}</s></s>0  0  0  0  0  1  1  0  0  0  1  0  0  0  1  0  1  0  0  0  1  1  0  0  1  0  1  0  1</s>
<s>public override string ToString(){string symbol = string.Empty;if (startIndex >= 0 && startIndex < ((ICharStream)InputStream).Size){symbol = ((ICharStream)InputStream).GetText(Interval.Of(startIndex, startIndex));symbol = Utils.EscapeWhitespace(symbol, false);}return string.Format(CultureInfo.CurrentCulture, "{0}('{1}')", typeof(Antlr4.Runtime.LexerNoViableAltException).Name, symbol);}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  1  0  0  0  1  1  1  0  0  0  1  0  0  0  0  0  1  1  1  0  0  0  0  1  1  0  0  1  0  1  0  0  1  0  0  0  1  1  0  0  1  0  0  0  0  0  0  1  0  0  0  1  1  0  0  0  0  0  0  0  1  1  1  1  0  1</s>
<s>public virtual E peek(){return peekFirstImpl();}</s></s>0  0  0  0  0  1  1  0  0  0  0  1  0</s>
<s>public virtual CreateWorkspacesResponse CreateWorkspaces(CreateWorkspacesRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateWorkspacesRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateWorkspacesResponseUnmarshaller.Instance;return Invoke<CreateWorkspacesResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override Object Clone(){NumberFormatIndexRecord rec = new NumberFormatIndexRecord();rec.field_1_formatIndex = field_1_formatIndex;return rec;}</s></s>0  0  0  0  0  1  1  0  0  0  0  1  0  1  0  0  1  0  0  0  0  1  1  0  1  0  1</s>
<s>public virtual DescribeRepositoriesResponse DescribeRepositories(DescribeRepositoriesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeRepositoriesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeRepositoriesResponseUnmarshaller.Instance;return Invoke<DescribeRepositoriesResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public SparseIntArray(int initialCapacity){initialCapacity = android.util.@internal.ArrayUtils.idealIntArraySize(initialCapacity);mKeys = new int[initialCapacity];mValues = new int[initialCapacity];mSize = 0;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  0  0  0  1  1  1  1  1  0  0  1  0  0  1  0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  1  0  0</s>
<s>public override TokenStream Create(TokenStream input){return new HyphenatedWordsFilter(input);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  1  0  0  1</s>
<s>public virtual CreateDistributionWithTagsResponse CreateDistributionWithTags(CreateDistributionWithTagsRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateDistributionWithTagsRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateDistributionWithTagsResponseUnmarshaller.Instance;return Invoke<CreateDistributionWithTagsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public RandomAccessFile(string fileName, string mode) : this(new java.io.File(fileName), mode){throw new System.NotImplementedException();}</s></s>0  0  0  0  1  0  0  1  0  1  0  0  0  0  0  0  0  0  1  1  1  0  0  1  0  1  0  0  0  0  0  1  1  0</s>
<s>public virtual DeleteWorkspaceImageResponse DeleteWorkspaceImage(DeleteWorkspaceImageRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteWorkspaceImageRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteWorkspaceImageResponseUnmarshaller.Instance;return Invoke<DeleteWorkspaceImageResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public static string ToHex(int value){return ToHex((long)value, 8);}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  0  1  0  0</s>
<s>public virtual UpdateDistributionResponse UpdateDistribution(UpdateDistributionRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateDistributionRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateDistributionResponseUnmarshaller.Instance;return Invoke<UpdateDistributionResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public HSSFColor GetColor(short index){if (index == HSSFColor.Automatic.Index)return HSSFColor.Automatic.GetInstance();else{byte[] b = palette.GetColor(index);if (b!= null){return new CustomColor(index, b);}}return null;}</s></s>0  0  0  0  1  1  0  0  0  1  0  0  0  1  0  0  1  1  1  0  0  0  0  1  1  1  0  0  0  0  0  0  0  0  1  0  0  0  1  1  0  0  1  0  0  1  0  0  0  0  1  0  0  1  0  1  0  0</s>
<s>public ValueEval Evaluate(ValueEval[] operands, int srcRow, int srcCol){throw new NotImplementedFunctionException(_functionName);}</s></s>0  0  0  0  1  1  0  0  0  1  0  1  0  0  1  0  0  1  0  0  0  1  0  0  1</s>
<s>public override void Serialize(ILittleEndianOutput out1){out1.WriteShort((short)field_1_number_crn_records);out1.WriteShort((short)field_2_sheet_table_index);}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  1  0  0  0  0  1  0  0  0  1  1  0  0  0  0  1</s>
<s>public virtual DescribeDBEngineVersionsResponse DescribeDBEngineVersions(){return DescribeDBEngineVersions(new DescribeDBEngineVersionsRequest());}</s></s>0  0  0  0  0  1  1  0  0  0  0  1  0  0  0  1  0</s>
<s>public FormatRun(short character, short fontIndex){this._character = character;this._fontIndex = fontIndex;}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  0  0  0  0  0  0  1  0  1  0  0  0  0  1  0  1</s>
<s>public static byte[] toBigEndianUtf16Bytes(char[] chars, int offset, int length){byte[] result = new byte[length * 2];int end = offset + length;int resultIndex = 0;{for (int i = offset; i < end; ++i){char ch = chars[i];result[resultIndex++] = unchecked((byte)(ch >> 8));result[resultIndex++] = unchecked((byte)ch);}}return result;}</s></s>0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  0  0  1  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  0  0  0  0  0  0  0  1  0  1  0  1  1  0  1  0  0  0  0  0  1  0  0  1  0  0  1  0  0  0  1  0  0  0  1  0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  1  0  0  0  0  1  0  1</s>
<s>public virtual UploadArchiveResponse UploadArchive(UploadArchiveRequest request){var options = new InvokeOptions();options.RequestMarshaller = UploadArchiveRequestMarshaller.Instance;options.ResponseUnmarshaller = UploadArchiveResponseUnmarshaller.Instance;return Invoke<UploadArchiveResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual IList<IToken> GetHiddenTokensToLeft(int tokenIndex){return GetHiddenTokensToLeft(tokenIndex, -1);}</s></s>0  0  0  0  0  0  1  0  1  1  0  0  0  1  0  0  0  1  0  0  1  0  0  0</s>
<s>public override bool Equals(object obj){if (this == obj){return true;}if (!base.Equals(obj)){return false;}if (this.GetType()!= obj.GetType()){return false;}AutomatonQuery other = (AutomatonQuery)obj;if (!m_compiled.Equals(other.m_compiled)){return false;}if (m_term == null){if (other.m_term!= null){return false;}}else if (!m_term.Equals(other.m_term)){return false;}return true;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  1  0  0  0  0  0  0  0  0  1  0  0  1  0  0  0  0  0  0  0  0  1  0  0  0  1  1  0  0  0  0  0  0  1  0  1  0  0  1  1  0  0  0  0  1  1  0  0  0  1  1  0  0  0  0  0  1  0  0  0  0  0  1  1  0  0  0  0  0  0  0  0  1  1  0  0  0  1  1  0  0  0  0  0</s>
<s>public virtual SpanQuery MakeSpanClause(){List<SpanQuery> spanQueries = new List<SpanQuery>();foreach (var wsq in weightBySpanQuery){wsq.Key.Boost = wsq.Value;spanQueries.Add(wsq.Key);}if (spanQueries.Count == 1)return spanQueries[0];else return new SpanOrQuery(spanQueries.ToArray());}</s></s>0  0  0  0  0  1  1  0  0  0  0  0  1  0  1  0  1  0  0  0  1  0  1  0  0  0  1  1  0  0  0  0  0  1  1  1  0  0  1  1  0  0  0  1  1  0  0  0  1  1  0  0  0  1  1  0  0  0  1  0  0  0  0  0  1  0  0  0  0  1  1  0</s>
<s>public virtual StashCreateCommand StashCreate(){return new StashCreateCommand(repo);}</s></s>0  0  0  0  0  1  1  0  0  0  0  1  0  0  1</s>
<s>public FieldInfo FieldInfo(string fieldName){FieldInfo ret;byName.TryGetValue(fieldName, out ret);return ret;}</s></s>0  0  0  0  1  1  0  0  0  1  0  0  0  1  0  1  0  0  0  1  1  0  0  1  0  1  0  1</s>
<s>public virtual DescribeEventSourceResponse DescribeEventSource(DescribeEventSourceRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeEventSourceRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeEventSourceResponseUnmarshaller.Instance;return Invoke<DescribeEventSourceResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual GetDocumentAnalysisResponse GetDocumentAnalysis(GetDocumentAnalysisRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetDocumentAnalysisRequestMarshaller.Instance;options.ResponseUnmarshaller = GetDocumentAnalysisResponseUnmarshaller.Instance;return Invoke<GetDocumentAnalysisResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual CancelUpdateStackResponse CancelUpdateStack(CancelUpdateStackRequest request){var options = new InvokeOptions();options.RequestMarshaller = CancelUpdateStackRequestMarshaller.Instance;options.ResponseUnmarshaller = CancelUpdateStackResponseUnmarshaller.Instance;return Invoke<CancelUpdateStackResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual ModifyLoadBalancerAttributesResponse ModifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request){var options = new InvokeOptions();options.RequestMarshaller = ModifyLoadBalancerAttributesRequestMarshaller.Instance;options.ResponseUnmarshaller = ModifyLoadBalancerAttributesResponseUnmarshaller.Instance;return Invoke<ModifyLoadBalancerAttributesResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual SetInstanceProtectionResponse SetInstanceProtection(SetInstanceProtectionRequest request){var options = new InvokeOptions();options.RequestMarshaller = SetInstanceProtectionRequestMarshaller.Instance;options.ResponseUnmarshaller = SetInstanceProtectionResponseUnmarshaller.Instance;return Invoke<SetInstanceProtectionResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual ModifyDBProxyResponse ModifyDBProxy(ModifyDBProxyRequest request){var options = new InvokeOptions();options.RequestMarshaller = ModifyDBProxyRequestMarshaller.Instance;options.ResponseUnmarshaller = ModifyDBProxyResponseUnmarshaller.Instance;return Invoke<ModifyDBProxyResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual void Add(char[] output, int offset, int len, int endOffset, int posLength){if (count == outputs.Length){CharsRef[] next = new CharsRef[ArrayUtil.Oversize(1 + count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];Array.Copy(outputs, 0, next, 0, count);outputs = next;}if (count == endOffsets.Length){int[] next = new int[ArrayUtil.Oversize(1 + count, RamUsageEstimator.NUM_BYTES_INT32)];Array.Copy(endOffsets, 0, next, 0, count);endOffsets = next;}if (count == posLengths.Length){int[] next = new int[ArrayUtil.Oversize(1 + count, RamUsageEstimator.NUM_BYTES_INT32)];Array.Copy(posLengths, 0, next, 0, count);posLengths = next;}if (outputs[count] == null){outputs[count] = new CharsRef();}outputs[count].CopyChars(output, offset, len);endOffsets[count] = endOffset;posLengths[count] = posLength;count++;}</s></ss>
<s>public FetchLibrariesRequest(): base("CloudPhoto", "2017-07-11", "FetchLibraries", "cloudphoto", "openAPI"){Protocol = ProtocolType.HTTPS;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public override bool Exists(){return objects.Exists();}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  1  1  0</s>
<s>public FilterOutputStream(java.io.OutputStream @out){this.@out = @out;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  0  0  1  0  1</s>
<s>public ScaleClusterRequest(): base("CS", "2015-12-15", "ScaleCluster", "cs", "openAPI"){UriPattern = "/clusters/[ClusterId]";Method = MethodType.PUT;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public IDataValidationConstraint CreateTimeConstraint(int operatorType, String formula1, String formula2){return DVConstraint.CreateTimeConstraint(operatorType, formula1, formula2);}</s></s>0  0  0  0  1  1  0  0  0  1  0  1  1  0  1  1  0  0  0  0  1  1  0  0  1  0  1  0  1</s>
<s>public virtual ListObjectParentPathsResponse ListObjectParentPaths(ListObjectParentPathsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListObjectParentPathsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListObjectParentPathsResponseUnmarshaller.Instance;return Invoke<ListObjectParentPathsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual DescribeCacheSubnetGroupsResponse DescribeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeCacheSubnetGroupsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeCacheSubnetGroupsResponseUnmarshaller.Instance;return Invoke<DescribeCacheSubnetGroupsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public void SetSharedFormula(bool flag){field_5_options =sharedFormula.SetShortBoolean(field_5_options, flag);}</s></s>0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  1  1  0  0  1  0  1</s>
<s>public virtual bool IsReuseObjects(){return reuseObjects;}</s></s>0  0  0  0  0  0  1  0  0  0  1</s>
<s>public virtual IErrorNode AddErrorNode(IToken badToken){ErrorNodeImpl t = new ErrorNodeImpl(badToken);AddChild(t);t.Parent = this;return t;}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  0  0  1  1  0  0  0  1</s>
<s>public LatvianStemFilterFactory(IDictionary<string, string> args): base(args){if (args.Count > 0){throw new System.ArgumentException("Unknown parameters: " + args);}}</s></s>0  0  0  0  0  1  0  0  1  0  0  1  0  0  0  1  0  0  0  0  0  1  1  0  0  0  0  0  1  1  0  0  0  0  1</s>
<s>public virtual RemoveSourceIdentifierFromSubscriptionResponse RemoveSourceIdentifierFromSubscription(RemoveSourceIdentifierFromSubscriptionRequest request){var options = new InvokeOptions();options.RequestMarshaller = RemoveSourceIdentifierFromSubscriptionRequestMarshaller.Instance;options.ResponseUnmarshaller = RemoveSourceIdentifierFromSubscriptionResponseUnmarshaller.Instance;return Invoke<RemoveSourceIdentifierFromSubscriptionResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public static TokenFilterFactory ForName(string name, IDictionary<string, string> args){return loader.NewInstance(name, args);}</s></s>0  0  0  0  0  1  1  0  0  0  1  0  0  1  0  0  0  1  0  0  0  0  1  1  0  0  1  0  1</s>
<s>public AddAlbumPhotosRequest(): base("CloudPhoto", "2017-07-11", "AddAlbumPhotos", "cloudphoto", "openAPI"){Protocol = ProtocolType.HTTPS;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public virtual GetThreatIntelSetResponse GetThreatIntelSet(GetThreatIntelSetRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetThreatIntelSetRequestMarshaller.Instance;options.ResponseUnmarshaller = GetThreatIntelSetResponseUnmarshaller.Instance;return Invoke<GetThreatIntelSetResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override TreeFilter Clone(){return new AndTreeFilter.Binary(a.Clone(), b.Clone());}</s></s>0  0  0  0  0  1  1  0  0  0  0  0  1  1  0  0  0  0  1  1  0  0  0  0  1  1  0</s>
<s>public override bool Equals(object o){return o is ArmenianStemmer;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  1</s>
<s>public sealed override bool hasArray(){return protectedHasArray();}</s></s>0  0  0  0  0  0  0  1  0  0  0  0  1  0</s>
<s>public virtual UpdateContributorInsightsResponse UpdateContributorInsights(UpdateContributorInsightsRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateContributorInsightsRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateContributorInsightsResponseUnmarshaller.Instance;return Invoke<UpdateContributorInsightsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public void UnwriteProtectWorkbook(){records.Remove(fileShare);records.Remove(WriteProtect);fileShare = null;writeProtect = null;}</s></s>0  0  0  0  0  1  0  0  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1  0  0  1  0  0  0  0  1  0  0</s>
<s>public SolrSynonymParser(bool dedup, bool expand, Analyzer analyzer): base(dedup, analyzer){this.expand = expand;}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  1  0  0  0  1  1  0  0  0  0  0  0  1  0  1</s>
<s>public virtual RequestSpotInstancesResponse RequestSpotInstances(RequestSpotInstancesRequest request){var options = new InvokeOptions();options.RequestMarshaller = RequestSpotInstancesRequestMarshaller.Instance;options.ResponseUnmarshaller = RequestSpotInstancesResponseUnmarshaller.Instance;return Invoke<RequestSpotInstancesResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public byte[] GetObjectData(){return FindObjectRecord().ObjectData;}</s></s>0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  1</s>
<s>public virtual GetContactAttributesResponse GetContactAttributes(GetContactAttributesRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetContactAttributesRequestMarshaller.Instance;options.ResponseUnmarshaller = GetContactAttributesResponseUnmarshaller.Instance;return Invoke<GetContactAttributesResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override string ToString(){return GetKey() + ": " + GetValue();}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  0  1  0</s>
<s>public virtual ListTextTranslationJobsResponse ListTextTranslationJobs(ListTextTranslationJobsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTextTranslationJobsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTextTranslationJobsResponseUnmarshaller.Instance;return Invoke<ListTextTranslationJobsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual GetContactMethodsResponse GetContactMethods(GetContactMethodsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetContactMethodsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetContactMethodsResponseUnmarshaller.Instance;return Invoke<GetContactMethodsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public static short LookupIndexByName(String name){FunctionMetadata fd = GetInstance().GetFunctionByNameInternal(name);if (fd == null){return -1;}return (short)fd.Index;}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  0  1  0  1  0  0  0  0  1  0  1  0  0  1  0  0  1  0  0  0  0  0  0  0  0  0  1  1</s>
<s>public virtual DescribeAnomalyDetectorsResponse DescribeAnomalyDetectors(DescribeAnomalyDetectorsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeAnomalyDetectorsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeAnomalyDetectorsResponseUnmarshaller.Instance;return Invoke<DescribeAnomalyDetectorsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public static string InsertId(string message, ObjectId changeId){return InsertId(message, changeId, false);}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  1  1  0  0  0  1  0  0  1  0  1  0  0</s>
<s>public override long GetObjectSize(AnyObjectId objectId, int typeHint){long sz = db.GetObjectSize(this, objectId);if (sz < 0){if (typeHint == OBJ_ANY){throw new MissingObjectException(objectId.Copy(), "unknown");}throw new MissingObjectException(objectId.Copy(), typeHint);}return sz;}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  1  0  0  0  0  0  1  0  0  0  1  1  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  0  1  0  0  0  0  1  1  0  0  0  0  0  1  0  0  0  0  1  1  0  0  1  0  1</s>
<s>public virtual ImportInstallationMediaResponse ImportInstallationMedia(ImportInstallationMediaRequest request){var options = new InvokeOptions();options.RequestMarshaller = ImportInstallationMediaRequestMarshaller.Instance;options.ResponseUnmarshaller = ImportInstallationMediaResponseUnmarshaller.Instance;return Invoke<ImportInstallationMediaResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual PutLifecycleEventHookExecutionStatusResponse PutLifecycleEventHookExecutionStatus(PutLifecycleEventHookExecutionStatusRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutLifecycleEventHookExecutionStatusRequestMarshaller.Instance;options.ResponseUnmarshaller = PutLifecycleEventHookExecutionStatusResponseUnmarshaller.Instance;return Invoke<PutLifecycleEventHookExecutionStatusResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public NumberPtg(ILittleEndianInput in1){field_1_value = in1.ReadDouble();}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  1  1  0</s>
<s>public virtual GetFieldLevelEncryptionConfigResponse GetFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetFieldLevelEncryptionConfigRequestMarshaller.Instance;options.ResponseUnmarshaller = GetFieldLevelEncryptionConfigResponseUnmarshaller.Instance;return Invoke<GetFieldLevelEncryptionConfigResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual DescribeDetectorResponse DescribeDetector(DescribeDetectorRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeDetectorRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeDetectorResponseUnmarshaller.Instance;return Invoke<DescribeDetectorResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual ReportInstanceStatusResponse ReportInstanceStatus(ReportInstanceStatusRequest request){var options = new InvokeOptions();options.RequestMarshaller = ReportInstanceStatusRequestMarshaller.Instance;options.ResponseUnmarshaller = ReportInstanceStatusResponseUnmarshaller.Instance;return Invoke<ReportInstanceStatusResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual DeleteAlarmResponse DeleteAlarm(DeleteAlarmRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteAlarmRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteAlarmResponseUnmarshaller.Instance;return Invoke<DeleteAlarmResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override TokenStream Create(TokenStream input){return new PortugueseStemFilter(input);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  1  0  0  1</s>
<s>public FtCblsSubRecord(){reserved = new byte[ENCODED_SIZE];}</s></s>0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  1  0</s>
<s>public virtual bool remove(object @object){lock (mutex){return c.remove(@object);}}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1</s>
<s>public virtual GetDedicatedIpResponse GetDedicatedIp(GetDedicatedIpRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetDedicatedIpRequestMarshaller.Instance;options.ResponseUnmarshaller = GetDedicatedIpResponseUnmarshaller.Instance;return Invoke<GetDedicatedIpResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override string ToString(){return precedence + " >= _p";}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0</s>
<s>public virtual ListStreamProcessorsResponse ListStreamProcessors(ListStreamProcessorsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListStreamProcessorsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListStreamProcessorsResponseUnmarshaller.Instance;return Invoke<ListStreamProcessorsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public DeleteLoadBalancerPolicyRequest(string loadBalancerName, string policyName){_loadBalancerName = loadBalancerName;_policyName = policyName;}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  0  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public WindowProtectRecord(int options){_options = options;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  1</s>
<s>public UnbufferedCharStream(int bufferSize){n = 0;data = new int[bufferSize];}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  0  1  0  0  0  0  0  1</s>
<s>public virtual GetOperationsResponse GetOperations(GetOperationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetOperationsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetOperationsResponseUnmarshaller.Instance;return Invoke<GetOperationsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual void CopyRawTo(byte[] b, int o){NB.EncodeInt32(b, o, w1);NB.EncodeInt32(b, o + 4, w2);NB.EncodeInt32(b, o + 8, w3);NB.EncodeInt32(b, o + 12, w4);NB.EncodeInt32(b, o + 16, w5);}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  0  1  0  1  0  0  0  1  1  0  0  1  0  0  1  0  0  1  0  0  0  1  1  0  0  1  0  0  1  0  0  1  0  0  0  1  1  0  0  1  0  0  1  0  0  1  0  0  0  1  1  0  0  1  0  0  1  0  0  1</s>
<s>public WindowOneRecord(RecordInputStream in1){field_1_h_hold = in1.ReadShort();field_2_v_hold = in1.ReadShort();field_3_width = in1.ReadShort();field_4_height = in1.ReadShort();field_5_options = in1.ReadShort();field_6_active_sheet = in1.ReadShort();field_7_first_visible_tab = in1.ReadShort();field_8_num_selected_tabs = in1.ReadShort();field_9_tab_width_ratio = in1.ReadShort();}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  1  1  0  0  0  1  0  0  0  1  1  0  0  0  1  0  0  0  1  1  0  0  0  1  0  0  0  1  1  0  0  0  1  0  0  0  1  1  0  0  0  1  0  0  0  1  1  0  0  0  1  0  0  0  1  1  0  0  0  1  0  0  0  1  1  0  0  0  1  0  0  0  1  1  0</s>
<s>public virtual StopWorkspacesResponse StopWorkspaces(StopWorkspacesRequest request){var options = new InvokeOptions();options.RequestMarshaller = StopWorkspacesRequestMarshaller.Instance;options.ResponseUnmarshaller = StopWorkspacesResponseUnmarshaller.Instance;return Invoke<StopWorkspacesResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public void close() throws IOException{if (isOpen){isOpen = false;try{dump();}finally{try{channel.truncate(fileLength);}finally{try{channel.close();}finally{fos.close();}}}}}</s></s>0  0  0  0  0  1  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  1  1  0  0  1  0  0  0  0  0  0  0  1  1  0  0  0  0  0  0  1  1  0</s>
<s>public virtual DescribeMatchmakingRuleSetsResponse DescribeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeMatchmakingRuleSetsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeMatchmakingRuleSetsResponseUnmarshaller.Instance;return Invoke<DescribeMatchmakingRuleSetsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public string GetPronunciation(int wordId, char[] surface, int off, int len){return null; }</s></s>0  0  0  0  0  1  0  0  0  1  0  0  0  0  1  0  0  1  0  0  1  0  0  0</s>
<s>public virtual string GetPath(){return pathStr;}</s></s>0  0  0  0  0  0  1  0  0  0  1</s>
<s>public static double devsq(double[] v){double r = double.NaN;if (v!= null && v.Length >= 1){double m = 0;double s = 0;int n = v.Length;for (int i = 0; i < n; i++){s += v[i];}m = s / n;s = 0;for (int i = 0; i < n; i++){s += (v[i] - m) * (v[i] - m);}r = (n == 1)? 0: s;}return r;}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  1  1  0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  0  0  0  1  1  0  1  0  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  1  0  0  1  0  0  0  0  0  0  1  0  0  0  1  1  0  1  0  0  0  1  0  0  0  0  0  1  0  0  1  1  0  0  0  1  0  0  1  1  0  0  1  0  0  0  0  1  0  0  1  0  1</s>
<s>public virtual DescribeResizeResponse DescribeResize(DescribeResizeRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeResizeRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeResizeResponseUnmarshaller.Instance;return Invoke<DescribeResizeResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public bool hasPassedThroughNonGreedyDecision(){return passedThroughNonGreedyDecision;}</s></s>0  0  0  0  0  1  0  0  0  1</s>
<s>public int end(){return end(0);}</s></s>0  0  0  0  0  1  0  0  0  0  1  0  0  0</s>
<s>public void Traverse(ICellHandler handler){int firstRow = range.FirstRow;int lastRow = range.LastRow;int firstColumn = range.FirstColumn;int lastColumn = range.LastColumn;int width = lastColumn - firstColumn + 1;SimpleCellWalkContext ctx = new SimpleCellWalkContext();IRow currentRow = null;ICell currentCell = null;for (ctx.rowNumber = firstRow; ctx.rowNumber <= lastRow; ++ctx.rowNumber){currentRow = sheet.GetRow(ctx.rowNumber);if (currentRow == null){continue;}for (ctx.colNumber = firstColumn; ctx.colNumber <= lastColumn; ++ctx.colNumber){currentCell = currentRow.GetCell(ctx.colNumber);if (currentCell == null){continue;}if (IsEmpty(currentCell) &&!traverseEmptyCells){continue;}ctx.ordinalNumber =(ctx.rowNumber - firstRow) * width +(ctx.colNumber - firstColumn + 1);handler.OnCell(currentCell, ctx);}}}</s></ss>
<s>public int GetReadIndex(){return _ReadIndex;}</s></s>0  0  0  0  0  1  0  0  0  1</s>
<s>public virtual int CompareTo(ScoreTerm other){if (Term.BytesEquals(other.Term)){return 0; }if (this.Boost == other.Boost){return other.Term.CompareTo(this.Term);}else{return this.Boost.CompareTo(other.Boost);}}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  1  0  0  0  1  1  0  0  0  0  0  0  0  1  0  1  1  0  0  0  0  0  1  1  1  0  0  0  0  1  0  0  0  0  0  0  1  1  0  0  0  1  1</s>
<s>public virtual int Normalize(char[] s, int len){for (int i = 0; i < len; i++){switch (s[i]){case FARSI_YEH:case YEH_BARREE:s[i] = YEH;break;case KEHEH:s[i] = KAF;break;case HEH_YEH:case HEH_GOAL:s[i] = HEH;break;case HAMZA_ABOVE: len = StemmerUtil.Delete(s, i, len);i--;break;default:break;}}return len;}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  1  1  0  1  0  0  0  1  0  0  1  0  0  0  1  0  1  0  0  0  1  0  0  1  0  1  0  0  0  1  0  0  0  1  0  0  1  0  1  0  0  0  1  0  1  0  0  0  1  0  0  1  0  1  0  0  0  1  0  0  1  0  0  0  1  1  0  0  1  0  1  0  1  0  0  1  0  0  0  0  0  1</s>
<s>public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(_options);}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  1  0  0  1</s>
<s>public DiagnosticErrorListener(bool exactOnly){this.exactOnly = exactOnly;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  0  0  1  0  1</s>
<s>public KeySchemaElement(string attributeName, KeyType keyType){_attributeName = attributeName;_keyType = keyType;}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  0  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual GetAssignmentResponse GetAssignment(GetAssignmentRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetAssignmentRequestMarshaller.Instance;options.ResponseUnmarshaller = GetAssignmentResponseUnmarshaller.Instance;return Invoke<GetAssignmentResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual bool HasObject(AnyObjectId id){return FindOffset(id)!= -1;}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  0  0  1  0  0</s>
<s>public virtual GroupingSearch SetAllGroups(bool allGroups){this.allGroups = allGroups;return this;}</s></s>0  0  0  0  0  1  1  0  0  0  1  0  0  0  0  0  1  0  1  0  0</s>
<s>public virtual void SetMultiValued(string dimName, bool v){lock (this){if (!fieldTypes.TryGetValue(dimName, out DimConfig fieldType)){fieldTypes[dimName] = new DimConfig { IsMultiValued = v };}else{fieldType.IsMultiValued = v;}}}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  1  0  0  0  0  0  0  0  0  1  1  0  0  1  0  0  1  1  0  0  0  0  1  0  0  1  0  0  1  0  0  1  0  1  0  0  0  0  1  1  0  1</s>
<s>public int GetCellsVal(){int size = 0;foreach (char c in cells.Keys){Cell e = At(c);if (e.cmd >= 0){size++;}}return size;}</s></s>0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  0  0  1  0  1  1  0  0  0  1  0  1  0  0  1  0  0  1  0  0  0  1  1  0  0  0  0  1  0  1</s>
<s>public virtual DeleteVoiceConnectorResponse DeleteVoiceConnector(DeleteVoiceConnectorRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteVoiceConnectorRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteVoiceConnectorResponseUnmarshaller.Instance;return Invoke<DeleteVoiceConnectorResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual DeleteLifecyclePolicyResponse DeleteLifecyclePolicy(DeleteLifecyclePolicyRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteLifecyclePolicyRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteLifecyclePolicyResponseUnmarshaller.Instance;return Invoke<DeleteLifecyclePolicyResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public void Write(byte[] b){int len = b.Length;CheckPosition(len);System.Array.Copy(b, 0, _buf, _writeIndex, len);_writeIndex += len;}</s></s>0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  1  0  0  1  0  0  1  0  0  0  0  1  1  1  0  0  1  0  0  0  1  0  1  0  1  0  0  1  0  1</s>
<s>public virtual RebaseResult GetRebaseResult(){return this.rebaseResult;}</s></s>0  0  0  0  0  1  1  0  0  0  0  0  1</s>
<s>public static int GetNearestSetSize(int maxNumberOfValuesExpected,float desiredSaturation){foreach (var t in from t in _usableBitSetSizeslet numSetBitsAtDesiredSaturation = (int) (t*desiredSaturation)let estimatedNumUniqueValues = GetEstimatedNumberUniqueValuesAllowingForCollisions(t, numSetBitsAtDesiredSaturation) where estimatedNumUniqueValues > maxNumberOfValuesExpected select t){return t;}return -1;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  1  0  0  0  1  0  0  1  0  0  1  0  0  0  0  0  1  1  0  1  0  1  0  0  1  0  1  0  0  1  1  0  1  0  0  1  0  0  0</s>
<s>public virtual DescribeDashboardResponse DescribeDashboard(DescribeDashboardRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeDashboardRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeDashboardResponseUnmarshaller.Instance;return Invoke<DescribeDashboardResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual CreateSegmentResponse CreateSegment(CreateSegmentRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateSegmentRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateSegmentResponseUnmarshaller.Instance;return Invoke<CreateSegmentResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append("[DBCELL]\n");buffer.Append("   .rowoffset       = ").Append(StringUtil.ToHexString(RowOffset)).Append("\n");for (int k = 0; k < field_2_cell_offsets.Length; k++){buffer.Append("   .cell_").Append(k).Append(" = ").Append(HexDump.ShortToHex(field_2_cell_offsets[k])).Append("\n");}buffer.Append("[/DBCELL]\n");return buffer.ToString();}</s></s>0  0  0  0  0  1  1  0  0  0  0  1  0  1  0  0  1  0  0  0  0  1  1  0  0  0  0  0  0  0  0  0  0  0  1  1  0  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  0  0  0  1  0  0  0  1  0  1  1  0  1  0  0  0  0  0  0  0  0  0  0  0  0  1  1  0  0  0  1  0  0  1  1  0  0  0  1  0  0  0  0  1  1  0  0  0  1  0  0  1  1  0  0  0  0  0  0  0  1  1  0  0  0  0  0  0  0  1  1  0</s>
<s>public virtual IList<string> GetUndeletedList(){return undeletedList;}</s></s>0  0  0  0  0  0  1  0  0  1  0  0  0  1</s>
<s>public override String ToString(){return "[INTERFACEEND/]\n";}</s></s>0  0  0  0  0  1  1  0  0  0  0  0</s>
<s>public override object Clone(){return this;}</s></s>0  0  0  0  0  0  1  0  0  0  0</s>
<s>public PlainTextDictionary(TextReader reader){@in = reader;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  1</s>
<s>public java.lang.StringBuilder append(java.lang.CharSequence csq){if (csq == null){appendNull();}else{append0(csq, 0, csq.Length);}return this;}</s></s>0  0  0  0  0  0  1  1  1  1  0  0  0  0  1  1  1  1  0  0  0  1  0  0  0  0  1  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0</s>
<s>public virtual ListAssociatedStacksResponse ListAssociatedStacks(ListAssociatedStacksRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListAssociatedStacksRequestMarshaller.Instance;options.ResponseUnmarshaller = ListAssociatedStacksResponseUnmarshaller.Instance;return Invoke<ListAssociatedStacksResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public static double avedev(double[] v){double r = 0;double m = 0;double s = 0;for (int i = 0, iSize = v.Length; i < iSize; i++){s += v[i];}m = s / v.Length;s = 0;for (int i = 0, iSize = v.Length; i < iSize; i++){s += Math.Abs(v[i] - m);}r = s / v.Length;return r;}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  0  1  0  0  1  1  0  1  1  0  1  0  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  1  1  0  0  1  0  0  0  0  0  0  1  0  0  0  1  0  0  1  1  0  1  1  0  1  0  0  0  1  0  0  0  1  1  0  0  0  0  1  0  0  1  1  0  0  1  0  0  1  0  1  1  0  1</s>
<s>public virtual DescribeByoipCidrsResponse DescribeByoipCidrs(DescribeByoipCidrsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeByoipCidrsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeByoipCidrsResponseUnmarshaller.Instance;return Invoke<DescribeByoipCidrsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual GetDiskResponse GetDisk(GetDiskRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetDiskRequestMarshaller.Instance;options.ResponseUnmarshaller = GetDiskResponseUnmarshaller.Instance;return Invoke<GetDiskResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual CreateDBClusterParameterGroupResponse CreateDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateDBClusterParameterGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateDBClusterParameterGroupResponseUnmarshaller.Instance;return Invoke<CreateDBClusterParameterGroupResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public static java.nio.CharBuffer wrap(char[] array_1, int start, int charCount){java.util.Arrays.checkOffsetAndCount(array_1.Length, start, charCount);java.nio.CharBuffer buf = new java.nio.ReadWriteCharArrayBuffer(array_1);buf._position = start;buf._limit = start + charCount;return buf;}</s></s>0  0  0  0  0  0  0  1  1  1  1  0  0  0  0  0  1  0  0  1  0  0  1  0  0  0  0  0  0  1  1  1  1  0  0  0  1  1  0  1  0  1  0  0  0  0  1  1  1  0  1  0  0  0  0  1  1  1  0  0  1  0  0  0  1  1  0  1  0  0  0  1  1  0  0  1  1  0  1</s>
<s>public virtual SubmoduleStatusType GetType(){return type;}</s></s>0  0  0  0  0  1  1  0  0  0  1</s>
<s>public virtual DescribeGameServerGroupResponse DescribeGameServerGroup(DescribeGameServerGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeGameServerGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeGameServerGroupResponseUnmarshaller.Instance;return Invoke<DescribeGameServerGroupResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public java.util.regex.Pattern pattern(){return _pattern;}</s></s>0  0  0  0  0  0  0  1  1  1  1  1  0  0  0  1</s>
<s>public virtual V setValue(V @object){throw new System.NotSupportedException();}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  1  1  0</s>
<s>public StringBuilder Stem(string word){string cmd = stemmer.GetLastOnPath(word);if (cmd == null)return null;buffer.Length = 0;buffer.Append(word);Diff.Apply(buffer, cmd);if (buffer.Length > 0)return buffer;else return null;}</s></s>0  0  0  0  1  1  0  0  0  1  0  0  0  0  0  1  0  0  0  1  1  0  0  1  0  0  1  0  0  0  0  0  0  1  1  0  0  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1  0  1  0  0  0  1  1  0  0  1  0  0</s>
<s>public RenameFaceRequest(): base("CloudPhoto", "2017-07-11", "RenameFace", "cloudphoto", "openAPI"){Protocol = ProtocolType.HTTPS;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public virtual char RequireChar(IDictionary<string, string> args, string name){return Require(args, name)[0];}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  1  0  0  0  0  1  0  0  1  0  1  0  0  0</s>
<s>public static string ToStringTree(ITree t){return ToStringTree(t, (IList<string>)null);}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  0  1  0  0  1  0  0  0  1  0  0  0</s>
<s>public override string ToString(){return "<deleted/>";}</s></s>0  0  0  0  0  0  1  0  0  0  0</s>
<s>public GetRepoWebhookLogListRequest(): base("cr", "2016-06-07", "GetRepoWebhookLogList", "cr", "openAPI"){UriPattern = "/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]/logs";Method = MethodType.GET;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public virtual GetJobUnlockCodeResponse GetJobUnlockCode(GetJobUnlockCodeRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetJobUnlockCodeRequestMarshaller.Instance;options.ResponseUnmarshaller = GetJobUnlockCodeResponseUnmarshaller.Instance;return Invoke<GetJobUnlockCodeResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public RemoveTagsRequest(string resourceId){_resourceId = resourceId;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  1</s>
<s>public virtual short GetGB2312Id(char ch){try{byte[] buffer = Encoding.GetEncoding("GB2312").GetBytes(ch.ToString());if (buffer.Length!= 2){return -1;}int b0 = (buffer[0] & 0x0FF) - 161; int b1 = (buffer[1] & 0x0FF) - 161; return (short)(b0 * 94 + b1);}catch (ArgumentException e) {throw new Exception(e.ToString(), e);}}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  1  0  0  0  1  0  0  0  0  1  1  0  0  0  0  1  1  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  1  0  1  0  0  1  1  0  0  0  1  0  0  0  0  1  1  0  0  1</s>
<s>public virtual NGit.BatchRefUpdate AddCommand(ICollection<ReceiveCommand> cmd){Sharpen.Collections.AddAll(commands, cmd);return this;}</s></s>0  0  0  0  0  0  1  1  1  0  0  0  1  0  1  1  0  0  0  0  0  1  1  1  0  0  1  0  1  0  0</s>
<s>public int CheckExternSheet(int sheetNumber){return OrCreateLinkTable.CheckExternSheet(sheetNumber);}</s></s>0  0  0  0  0  1  0  0  0  1  0  0  0  0  1  1  0  0  1</s>
<s>public override bool Equals(object @object){return c.Equals(@object);}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  1  1  0  0  1</s>
<s>public virtual Query Build(IQueryNode queryNode){AnyQueryNode andNode = (AnyQueryNode)queryNode;BooleanQuery bQuery = new BooleanQuery();IList<IQueryNode> children = andNode.GetChildren();if (children!= null){foreach (IQueryNode child in children){object obj = child.GetTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);if (obj!= null){Query query = (Query)obj;try{bQuery.Add(query, Occur.SHOULD);}catch (BooleanQuery.TooManyClausesException ex){throw new QueryNodeException(new Message(QueryParserMessages.EMPTY_MESSAGE), ex);}}}}bQuery.MinimumNumberShouldMatch = andNode.MinimumMatchingElements;return bQuery;}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  1  0  0  1  0  1  0  0  1  0  0  0  0  1  0  1  0  1  0  0  0  1  1  0  0  0  1  0  0  0  1  1  1  0  0  0  0  0  1  0  0  0  1  1  0  0  0  1  1  0  0  1  0  0  0  0  1  0  1  0  0  1  1  0  0  0  0  0  1  1  0  0  1  0  0  1  1  0  0  0  1  1  1  0  0  0  1  0  0  0  1  0  0  0  1  1  0  1  0  0  0  1  1  0  0  1  1  0  1</s>
<s>public virtual DescribeStreamProcessorResponse DescribeStreamProcessor(DescribeStreamProcessorRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeStreamProcessorRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeStreamProcessorResponseUnmarshaller.Instance;return Invoke<DescribeStreamProcessorResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual DescribeDashboardPermissionsResponse DescribeDashboardPermissions(DescribeDashboardPermissionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeDashboardPermissionsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeDashboardPermissionsResponseUnmarshaller.Instance;return Invoke<DescribeDashboardPermissionsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual Ref Peel(Ref @ref){try{return RefDatabase.Peel(@ref);}catch (IOException){return @ref;}}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  0  1  1  0  0  1  0  0  1  0  0  1</s>
<s>public override long RamBytesUsed(){return RamUsageEstimator.AlignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ 2 * RamUsageEstimator.NUM_BYTES_INT32 + RamUsageEstimator.NUM_BYTES_OBJECT_REF) + RamUsageEstimator.SizeOf(blocks);}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  1  1  0  0  0  0  0  1  1  0  0  0  1  1  0  1  1  0  0  1  1  0  0  1</s>
<s>public virtual GetDomainSuggestionsResponse GetDomainSuggestions(GetDomainSuggestionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetDomainSuggestionsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetDomainSuggestionsResponseUnmarshaller.Instance;return Invoke<GetDomainSuggestionsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual DescribeStackEventsResponse DescribeStackEvents(DescribeStackEventsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeStackEventsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeStackEventsResponseUnmarshaller.Instance;return Invoke<DescribeStackEventsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public void SetRule(int idx, IConditionalFormattingRule cfRule){SetRule(idx, (HSSFConditionalFormattingRule)cfRule);}</s></s>0  0  0  0  0  1  0  0  0  1  0  1  1  0  0  0  1  0  0  1  0  0  1  1</s>
<s>public virtual CreateResolverRuleResponse CreateResolverRule(CreateResolverRuleRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateResolverRuleRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateResolverRuleResponseUnmarshaller.Instance;return Invoke<CreateResolverRuleResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public SeriesIndexRecord(RecordInputStream in1){field_1_index = in1.ReadShort();}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  1  1  0</s>
<s>public GetStylesRequest(): base("lubancloud", "2018-05-09", "GetStyles", "luban", "openAPI"){Method = MethodType.POST;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(field_1_gridset_flag);}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  1  0  0  1</s>
<s>public override bool Equals(object obj){if (this == obj){return true;}if (obj == null){return false;}if (GetType()!= obj.GetType()){return false;}Toffs other = (Toffs)obj;if (StartOffset!= other.StartOffset){return false;}if (EndOffset!= other.EndOffset){return false;}return true;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  1  0  0  0  0  0  1  0  0  0  0  0  0  0  1  0  0  0  1  1  0  0  0  0  0  0  1  0  1  0  0  1  1  0  0  1  0  1  1  0  0  0  0  0  1  0  1  1  0  0  0  0  0</s>
<s>public virtual CreateGatewayGroupResponse CreateGatewayGroup(CreateGatewayGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateGatewayGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateGatewayGroupResponseUnmarshaller.Instance;return Invoke<CreateGatewayGroupResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual CreateParticipantConnectionResponse CreateParticipantConnection(CreateParticipantConnectionRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateParticipantConnectionRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateParticipantConnectionResponseUnmarshaller.Instance;return Invoke<CreateParticipantConnectionResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public static double irr(double[] income){return irr(income, 0.1d);}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  1  0  0  1  0  0</s>
<s>public virtual RegisterWorkspaceDirectoryResponse RegisterWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request){var options = new InvokeOptions();options.RequestMarshaller = RegisterWorkspaceDirectoryRequestMarshaller.Instance;options.ResponseUnmarshaller = RegisterWorkspaceDirectoryResponseUnmarshaller.Instance;return Invoke<RegisterWorkspaceDirectoryResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual NGit.Api.RevertCommand Include(Ref commit){CheckCallable();commits.AddItem(commit);return this;}</s></s>0  0  0  0  0  0  0  1  1  1  1  0  0  1  1  0  0  0  1  0  0  0  0  1  1  0  0  1  0  0</s>
<s>public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval inumberVE){ValueEval veText1;try{veText1 = OperandResolver.GetSingleValue(inumberVE, srcRowIndex, srcColumnIndex);}catch (EvaluationException e){return e.GetErrorEval();}String iNumber = OperandResolver.CoerceValueToString(veText1);System.Text.RegularExpressions.Match m = COMPLEX_NUMBER_PATTERN.Match(iNumber);bool result = m.Success && m.Groups[0].Length>0;String imaginary = "";if (result == true){String imaginaryGroup = m.Groups[5].Value;bool hasImaginaryPart = imaginaryGroup.Equals("i") || imaginaryGroup.Equals("j");if (imaginaryGroup.Length == 0){return new StringEval(Convert.ToString(0));}if (hasImaginaryPart){String sign = "";String imaginarySign = m.Groups[(GROUP3_IMAGINARY_SIGN)].Value;if (imaginarySign.Length!= 0 &&!(imaginarySign.Equals("+"))){sign = imaginarySign;}String groupImaginaryNumber = m.Groups[(GROUP4_IMAGINARY_INTEGER_OR_DOUBLE)].Value;if (groupImaginaryNumber.Length!= 0){imaginary = sign + groupImaginaryNumber;}else{imaginary = sign + "1";}}}else{return ErrorEval.NUM_ERROR;}return new StringEval(imaginary);}</s></ss>
<s>public virtual E pollLast(){java.util.MapClass.Entry<E, object> entry = backingMap.pollLastEntry();return (entry == null)? default(E) : entry.getKey();}</s></s>0  0  0  0  0  1  1  0  0  0  0  0  0  0  1  1  1  0  1  0  1  0  0  1  0  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  1  1  0</s>
<s>public int ReadUShort(){int ch1 = ReadUByte();int ch2 = ReadUByte();return (ch2 << 8) + (ch1 << 0);}</s></s>0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  1  0</s>
<s>public ModifySnapshotAttributeRequest(string snapshotId, SnapshotAttributeName attribute, OperationType operationType){_snapshotId = snapshotId;_attribute = attribute;_operationType = operationType;}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  1  0  0  0  0  0  1  0  1  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual ListBonusPaymentsResponse ListBonusPayments(ListBonusPaymentsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListBonusPaymentsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListBonusPaymentsResponseUnmarshaller.Instance;return Invoke<ListBonusPaymentsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override V Get(char[] text){if (text == null){throw new ArgumentNullException("text");}return default(V);}</s></s>0  0  0  0  0  1  1  0  0  0  0  0  1  0  0  0  1  0  0  0  0  1  0  0  0  0  0  1</s>
<s>public override TokenStream Create(TokenStream input){var commonGrams = (CommonGramsFilter)base.Create(input);return new CommonGramsQueryFilter(commonGrams);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  1  0  0  1  0  0  1  0  0  1</s>
<s>public virtual string GetPath(){return path;}</s></s>0  0  0  0  0  0  1  0  0  0  1</s>
<s>public virtual InitiateMultipartUploadResponse InitiateMultipartUpload(InitiateMultipartUploadRequest request){var options = new InvokeOptions();options.RequestMarshaller = InitiateMultipartUploadRequestMarshaller.Instance;options.ResponseUnmarshaller = InitiateMultipartUploadResponseUnmarshaller.Instance;return Invoke<InitiateMultipartUploadResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public java.lang.StringBuilder insert(int offset, int i){insert0(offset, System.Convert.ToString(i));return this;}</s></s>0  0  0  0  0  0  1  1  1  1  0  0  0  1  0  0  1  0  0  0  1  0  0  1  0  0  0  0  1  1  1  0  0  1  0  0</s>
<s>public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations){for (int i = 0; i < iterations; ++i){long block = blocks[blocksOffset++];for (int shift = 62; shift >= 0; shift -= 2){values[valuesOffset++] = (int)(((long)((ulong)block >> shift)) & 3);}}}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  1  1  0  1  0  0  0  0  0  1  0  0  1  0  0  0  1  0  0  0  0  1  0  0  0  1  0  0  1  0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  1  1  0</s>
<s>public override TokenStream Create(TokenStream input){return new ElisionFilter(input, articles);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  1  0  0  1  0  1</s>
<s>public bool Eat(Row @in, int[] remap){int sum = 0;foreach (Cell c in @in.cells.Values){sum += c.cnt;if (c.@ref >= 0){if (remap[c.@ref] == 0){c.@ref = -1;}}}int frame = sum / 10;bool live = false;foreach (Cell c in @in.cells.Values){if (c.cnt < frame && c.cmd >= 0){c.cnt = 0;c.cmd = -1;}if (c.cmd >= 0 || c.@ref >= 0){live |= true;}}return!live;}</s></s>0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  0  0  0  0  0  1  0  0  0  1  1  0  0  1  1  1  0  0  0  1  0  0  1  1  0  0  0  1  1  0  0  0  0  0  1  0  0  0  1  1  0  0  0  0  0  1  1  0  0  0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  1  1  0  0  1  1  1  0  0  0  0  0  1  1  1  0  0  1  1  0  0  0  0  0  1  1  0  0  0  0  0  1  1  0  0  0  0  0  0  0  1  1  0  0  0  1  1  0  0  0  0  1  0  0  0  0  1</s>
<s>public Token GetToken(int index){Token t = Token;for (int i = 0; i < index; i++){if (t.Next!= null) t = t.Next;else t = t.Next = TokenSource.GetNextToken();}return t;}</s></s>0  0  0  0  1  1  0  0  0  1  0  0  0  1  0  1  0  1  0  0  0  0  1  0  0  0  1  1  0  1  0  0  0  0  1  1  0  0  0  1  0  0  1  1  0  0  1  0  0  0  1  1  0  0  0  1  1  0  0  1</s>
<s>public override String ToString(){StringBuilder sb = new StringBuilder();sb.Append(GetType().Name).Append(" [ARRAY]\n");sb.Append(" range=").Append(Range.ToString()).Append("\n");sb.Append(" options=").Append(HexDump.ShortToHex(_options)).Append("\n");sb.Append(" notUsed=").Append(HexDump.IntToHex(_field3notUsed)).Append("\n");sb.Append(" formula:").Append("\n");Ptg[] ptgs = _formula.Tokens;for (int i = 0; i < ptgs.Length; i++){Ptg ptg = ptgs[i];sb.Append(ptg.ToString()).Append(ptg.RVAType).Append("\n");}sb.Append("]");return sb.ToString();}</s></ss>
<s>public virtual GetFolderResponse GetFolder(GetFolderRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetFolderRequestMarshaller.Instance;options.ResponseUnmarshaller = GetFolderResponseUnmarshaller.Instance;return Invoke<GetFolderResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual void add(int location, E @object){throw new System.NotSupportedException();}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  1  1  0  0  0  0  1  1  0</s>
<s>public PositiveScoresOnlyCollector(ICollector c){this.c = c;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  0  0  1  0  1</s>
<s>public CreateRepoBuildRuleRequest(): base("cr", "2016-06-07", "CreateRepoBuildRule", "cr", "openAPI"){UriPattern = "/repos/[RepoNamespace]/[RepoName]/rules";Method = MethodType.PUT;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public BaseRef(RefEval re){_refEval = re;_areaEval = null;_firstRowIndex = re.Row;_firstColumnIndex = re.Column;_height = 1;_width = 1;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  1  0  0  1  0  0  0  0  1  0  0  1  1  0  0  1  0  0  1  1  0  0  1  0  0  0  0  1  0  0</s>
<s>public DrawingManager2(EscherDggRecord dgg){this.dgg = dgg;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  0  0  1  0  1</s>
<s>public override void Reset(){if (!First){Reset(raw);}}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  1  0  0  1</s>
<s>public java.nio.charset.CharsetDecoder reset(){status = INIT;implReset();return this;}</s></s>0  0  0  0  0  0  0  1  1  1  1  1  0  0  0  0  1  0  1  0  0  1  0  0  0</s>
<s>public BufferedReader(java.io.Reader @in, int size) : base(@in){if (size <= 0){throw new System.ArgumentException("size <= 0");}this.@in = @in;buf = new char[size];}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  0  0  1  0  0  0  0  1  0  0  0  0  0  1  1  0  0  0  0  0  0  0  1  0  1  0  0  1  0  0  0  0  0  1</s>
<s>public virtual DescribeCodeRepositoryResponse DescribeCodeRepository(DescribeCodeRepositoryRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeCodeRepositoryRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeCodeRepositoryResponseUnmarshaller.Instance;return Invoke<DescribeCodeRepositoryResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual CreateDBSubnetGroupResponse CreateDBSubnetGroup(CreateDBSubnetGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateDBSubnetGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateDBSubnetGroupResponseUnmarshaller.Instance;return Invoke<CreateDBSubnetGroupResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual NGit.Api.RenameBranchCommand SetOldName(string oldName){CheckCallable();this.oldName = oldName;return this;}</s></s>0  0  0  0  0  0  0  1  1  1  1  0  0  0  1  0  0  0  1  0  0  0  0  0  1  0  1  0  0</s>
<s>public virtual NGit.Api.DeleteBranchCommand SetForce(bool force){CheckCallable();this.force = force;return this;}</s></s>0  0  0  0  0  0  0  1  1  1  1  0  0  0  1  0  0  0  1  0  0  0  0  0  1  0  1  0  0</s>
<s>public virtual StopCompilationJobResponse StopCompilationJob(StopCompilationJobRequest request){var options = new InvokeOptions();options.RequestMarshaller = StopCompilationJobRequestMarshaller.Instance;options.ResponseUnmarshaller = StopCompilationJobResponseUnmarshaller.Instance;return Invoke<StopCompilationJobResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public void incrementSecondaryProgressBy(int diff){lock (this){setSecondaryProgress(mSecondaryProgress + diff);}}</s></s>0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  1  0  0  0  1  1</s>
<s>public override int[] Clear(){return bytesStart = null;}</s></s>0  0  0  0  0  0  0  0  1  0  0  0  0  1  0  0</s>
<s>public string getRawPath(){return path;}</s></s>0  0  0  0  0  1  0  0  0  1</s>
<s>public GetUserSourceAccountRequest(): base("cr", "2016-06-07", "GetUserSourceAccount", "cr", "openAPI"){UriPattern = "/users/sourceAccount";Method = MethodType.GET;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public virtual CreateExportJobResponse CreateExportJob(CreateExportJobRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateExportJobRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateExportJobResponseUnmarshaller.Instance;return Invoke<CreateExportJobResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual CreateDedicatedIpPoolResponse CreateDedicatedIpPool(CreateDedicatedIpPoolRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateDedicatedIpPoolRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateDedicatedIpPoolResponseUnmarshaller.Instance;return Invoke<CreateDedicatedIpPoolResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override bool Equals(Object obj){if (this == obj) return true;if (obj == null) return false;if (obj is HSSFCellStyle){HSSFCellStyle other = (HSSFCellStyle)obj;if (_format == null){if (other._format!= null)return false;}else if (!_format.Equals(other._format))return false;if (index!= other.index)return false;return true;}return false;}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  0  0  0  0  1  0  0  0  0  0  1  0  1  0  0  0  1  0  1  0  0  1  1  0  0  1  0  0  0  0  0  1  1  0  0  0  0  0  0  0  1  1  0  0  0  1  1  0  0  0  0  1  0  1  1  0  0  0  0  0  0</s>
<s>public virtual ReleaseHostsResponse ReleaseHosts(ReleaseHostsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ReleaseHostsRequestMarshaller.Instance;options.ResponseUnmarshaller = ReleaseHostsResponseUnmarshaller.Instance;return Invoke<ReleaseHostsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override bool Equals(object @object){if (this == @object){return true;}if (@object is java.util.Set<E>){java.util.Set<E> s = (java.util.Set<E>)@object;try{return size() == s.size() && containsAll(s);}catch (System.ArgumentNullException){return false;}catch (System.InvalidCastException){return false;}}return false;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  1  0  0  0  0  0  1  0  0  0  1  1  0  1  0  1  0  0  0  0  0  0  0  1  1  1  1  1  0  0  0  0  1  1  0  1  0  1  1  0  0  0  0  0  0  1  0  0  0  1  1  0  0  1  0  0  1  0  0  0  1  1  0  0  0  0  0  0  1  1  0  0  0  0  0</s>
<s>public virtual void SetRefLogMessage(string msg, bool appendStatus){if (msg == null &&!appendStatus){DisableRefLog();}else{if (msg == null && appendStatus){refLogMessage = string.Empty;refLogIncludeResult = true;}else{refLogMessage = msg;refLogIncludeResult = appendStatus;}}}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  1  0  0  0  0  1  0  0  1  0  0  0  1  0  0  0  0  0  1  0  1  0  0  0  1  0  0  0  1  0  0  1  0  0  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public StreamIDRecord(RecordInputStream in1){idstm = in1.ReadShort();}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  1  1  0</s>
<s>public RecognizeCarRequest(): base("visionai-poc", "2020-04-08", "RecognizeCar"){Method = MethodType.POST;}</s></s>0  0  0  1  0  0  0  0  0  0  0  1  0  0  1  1</s>
<s>public sealed override java.nio.ByteOrder order(){return java.nio.ByteOrder.nativeOrder();}</s></s>0  0  0  0  0  0  0  0  1  1  1  1  0  0  0  0  0  0  0  1  1  1  1  0</s>
<s>public virtual int GetAheadCount(){return aheadCount;}</s></s>0  0  0  0  0  0  1  0  0  0  1</s>
<s>public virtual bool IsNewFragment(){return false;}</s></s>0  0  0  0  0  0  1  0  0  0  0</s>
<s>public virtual GetCloudFrontOriginAccessIdentityConfigResponse GetCloudFrontOriginAccessIdentityConfig(GetCloudFrontOriginAccessIdentityConfigRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetCloudFrontOriginAccessIdentityConfigRequestMarshaller.Instance;options.ResponseUnmarshaller = GetCloudFrontOriginAccessIdentityConfigResponseUnmarshaller.Instance;return Invoke<GetCloudFrontOriginAccessIdentityConfigResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol){return token == symbol;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  1  0  0  1  0  0  0  1  1</s>
<s>public virtual DeleteTransitGatewayResponse DeleteTransitGateway(DeleteTransitGatewayRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteTransitGatewayRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteTransitGatewayResponseUnmarshaller.Instance;return Invoke<DeleteTransitGatewayResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public static double[] Grow(double[] array, int minSize){Debug.Assert(minSize >= 0, "size must be positive (got " + minSize + "): likely integer overflow?");if (array.Length < minSize){double[] newArray = new double[Oversize(minSize, RamUsageEstimator.NUM_BYTES_DOUBLE)];Array.Copy(array, 0, newArray, 0, array.Length);return newArray;}else{return array;}}</s></s>0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  0  1  0  0  0  0  0  1  0  0  0  0  1  1  1  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  1  0  0  1  1  0  0  0  1  1  0  0  1  0  0  0  1  0  0  0  0  1  1  0  1  0  0  1</s>
<s>public CreateTransactionRequest(): base("CloudPhoto", "2017-07-11", "CreateTransaction", "cloudphoto", "openAPI"){Protocol = ProtocolType.HTTPS;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public virtual NGit.BatchRefUpdate SetRefLogIdent(PersonIdent pi){refLogIdent = pi;return this;}</s></s>0  0  0  0  0  0  1  1  1  0  0  1  1  0  0  0  1  0  1  0  0</s>
<s>public virtual GetLaunchTemplateDataResponse GetLaunchTemplateData(GetLaunchTemplateDataRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetLaunchTemplateDataRequestMarshaller.Instance;options.ResponseUnmarshaller = GetLaunchTemplateDataResponseUnmarshaller.Instance;return Invoke<GetLaunchTemplateDataResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public ParseInfo(ProfilingATNSimulator atnSimulator){this.atnSimulator = atnSimulator;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  0  0  1  0  1</s>
<s>public SimpleQQParser(string[] qqNames, string indexField){this.qqNames = qqNames;this.indexField = indexField;}</s></s>0  0  0  0  0  1  0  1  0  0  1  0  1  0  0  0  0  0  0  1  0  1  0  0  0  0  1  0  1</s>
<s>public virtual PromoteReadReplicaDBClusterResponse PromoteReadReplicaDBCluster(PromoteReadReplicaDBClusterRequest request){var options = new InvokeOptions();options.RequestMarshaller = PromoteReadReplicaDBClusterRequestMarshaller.Instance;options.ResponseUnmarshaller = PromoteReadReplicaDBClusterResponseUnmarshaller.Instance;return Invoke<PromoteReadReplicaDBClusterResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual DescribeCapacityReservationsResponse DescribeCapacityReservations(DescribeCapacityReservationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeCapacityReservationsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeCapacityReservationsResponseUnmarshaller.Instance;return Invoke<DescribeCapacityReservationsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override string ToString(){return "IndexSearcher(" + reader + "; executor=" + executor + ")";}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  1  0  1  0</s>
<s>public override bool IncrementToken(){return false;}</s></s>0  0  0  0  0  0  1  0  0  0  0</s>
<s>public void Serialize(ILittleEndianOutput out1){out1.WriteShort(main + 1);out1.WriteShort(subFrom);out1.WriteShort(subTo);}</s></s>0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  1  0  0  0  1  0  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1</s>
<s>public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations){if (bitsPerValue > 32){throw new System.NotSupportedException("Cannot decode " + bitsPerValue + "-bits values into an int[]");}for (int i = 0; i < iterations; ++i){long block = ReadInt64(blocks, blocksOffset);blocksOffset += 8;valuesOffset = Decode(block, values, valuesOffset);}}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  0  0  1  0  0  1  0  0  0  1  0  0  0  0  0  1  1  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  1  1  0  1  0  0  0  0  0  1  0  0  1  0  0  1  0  1  0  0  1  0  0  0  0  1  0  0  1  0  0  1  0  1  0  1</s>
<s>public virtual bool IsExpectedToken(int symbol){ATN atn = Interpreter.atn;ParserRuleContext ctx = _ctx;ATNState s = atn.states[State];IntervalSet following = atn.NextTokens(s);if (following.Contains(symbol)){return true;}if (!following.Contains(TokenConstants.EPSILON)){return false;}while (ctx!= null && ctx.invokingState >= 0 && following.Contains(TokenConstants.EPSILON)){ATNState invokingState = atn.states[ctx.invokingState];RuleTransition rt = (RuleTransition)invokingState.Transition(0);following = atn.NextTokens(rt.followState);if (following.Contains(symbol)){return true;}ctx = (ParserRuleContext)ctx.Parent;}if (following.Contains(TokenConstants.EPSILON) && symbol == TokenConstants.EOF){return true;}return false;}</s></ss>
<s>public virtual UpdateStreamResponse UpdateStream(UpdateStreamRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateStreamRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateStreamResponseUnmarshaller.Instance;return Invoke<UpdateStreamResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0){try{OperandResolver.GetSingleValue(arg0, srcRowIndex, srcColumnIndex);return ErrorEval.NA;}catch (EvaluationException e){int result = TranslateErrorCodeToErrorTypeValue(e.GetErrorEval().ErrorCode);return new NumberEval(result);}}</s></s>0  0  0  0  0  1  1  0  0  0  1  0  0  1  0  1  1  0  0  0  0  0  0  1  1  0  0  1  0  1  0  1  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  1  0  1  0  0  1  0  0  1</s>
<s>public override String ToString(){StringBuilder sb = new StringBuilder(64);sb.Append(GetType().Name).Append(" [");sb.Append(_index).Append(" ").Append(_name);sb.Append("]");return sb.ToString();}</s></s>0  0  0  0  0  1  1  0  0  0  0  1  0  1  0  0  1  0  0  0  0  0  0  0  0  1  1  0  0  0  0  1  0  1  1  0  0  0  0  0  0  0  0  0  0  1  1  0  0  1  1  0  0  0  1  0  0  1  0  0  0  1  1  0  0  0  0  0  0  1  1  0</s>
<s>public virtual ListAssignmentsForHITResponse ListAssignmentsForHIT(ListAssignmentsForHITRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListAssignmentsForHITRequestMarshaller.Instance;options.ResponseUnmarshaller = ListAssignmentsForHITResponseUnmarshaller.Instance;return Invoke<ListAssignmentsForHITResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual DeleteAccessControlRuleResponse DeleteAccessControlRule(DeleteAccessControlRuleRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteAccessControlRuleRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteAccessControlRuleResponseUnmarshaller.Instance;return Invoke<DeleteAccessControlRuleResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public FST.Arc<long?> GetFirstArc(FST.Arc<long?> arc){return fst.GetFirstArc(arc);}</s></s>0  0  0  0  0  1  0  1  0  0  0  1  0  0  0  1  0  1  0  0  0  1  0  0  0  0  1  1  0  0  1</s>
<s>public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations){for (int i = 0; i < iterations; ++i){long block = blocks[blocksOffset++];for (int shift = 48; shift >= 0; shift -= 16){values[valuesOffset++] = (int)(((long)((ulong)block >> shift)) & 65535);}}}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  1  1  0  1  0  0  0  0  0  1  0  0  1  0  0  0  1  0  0  0  0  1  0  0  0  1  0  0  1  0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  1  1  0</s>
<s>public override long skip(long charCount){if (charCount < 0){throw new System.ArgumentException("charCount < 0: " + charCount);}lock (@lock){checkNotClosed();if (charCount == 0){return 0;}long inSkipped;int availableFromBuffer = buf.Length - pos;if (availableFromBuffer > 0){long requiredFromIn = charCount - availableFromBuffer;if (requiredFromIn <= 0){pos += (int)(charCount);return charCount;}pos += availableFromBuffer;inSkipped = @in.skip(requiredFromIn);}else{inSkipped = @in.skip(charCount);}return inSkipped + availableFromBuffer;}}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  0  0  1  1  0  0  0  0  1  0  1  0  0  0  1  0  0  0  1  0  0  0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  1  1  1  0  0  1  0  0  0  0  0  0  1  0  0  1  1  0  0  1  0  0  0  0  1  0  0  0  0  1  0  1  0  0  1  0  1  0  0  1  0  0  0  1  1  0  0  1  0  0  0  1  0  0  0  1  1  0  0  1  0  0  1  1</s>
<s>public virtual IDictionary<string, Ref> GetRefsMap(){return advertisedRefs;}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  0  1</s>
<s>public virtual UpdateApiKeyResponse UpdateApiKey(UpdateApiKeyRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateApiKeyRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateApiKeyResponseUnmarshaller.Instance;return Invoke<UpdateApiKeyResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override ObjectStream OpenStream(){WindowCursor wc = new WindowCursor(db);InputStream @in;try{@in = new PackInputStream(pack, objectOffset + headerLength, wc);}catch (IOException){return wc.Open(GetObjectId(), type).OpenStream();}@in = new BufferedInputStream(new InflaterInputStream(@in, wc.Inflater(), 8192),8192);return new ObjectStream.Filter(type, size, @in);}</s></s>0  0  0  0  0  1  1  0  0  0  0  1  0  1  0  0  1  0  0  1  0  0  1  0  1  0  0  0  0  1  0  0  1  0  0  1  0  0  1  1  0  1  0  0  1  0  0  0  0  0  0  1  1  0  0  0  1  0  0  1  1  0  0  0  1  0  0  1  0  0  0  1  0  0  1  0  0  0  1  1  0  0  0  0  0  0  0  0  1  1  0  0  1  0  1  0  1</s>
<s>public ArrayList(){array = libcore.util.EmptyArray.OBJECT;}</s></s>0  0  0  1  0  1  1  1  1  1</s>
<s>public virtual UpdateDetectorVersionResponse UpdateDetectorVersion(UpdateDetectorVersionRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateDetectorVersionRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateDetectorVersionResponseUnmarshaller.Instance;return Invoke<UpdateDetectorVersionResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public void Resize(){Resize(Double.MaxValue);}</s></s>0  0  0  0  0  1  0  0  0  0  1  0  0  0  1  1</s>
<s>public RevFlagSet(ICollection<RevFlag> s) : this(){Sharpen.Collections.AddAll(this, s);}</s></s>0  0  0  0  1  0  0  1  0  0  0  0  0  0  0  0  0  0  1  1  1  0  0  0  0  1</s>
<s>public override int size(){return this._enclosing.size();}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  0  1  1  0</s>
<s>public sealed override long getLong(){int newPosition = _position + libcore.io.SizeOf.LONG;if (newPosition > _limit){throw new java.nio.BufferUnderflowException();}long result = libcore.io.Memory.peekLong(backingArray, offset + _position, _order);_position = newPosition;return result;}</s></s>0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  1  0  0  0  1  1  1  1  0  0  1  1  0  0  0  0  0  1  1  1  0  0  0  0  0  1  0  0  0  0  0  1  1  1  1  0  0  1  0  0  1  1  0  1  0  0  1  0  1  0  1</s>
<s>public java.lang.StringBuilder insert(int offset, long l){insert0(offset, System.Convert.ToString(l));return this;}</s></s>0  0  0  0  0  0  1  1  1  1  0  0  0  1  0  0  1  0  0  0  1  0  0  1  0  0  0  0  1  1  1  0  0  1  0  0</s>
<s>public TurkishLowerCaseFilter(TokenStream @in): base(@in){termAtt = AddAttribute<ICharTermAttribute>();}</s></s>0  0  0  0  0  1  0  0  1  0  0  1  0  1  0  0  0  1  0  1  0  0</s>
<s>public virtual ParseTreeMatch Match(IParseTree tree, ParseTreePattern pattern){MultiMap<string, IParseTree> labels = new MultiMap<string, IParseTree>();IParseTree mismatchedNode = MatchImpl(tree, pattern.PatternTree, labels);return new ParseTreeMatch(tree, pattern, labels, mismatchedNode);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  1  1  0  0  0  0  1  0  0  1  0  1  0  0  0  1  0  0  1  0  0  0  1  0  1  0  0  1  0  0  1  0  0  1  1  0  1  0  0  1  0  0  1  0  1  0  1  0  1</s>
<s>public virtual void AddIfNoOverlap(WeightedPhraseInfo wpi){foreach (WeightedPhraseInfo existWpi in PhraseList){if (existWpi.IsOffsetOverlap(wpi)){existWpi.TermsInfos.AddRange(wpi.TermsInfos);return;}}PhraseList.Add(wpi);}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  1  1  1  0  0  0  0  1  1  0  0  1  0  0  0  0  0  1  1  1  0  0  0  1  1  0  0  0  0  1  1  0  0  1</s>
<s>public override Merger NewMerger(Repository db){return new StrategySimpleTwoWayInCore.InCoreMerger(db);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  1  1  0  0  1</s>
<s>public override float DocScore(int docId, string field, int numPayloadsSeen, float payloadScore){return numPayloadsSeen > 0? (payloadScore / numPayloadsSeen) : 1;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  1  0  0  1  0  0  1  0  0  0  0  1  0  0  0  1  1  0</s>
<s>public override ICollection<IParseTree> Evaluate(IParseTree t){return Trees.FindAllRuleNodes(t, ruleIndex);}</s></s>0  0  0  0  0  0  1  0  1  1  0  0  1  1  0  0  0  0  1  1  0  0  1  0  1</s>
<s>public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append("[CFRULE]\n");buffer.Append("   .condition_type   =").Append(field_1_condition_type).Append("\n");buffer.Append("    OPTION FLAGS=0x").Append(string.Format("{0:X}",Options)).Append("\n");if (ContainsFontFormattingBlock){buffer.Append(_fontFormatting.ToString()).Append("\n");}if (ContainsBorderFormattingBlock){buffer.Append(_borderFormatting.ToString()).Append("\n");}if (ContainsPatternFormattingBlock){buffer.Append(_patternFormatting.ToString()).Append("\n");}buffer.Append("    Formula 1 =").Append(Arrays.ToString(field_17_formula1.Tokens)).Append("\n");buffer.Append("    Formula 2 =").Append(Arrays.ToString(field_18_formula2.Tokens)).Append("\n");buffer.Append("[/CFRULE]\n");return buffer.ToString();}</s></s>0  0  0  0  0  1  1  0  0  0  0  1  0  1  0  0  1  0  0  0  0  1  1  0  0  0  0  0  0  0  0  0  0  0  1  1  0  0  0  1  0  0  1  1  0  0  0  0  0  0  0  0  0  0  0  1  1  0  0  0  1  0  0  0  0  0  1  0  0  0  0  1  1  0  0  0  0  0  1  0  0  0  0  0  0  1  1  0  0  0  0  1  1  0  1  0  0  0  0  0  1  0  0  0  0  0  0  1  1  0  0  0  0  1  1  0  1  0  0  0  0  0  1  0  0  0  0  0  0  1  1  0  0  0  0  1  1  0  1  0  0  0  0  0  0  0  0  0  0  0  1  1  0  0  0  1  0  0  0  0  1  1  0  0  0  1  1  1  0  0  0  0  0  0  0  0  0  0  0  1  1  0  0  0  1  0  0  0  0  1  1  0  0  0  1  1  1  0  0  0  0  0  0  0  1  1  0  0  0  0  0  0  0  1  1  0</s>
<s>public virtual DescribeServiceUpdatesResponse DescribeServiceUpdates(DescribeServiceUpdatesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeServiceUpdatesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeServiceUpdatesResponseUnmarshaller.Instance;return Invoke<DescribeServiceUpdatesResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public String GetNameName(int index){String result = GetNameAt(index).NameName;return result;}</s></s>0  0  0  0  1  1  0  0  0  1  0  0  0  1  0  1  0  0  0  1  0  0  1  1  0  1</s>
<s>public virtual DescribeLocationsResponse DescribeLocations(){return DescribeLocations(new DescribeLocationsRequest());}</s></s>0  0  0  0  0  1  1  0  0  0  0  1  0  0  0  1  0</s>
<s>public override string ToString(){return "<phraseslop value='" + GetValueString() + "'>" + "\n"+ GetChild().ToString() + "\n</phraseslop>";}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  1  0  1  0  0  0</s>
<s>public virtual DirCacheEntry GetDirCacheEntry(){return currentSubtree == null? currentEntry : null;}</s></s>0  0  0  0  0  1  1  0  0  0  0  0  1  0  1  0</s>
<s>public virtual java.nio.IntBuffer put(int[] src, int srcOffset, int intCount){java.util.Arrays.checkOffsetAndCount(src.Length, srcOffset, intCount);if (intCount > remaining()){throw new java.nio.BufferOverflowException();}{for (int i = srcOffset; i < srcOffset + intCount; ++i){put(src[i]);}}return this;}</s></s>0  0  0  0  0  0  0  1  1  1  1  0  0  0  0  0  1  0  0  1  0  0  1  0  0  0  0  0  0  1  1  1  1  0  0  0  1  1  0  1  0  1  0  0  1  0  1  0  0  0  0  0  0  1  1  1  0  0  0  0  0  0  1  0  1  0  1  0  1  1  0  1  0  0  0  1  0  0  0  1  0  0  1  0  0</s>
<s>public virtual void trimToSize(){int s = _size;if (s == array.Length){return;}if (s == 0){array = libcore.util.EmptyArray.OBJECT;}else{object[] newArray = new object[s];System.Array.Copy(array, 0, newArray, 0, s);array = newArray;}modCount++;}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  1  0  0  1  0  1  1  0  0  0  0  1  0  0  0  0  1  0  0  0  0  1  1  1  1  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  0  1  1  1  0  0  1  0  0  0  1  0  0  0  1  0  0  1  0  1  0  0  1</s>
<s>public virtual DescribeLocalGatewayVirtualInterfacesResponse DescribeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfacesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeLocalGatewayVirtualInterfacesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeLocalGatewayVirtualInterfacesResponseUnmarshaller.Instance;return Invoke<DescribeLocalGatewayVirtualInterfacesResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override TokenStream Create(TokenStream input){return new RussianLightStemFilter(input);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  1  0  0  1</s>
<s>public int[] ToArray(int[] a){int[] rval;if (a.Length == _limit){Array.Copy(_array, 0, a, 0, _limit);rval = a;}else{rval = ToArray();}return rval;}</s></s>0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  0  0  0  0  1  0  0  0  1  1  1  0  0  0  0  1  1  0  0  1  0  0  0  1  0  0  0  1  0  0  1  0  1  0  0  0  1  0  0  1  0  0  1</s>
<s>public BasicSessionCredentials(string accessKeyId, string accessKeySecret,string sessionToken, long roleSessionDurationSeconds = 0){if (accessKeyId == null){throw new ArgumentOutOfRangeException("Access key ID cannot be null.");}if (accessKeySecret == null){throw new ArgumentOutOfRangeException("Access key secret cannot be null.");}this.accessKeyId = accessKeyId;this.accessKeySecret = accessKeySecret;this.sessionToken = sessionToken;this.roleSessionDurationSeconds = roleSessionDurationSeconds;sessionStartedTimeInMilliSeconds = DateTime.UtcNow.currentTimeMillis();}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  1  0  1  0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  0  0  1  0  0  0  0  1  0  0  0  0  0  0  0  1  0  1  0  0  0  0  1  0  1  0  0  0  0  1  0  1  0  0  0  0  1  0  1  0  0  1  0  0  0  0  1  1  1  0</s>
<s>public sealed override java.nio.ShortBuffer get(short[] dst, int dstOffset, int shortCount){if (shortCount > remaining()){throw new java.nio.BufferUnderflowException();}System.Array.Copy(backingArray, offset + _position, dst, dstOffset, shortCount);_position += shortCount;return this;}</s></s>0  0  0  0  0  0  0  0  1  1  1  1  0  0  0  0  0  1  0  0  1  0  0  1  0  0  0  1  0  1  0  0  0  0  0  0  1  1  1  0  0  0  0  0  1  1  1  0  0  1  0  0  1  1  0  1  0  1  0  1  0  0  1  0  1  0  0</s>
<s>public virtual ActivateEventSourceResponse ActivateEventSource(ActivateEventSourceRequest request){var options = new InvokeOptions();options.RequestMarshaller = ActivateEventSourceRequestMarshaller.Instance;options.ResponseUnmarshaller = ActivateEventSourceResponseUnmarshaller.Instance;return Invoke<ActivateEventSourceResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual DescribeReceiptRuleSetResponse DescribeReceiptRuleSet(DescribeReceiptRuleSetRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeReceiptRuleSetRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeReceiptRuleSetResponseUnmarshaller.Instance;return Invoke<DescribeReceiptRuleSetResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public Filter(string name){_name = name;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  1</s>
<s>public override java.nio.DoubleBuffer put(double c){throw new java.nio.ReadOnlyBufferException();}</s></s>0  0  0  0  0  0  0  1  1  1  1  0  0  0  1  0  0  0  0  0  1  1  1  0</s>
<s>public virtual CreateTrafficPolicyInstanceResponse CreateTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateTrafficPolicyInstanceRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateTrafficPolicyInstanceResponseUnmarshaller.Instance;return Invoke<CreateTrafficPolicyInstanceResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public JapaneseIterationMarkCharFilter(TextReader input, bool normalizeKanji, bool normalizeKana): base(input){this.normalizeKanji = normalizeKanji;this.normalizeKana = normalizeKana;buffer.Reset(input);}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  1  0  0  0  1  0  0  0  0  0  0  1  0  1  0  0  0  0  1  0  1  0  0  0  1  1  0  0  1</s>
<s>public void WriteLong(long v){WriteInt((int)(v >> 0));WriteInt((int)(v >> 32));}</s></s>0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  1  0</s>
<s>public FileResolver(){exports = new ConcurrentHashMap<string, Repository>();exportBase = new CopyOnWriteArrayList<FilePath>();}</s></s>0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  1  0  0  0  0  1  0  0  0  1  0  1  0  0</s>
<s>public ValueEval GetRef3DEval(Ref3DPtg rptg){SheetRangeEvaluator sre = CreateExternSheetRefEvaluator(rptg.ExternSheetIndex);return new LazyRefEval(rptg.Row, rptg.Column, sre);}</s></s>0  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1  1  0  1</s>
<s>public virtual DeleteDatasetResponse DeleteDataset(DeleteDatasetRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteDatasetRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteDatasetResponseUnmarshaller.Instance;return Invoke<DeleteDatasetResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual StartRelationalDatabaseResponse StartRelationalDatabase(StartRelationalDatabaseRequest request){var options = new InvokeOptions();options.RequestMarshaller = StartRelationalDatabaseRequestMarshaller.Instance;options.ResponseUnmarshaller = StartRelationalDatabaseResponseUnmarshaller.Instance;return Invoke<StartRelationalDatabaseResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual DescribeReservedCacheNodesOfferingsResponse DescribeReservedCacheNodesOfferings(){return DescribeReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest());}</s></s>0  0  0  0  0  1  1  0  0  0  0  1  0  0  0  1  0</s>
<s>static public double PMT(double r, int nper, double pv, double fv, int type){double pmt = -r * (pv * Math.Pow(1 + r, nper) + fv) / ((1 + r * type) * (Math.Pow(1 + r, nper) - 1));return pmt;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  0  1  0  0  0  1  0  0  1  1  0  0  0  0  1  0  1  1  0  0  0  0  0  0  1  1  0  0  0  0  1  1  0  0  0  0  1  0  1  0  0  1</s>
<s>public virtual DescribeDocumentVersionsResponse DescribeDocumentVersions(DescribeDocumentVersionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeDocumentVersionsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeDocumentVersionsResponseUnmarshaller.Instance;return Invoke<DescribeDocumentVersionsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual ListPublishingDestinationsResponse ListPublishingDestinations(ListPublishingDestinationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListPublishingDestinationsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListPublishingDestinationsResponseUnmarshaller.Instance;return Invoke<ListPublishingDestinationsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public DeleteAccountAliasRequest(string accountAlias){_accountAlias = accountAlias;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  1</s>
<s>public static float[] Grow(float[] array){return Grow(array, 1 + array.Length);}</s></s>0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0  1  0  0  1  0  0  0  0  1  1</s>
<s>public override string OutputToString(object output){if (!(output is IList)){return outputs.OutputToString((T)output);}else{IList outputList = (IList)output;StringBuilder b = new StringBuilder();b.Append('[');for (int i = 0; i < outputList.Count; i++){if (i > 0){b.Append(", ");}b.Append(outputs.OutputToString((T)outputList[i]));}b.Append(']');return b.ToString();}}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  1  0  1  0  0  0  0  1  1  0  0  0  1  1  0  0  0  1  0  1  0  0  1  1  0  0  1  0  1  0  0  1  0  0  0  0  1  1  0  0  0  0  0  0  0  1  0  0  0  1  0  1  1  0  1  0  0  0  1  0  0  0  0  0  1  1  0  0  0  0  0  0  1  1  0  0  0  0  1  1  0  0  0  1  0  1  0  0  1  0  0  0  1  1  0  0  0  0  0  0  1  1  0</s>
<s>public void NotifyDeleteCell(ICell cell){_bookEvaluator.NotifyDeleteCell(new HSSFEvaluationCell(cell));}</s></s>0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  1  0  0  0  1  0  0  1</s>
<s>public java.lang.StringBuilder replace(int start, int end, string str){replace0(start, end, str);return this;}</s></s>0  0  0  0  0  0  1  1  1  1  0  0  0  1  0  0  1  0  0  1  0  0  0  1  0  0  1  0  1  0  1  0  0</s>
<s>public virtual SetIdentityPoolConfigurationResponse SetIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request){var options = new InvokeOptions();options.RequestMarshaller = SetIdentityPoolConfigurationRequestMarshaller.Instance;options.ResponseUnmarshaller = SetIdentityPoolConfigurationResponseUnmarshaller.Instance;return Invoke<SetIdentityPoolConfigurationResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public static double kthSmallest(double[] v, int k){double r = double.NaN;k--; if (v!= null && v.Length > k && k >= 0){Array.Sort(v);r = v[k];}return r;}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  1  0  0  1  0  0  0  0  1  0  0  0  1  1  1  0  1  0  0  0  0  0  1  1  0  0  1  0  0  1  0  0  1  0  0  1  0  1</s>
<s>public override void Set(int index, long value){int o = (int)((uint)index >> 5);int b = index & 31;int shift = b << 1;blocks[o] = (blocks[o] & ~(3L << shift)) | (value << shift);}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  0  0  1  1</s>
<s>public override string ToString(){var children = GetChildren();if (children == null || children.Count == 0)return "<boolean operation='and'/>";StringBuilder sb = new StringBuilder();sb.Append("<boolean operation='and'>");foreach (IQueryNode child in children){sb.Append("\n");sb.Append(child.ToString());}sb.Append("\n</boolean>");return sb.ToString();}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  1  0  0  0  0  1  0  0  0  1  1  0  0  0  0  0  1  0  1  0  0  1  0  0  0  0  1  1  0  0  0  0  1  1  1  0  0  0  0  1  1  0  0  0  0  0  0  0  1  1  0  0  0  0  1  1  0  0  0  0  1  1  0  0  0  0  0  0  0  1  1  0</s>
<s>public int SumTokenSizes(int fromIx, int toIx){int result = 0;for (int i = fromIx; i < toIx; i++){result += _ptgs[i].Size;}return result;}</s></s>0  0  0  0  0  1  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  0  0  0  1  0  1  0  1  1  0  1  0  0  0  1  0  0  0  1  0  0  1  1  0  1</s>
<s>public virtual void SetReadonly(bool @readonly){if (this.@readonly &&!@readonly){throw new InvalidOperationException("can't alter readonly IntervalSet");}this.@readonly = @readonly;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  1  0  1  0  0  0  1  0  0  0  0  0  0  0  1  0  1</s>
<s>public void ClearConsumingCell(FormulaCellCacheEntry cce){if (!_consumingCells.Remove(cce)){throw new InvalidOperationException("Specified formula cell is not consumed by this cell");}}</s></s>0  0  0  0  0  1  0  0  1  1  0  0  0  0  0  1  1  0  0  1  0  0  0  1  0  0  0</s>
<s>public override java.util.List<E> subList(int start, int end){lock (mutex){return new java.util.Collections.SynchronizedRandomAccessList<E>(list.subList(start, end), mutex);}}</s></s>0  0  0  0  0  0  0  1  1  0  1  0  1  1  0  0  0  1  0  0  1  0  0  1  0  0  0  0  0  0  1  1  1  0  1  0  1  0  0  0  0  1  1  0  0  1  0  1  0  1</s>
<s>public virtual FileHeader GetFileHeader(){return file;}</s></s>0  0  0  0  0  1  1  0  0  0  1</s>
<s>public virtual AttachLoadBalancersResponse AttachLoadBalancers(AttachLoadBalancersRequest request){var options = new InvokeOptions();options.RequestMarshaller = AttachLoadBalancersRequestMarshaller.Instance;options.ResponseUnmarshaller = AttachLoadBalancersResponseUnmarshaller.Instance;return Invoke<AttachLoadBalancersResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public InitiateJobRequest(string accountId, string vaultName, JobParameters jobParameters){_accountId = accountId;_vaultName = vaultName;_jobParameters = jobParameters;}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  1  0  0  0  0  0  1  0  1  0  0  1  0  1  0  0  1  0  1</s>
<s>public override string ToString(){return "SPL";}</s></s>0  0  0  0  0  0  1  0  0  0  0</s>
<s>public ReplaceableAttribute(string name, string value, bool replace){_name = name;_value = value;_replace = replace;}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  1  0  0  0  0  0  1  0  1  0  0  1  0  1  0  0  1  0  1</s>
<s>public void Add(IIndexableField field){fields.Add(field);}</s></s>0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  1  0  0  1</s>
<s>public virtual DeleteStackSetResponse DeleteStackSet(DeleteStackSetRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteStackSetRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteStackSetResponseUnmarshaller.Instance;return Invoke<DeleteStackSetResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public GetRepoBuildRuleListRequest(): base("cr", "2016-06-07", "GetRepoBuildRuleList", "cr", "openAPI"){UriPattern = "/repos/[RepoNamespace]/[RepoName]/rules";Method = MethodType.GET;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public SparseArray(int initialCapacity){initialCapacity = android.util.@internal.ArrayUtils.idealIntArraySize(initialCapacity);mKeys = new int[initialCapacity];mValues = new object[initialCapacity];mSize = 0;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  0  0  0  1  1  1  1  1  0  0  1  0  0  1  0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  1  0  0</s>
<s>public InvokeServiceRequest(): base("industry-brain", "2018-07-12", "InvokeService"){Method = MethodType.POST;}</s></s>0  0  0  1  0  0  0  0  0  0  0  1  0  0  1  1</s>
<s>public ListAlbumPhotosRequest(): base("CloudPhoto", "2017-07-11", "ListAlbumPhotos", "cloudphoto", "openAPI"){Protocol = ProtocolType.HTTPS;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public bool hasPrevious(){return link!= list.voidLink;}</s></s>0  0  0  0  0  1  0  0  0  0  1  0  1  1</s>
<s>public virtual DeleteHsmConfigurationResponse DeleteHsmConfiguration(DeleteHsmConfigurationRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteHsmConfigurationRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteHsmConfigurationResponseUnmarshaller.Instance;return Invoke<DeleteHsmConfigurationResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public CreateLoadBalancerRequest(string loadBalancerName){_loadBalancerName = loadBalancerName;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  1</s>
<s>public string getUserInfo(){return decode(userInfo);}</s></s>0  0  0  0  0  1  0  0  0  0  1  0  0  1</s>
<s>public virtual TagAttendeeResponse TagAttendee(TagAttendeeRequest request){var options = new InvokeOptions();options.RequestMarshaller = TagAttendeeRequestMarshaller.Instance;options.ResponseUnmarshaller = TagAttendeeResponseUnmarshaller.Instance;return Invoke<TagAttendeeResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual string GetRefName(){return name;}</s></s>0  0  0  0  0  0  1  0  0  0  1</s>
<s>public override WAH8DocIdSet Build(){if (this.wordNum!= -1){AddWord(wordNum, (byte)word);}return base.Build();}</s></s>0  0  0  0  0  1  1  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  0  0  0  1  0  0  0  0  1  0</s>
<s>public virtual bool IsSubTotal(int rowIndex, int columnIndex){return false;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  1  0  0  0</s>
<s>public virtual DescribeDBProxiesResponse DescribeDBProxies(DescribeDBProxiesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeDBProxiesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeDBProxiesResponseUnmarshaller.Instance;return Invoke<DescribeDBProxiesResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual GetVoiceConnectorProxyResponse GetVoiceConnectorProxy(GetVoiceConnectorProxyRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetVoiceConnectorProxyRequestMarshaller.Instance;options.ResponseUnmarshaller = GetVoiceConnectorProxyResponseUnmarshaller.Instance;return Invoke<GetVoiceConnectorProxyResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual void FromConfig(Config rc){SetPackedGitOpenFiles(rc.GetInt("core", null, "packedgitopenfiles", GetPackedGitOpenFiles()));SetPackedGitLimit(rc.GetLong("core", null, "packedgitlimit", GetPackedGitLimit()));SetPackedGitWindowSize(rc.GetInt("core", null, "packedgitwindowsize", GetPackedGitWindowSize()));SetPackedGitMMAP(rc.GetBoolean("core", null, "packedgitmmap", IsPackedGitMMAP()));SetDeltaBaseCacheLimit(rc.GetInt("core", null, "deltabasecachelimit", GetDeltaBaseCacheLimit()));long maxMem = Runtime.GetRuntime().MaxMemory();long sft = rc.GetLong("core", null, "streamfilethreshold", GetStreamFileThreshold());sft = Math.Min(sft, maxMem / 4);sft = Math.Min(sft, int.MaxValue);SetStreamFileThreshold((int)sft);}</s></ss>
<s>public static DateTime GetJavaDate(double date){return GetJavaDate(date, false);}</s></s>0  0  0  0  0  1  1  0  0  0  1  0  0  0  1  0  0  1  0  0</s>
<s>public virtual StartPersonTrackingResponse StartPersonTracking(StartPersonTrackingRequest request){var options = new InvokeOptions();options.RequestMarshaller = StartPersonTrackingRequestMarshaller.Instance;options.ResponseUnmarshaller = StartPersonTrackingResponseUnmarshaller.Instance;return Invoke<StartPersonTrackingResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override int size(){return this._enclosing.size();}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  0  1  1  0</s>
<s>public virtual GetRouteResponse GetRoute(GetRouteRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetRouteRequestMarshaller.Instance;options.ResponseUnmarshaller = GetRouteResponseUnmarshaller.Instance;return Invoke<GetRouteResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual DeleteClusterResponse DeleteCluster(DeleteClusterRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteClusterRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteClusterResponseUnmarshaller.Instance;return Invoke<DeleteClusterResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append("[MMS]\n");buffer.Append("   .addMenu        = ").Append(StringUtil.ToHexString(AddMenuCount)).Append("\n");buffer.Append("   .delMenu        = ").Append(StringUtil.ToHexString(DelMenuCount)).Append("\n");buffer.Append("[/MMS]\n");return buffer.ToString();}</s></s>0  0  0  0  0  1  1  0  0  0  0  1  0  1  0  0  1  0  0  0  0  1  1  0  0  0  0  0  0  0  0  0  0  0  1  1  0  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  0  0  0  0  0  0  1  1  0  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  0  0  1  1  0  0  0  0  0  0  0  1  1  0</s>
<s>public FileBasedConfig(Config @base, FilePath cfgLocation, FS fs) : base(@base){configFile = cfgLocation;this.fs = fs;this.snapshot = FileSnapshot.DIRTY;this.hash = ObjectId.ZeroId;}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  1  0  0  1  0  1  0  1  0  0  0  0  0  1  0  1  0  0  0  0  0  1  0  0  1  1  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public override int Following(int pos){if (pos < text.BeginIndex || pos > text.EndIndex){throw new ArgumentException("offset out of bounds");}else if (0 == sentenceStarts.Length){text.SetIndex(text.BeginIndex);return Done;}else if (pos >= sentenceStarts[sentenceStarts.Length - 1]){text.SetIndex(text.EndIndex);currentSentence = sentenceStarts.Length - 1;return Done;}else{ currentSentence = (sentenceStarts.Length - 1) / 2; MoveToSentenceAt(pos, 0, sentenceStarts.Length - 2);text.SetIndex(sentenceStarts[++currentSentence]);return Current;}}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  1  0  1  1  0  1  0  1  1  0  0  0  1  0  0  0  0  0  0  0  1  1  0  0  0  0  1  1  0  0  0  1  1  0  1  0  0  1  0  1  0  0  0  0  1  1  0  0  0  0  0  1  1  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1  0  0  0  1  0  0  0  0  0  1  1  0  0  0  0  1  0  0  1  0  0  0  0  0  1  1  0  0  0  0  1  1  0  0  0  1  0  0  0  1  0  1</s>
<s>public virtual UpdateParameterGroupResponse UpdateParameterGroup(UpdateParameterGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateParameterGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateParameterGroupResponseUnmarshaller.Instance;return Invoke<UpdateParameterGroupResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override Object Clone(){SeriesChartGroupIndexRecord rec = new SeriesChartGroupIndexRecord();rec.field_1_chartGroupIndex = field_1_chartGroupIndex;return rec;}</s></s>0  0  0  0  0  1  1  0  0  0  0  1  0  1  0  0  1  0  0  0  0  1  1  0  1  0  1</s>
<s>public static double CalcDistanceFromErrPct(IShape shape, double distErrPct, SpatialContext ctx){if (distErrPct < 0 || distErrPct > 0.5){throw new ArgumentException("distErrPct " + distErrPct + " must be between [0 to 0.5]", "distErrPct");}if (distErrPct == 0 || shape is IPoint){return 0;}IRectangle bbox = shape.BoundingBox;IPoint ctr = bbox.Center;double y = (ctr.Y >= 0? bbox.MaxY : bbox.MinY);double diagonalDist = ctx.DistCalc.Distance(ctr, bbox.MaxX, y);return diagonalDist * distErrPct;}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  1  0  1  1  0  0  0  0  1  0  0  1  0  0  0  0  1  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  1  0  1  0  0  0  0  0  1  0  1  0  0  1  1  0  0  1  0  1  0  0  1  1  0  0  0  0  1  0  0  0  0  0  1  1  0  0  1  1  0  1  1  0  0  0  0  1  0  0  0  0  1  1  1  0  0  1  0  0  1  1  0  1  0  0  1  1</s>
<s>public virtual int codePointAt(int index){if (index < 0 || index >= count){throw indexAndLength(index);}return Sharpen.CharHelper.CodePointAt(value, index, count);}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  1  0  0  1  1  0  0  0  1  0  0  1  0  0  0  0  1  1  1  0  0  1  0  1  0  1</s>
<s>public void SetPasswordVerifier(int passwordVerifier){this.passwordVerifier = passwordVerifier;}</s></s>0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  1  0  1</s>
<s>public ListVaultsRequest(string accountId){_accountId = accountId;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  1</s>
<s>public SquashMessageFormatter(){dateFormatter = new GitDateFormatter(GitDateFormatter.Format.DEFAULT);}</s></s>0  0  0  0  0  1  0  0  0  1  0  0  1  0  0  0  0  1  1  1  0</s>
<s>public GetVideoCoverRequest(): base("CloudPhoto", "2017-07-11", "GetVideoCover", "cloudphoto", "openAPI"){Protocol = ProtocolType.HTTPS;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public override int lastIndexOf(object @object){int pos = _size;java.util.LinkedList.Link<E> link = voidLink.previous;if (@object!= null){while (link!= voidLink){pos--;if (@object.Equals(link.data)){return pos;}link = link.previous;}}else{while (link!= voidLink){pos--;if ((object)link.data == null){return pos;}link = link.previous;}}return -1;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  1  0  1  0  0  0  0  0  0  0  1  1  1  1  1  1  0  0  1  1  0  0  1  0  0  0  0  1  1  0  0  0  1  0  0  0  1  1  0  0  0  1  1  0  0  1  0  0  1  0  0  1  1  0  0  0  1  1  0  0  0  1  0  0  0  0  0  1  1  0  0  0  1  0  0  1  0  0  1  1  0  0  0</s>
<s>public virtual DescribeSpotFleetRequestsResponse DescribeSpotFleetRequests(DescribeSpotFleetRequestsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeSpotFleetRequestsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeSpotFleetRequestsResponseUnmarshaller.Instance;return Invoke<DescribeSpotFleetRequestsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual IndexFacesResponse IndexFaces(IndexFacesRequest request){var options = new InvokeOptions();options.RequestMarshaller = IndexFacesRequestMarshaller.Instance;options.ResponseUnmarshaller = IndexFacesResponseUnmarshaller.Instance;return Invoke<IndexFacesResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override BreakIterator GetBreakIterator(int script){switch (script){case UScript.Japanese: return (BreakIterator)cjkBreakIterator.Clone();case UScript.Myanmar:if (myanmarAsWords){return (BreakIterator)defaultBreakIterator.Clone();}else{return (BreakIterator)myanmarSyllableIterator.Clone();}default: return (BreakIterator)defaultBreakIterator.Clone();}}</s></s>0  0  0  0  0  1  1  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  0  0  1  1  0  0  0  0  1  1  0  1  0  0  0  1  0  0  1  1  0  0  0  0  1  0  0  1  1  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public override String ToString(){StringBuilder b = new StringBuilder();b.Append("[DCONREF]\n");b.Append("   .ref\n");b.Append("       .firstrow   = ").Append(firstRow).Append("\n");b.Append("       .lastrow    = ").Append(lastRow).Append("\n");b.Append("       .firstcol   = ").Append(firstCol).Append("\n");b.Append("       .lastcol    = ").Append(lastCol).Append("\n");b.Append("   .cch            = ").Append(charCount).Append("\n");b.Append("   .stFile\n");b.Append("       .h          = ").Append(charType).Append("\n");b.Append("       .rgb        = ").Append(ReadablePath).Append("\n");b.Append("[/DCONREF]\n");return b.ToString();}</s></ss>
<s>public virtual int GetPackedGitOpenFiles(){return packedGitOpenFiles;}</s></s>0  0  0  0  0  0  1  0  0  0  1</s>
<s>public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append("[FEATURE HEADER]\n");buffer.Append("[/FEATURE HEADER]\n");return buffer.ToString();}</s></s>0  0  0  0  0  1  1  0  0  0  0  1  0  1  0  0  1  0  0  0  0  1  1  0  0  0  0  0  0  0  1  1  0  0  0  0  0  0  0  1  1  0</s>
<s>public static byte[] GetToUnicodeLE(String string1){return UTF16LE.GetBytes(string1);}</s></s>0  0  0  0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  1  0  0  1</s>
<s>public IList<string> GetFooterLines(string keyName){return GetFooterLines(new FooterKey(keyName));}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  1  0  0  0  1  0  0  0  1  0  0  1</s>
<s>public override void Refresh(){base.Refresh();Rescan();}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  0  1  0</s>
<s>public override float get(int index){checkIndex(index);return byteBuffer.getFloat(index * libcore.io.SizeOf.FLOAT);}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  1  0  0  0  1  1  0  0  0  1  0  0  0  1  1  1  1</s>
<s>public virtual DeleteDetectorResponse DeleteDetector(DeleteDetectorRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteDetectorRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteDetectorResponseUnmarshaller.Instance;return Invoke<DeleteDetectorResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override int[] Grow(){Debug.Assert(bytesStart!= null);return bytesStart = ArrayUtil.Grow(bytesStart, bytesStart.Length + 1);}</s></s>0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  1  0  0  0  1  0  0  0  1  0  0  0  1  1  0  0  1  0  0  0  1  1  0</s>
<s>public virtual ListExclusionsResponse ListExclusions(ListExclusionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListExclusionsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListExclusionsResponseUnmarshaller.Instance;return Invoke<ListExclusionsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public static SpatialStrategy GetSpatialStrategy(int roundNumber){SpatialStrategy result;if (!spatialStrategyCache.TryGetValue(roundNumber, out result) || result == null){throw new InvalidOperationException("Strategy should have been init'ed by SpatialDocMaker by now");}return result;}</s></s>0  0  0  0  0  1  1  0  0  0  1  0  0  0  1  0  1  0  0  0  0  0  1  1  0  0  1  0  1  0  1  0  0  0  0  1  0  0  0  0  1</s>
<s>public virtual RestoreDBClusterToPointInTimeResponse RestoreDBClusterToPointInTime(RestoreDBClusterToPointInTimeRequest request){var options = new InvokeOptions();options.RequestMarshaller = RestoreDBClusterToPointInTimeRequestMarshaller.Instance;options.ResponseUnmarshaller = RestoreDBClusterToPointInTimeResponseUnmarshaller.Instance;return Invoke<RestoreDBClusterToPointInTimeResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(field_1_categoryDataType);out1.WriteShort(field_2_valuesDataType);out1.WriteShort(field_3_numCategories);out1.WriteShort(field_4_numValues);out1.WriteShort(field_5_bubbleSeriesType);out1.WriteShort(field_6_numBubbleValues);}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1</s>
<s>public virtual PostAgentProfileResponse PostAgentProfile(PostAgentProfileRequest request){var options = new InvokeOptions();options.RequestMarshaller = PostAgentProfileRequestMarshaller.Instance;options.ResponseUnmarshaller = PostAgentProfileResponseUnmarshaller.Instance;return Invoke<PostAgentProfileResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual ParseTreePattern CompileParseTreePattern(string pattern, int patternRuleIndex){if (((ITokenStream)InputStream)!= null){ITokenSource tokenSource = ((ITokenStream)InputStream).TokenSource;if (tokenSource is Lexer){Lexer lexer = (Lexer)tokenSource;return CompileParseTreePattern(pattern, patternRuleIndex, lexer);}}throw new NotSupportedException("Parser can't discover a lexer to use");}</s></s>0  0  0  0  0  1  1  0  0  0  1  0  0  1  0  0  0  0  0  1  1  0  0  0  0  1  0  1  0  0  0  0  1  1  1  0  0  1  0  1  0  0  0  1  0  1  0  0  1  1  0  0  1  0  0  1  0  1  0  1  0  0  1  0  0  0</s>
<s>public virtual BacktrackDBClusterResponse BacktrackDBCluster(BacktrackDBClusterRequest request){var options = new InvokeOptions();options.RequestMarshaller = BacktrackDBClusterRequestMarshaller.Instance;options.ResponseUnmarshaller = BacktrackDBClusterResponseUnmarshaller.Instance;return Invoke<BacktrackDBClusterResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override string GetName(){return strategyName;}</s></s>0  0  0  0  0  0  1  0  0  0  1</s>
<s>public virtual void CopyTo(byte[] b, int o){FormatHexByte(b, o + 0, w1);FormatHexByte(b, o + 8, w2);FormatHexByte(b, o + 16, w3);FormatHexByte(b, o + 24, w4);FormatHexByte(b, o + 32, w5);}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  0  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1  0  0  1</s>
<s>public static IntList LineMap(byte[] buf, int ptr, int end){IntList map = new IntList((end - ptr) / 36);map.FillTo(1, int.MinValue);for (; ptr < end; ptr = NextLF(buf, ptr)){map.Add(ptr);}map.Add(end);return map;}</s></s>0  0  0  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  1  0  0  0  1  0  1  0  0  1  0  0  0  0  0  1  1  0  0  0  0  1  1  0  0  0  0  0  0  1  0  0  1  1  0  1  0  0  1  0  0  1  0  1  0  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1  0  1</s>
<s>public virtual ICollection<ObjectId> GetAdditionalHaves(){return Sharpen.Collections.EmptySet<ObjectId>();}</s></s>0  0  0  0  0  0  1  0  1  1  0  0  0  0  0  0  1  1  0  1  0  1  0</s>
<s>public override long RamBytesUsed(){return _termsCache.Values.Sum(simpleTextTerms => (simpleTextTerms!= null)? simpleTextTerms.RamBytesUsed() : 0);}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  1  1  1  0  0  0  1  0  0  0  1  0  0  0  1  1  0  0</s>
<s>public String ToXml(String tab){StringBuilder builder = new StringBuilder();builder.Append(tab).Append("<").Append(RecordName).Append(">\n");for (IEnumerator iterator = EscherRecords.GetEnumerator(); iterator.MoveNext(); ){EscherRecord escherRecord = (EscherRecord)iterator.Current;builder.Append(escherRecord.ToXml(tab + "\t"));}builder.Append(tab).Append("</").Append(RecordName).Append(">\n");return builder.ToString();}</s></s>0  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  0  0  0  0  0  0  0  0  0  1  1  0  0  1  1  0  0  0  1  0  0  1  1  0  0  0  0  0  0  1  0  1  0  0  0  1  1  0  0  0  1  1  0  0  0  0  1  0  1  0  0  1  0  1  1  0  0  0  1  1  0  0  0  0  1  1  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  1  1  0  0  1  1  0  0  0  1  0  0  1  1  0  0  0  0  0  0  0  1  1  0</s>
<s>public override TokenStream Create(TokenStream input){return new GalicianMinimalStemFilter(input);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  1  0  0  1</s>
<s>public override string ToString(){StringBuilder r = new StringBuilder();r.Append("Commit");r.Append("={\n");r.Append("tree ");r.Append(treeId!= null? treeId.Name : "NOT_SET");r.Append("\n");foreach (ObjectId p in parentIds){r.Append("parent ");r.Append(p.Name);r.Append("\n");}r.Append("author ");r.Append(author!= null? author.ToString() : "NOT_SET");r.Append("\n");r.Append("committer ");r.Append(committer!= null? committer.ToString() : "NOT_SET");r.Append("\n");if (encoding!= null && encoding!= Constants.CHARSET){r.Append("encoding ");r.Append(encoding.Name());r.Append("\n");}r.Append("\n");r.Append(message!= null? message : string.Empty);r.Append("}");return r.ToString();}</s></ss>
<s>public IndicNormalizationFilterFactory(IDictionary<string, string> args) : base(args){if (args.Count > 0){throw new System.ArgumentException("Unknown parameters: " + args);}}</s></s>0  0  0  0  0  1  0  0  1  0  0  1  0  0  0  1  0  0  0  0  0  1  1  0  0  0  0  0  1  1  0  0  0  0  1</s>
<s>public virtual CreateOptionGroupResponse CreateOptionGroup(CreateOptionGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateOptionGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateOptionGroupResponseUnmarshaller.Instance;return Invoke<CreateOptionGroupResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual AssociateMemberAccountResponse AssociateMemberAccount(AssociateMemberAccountRequest request){var options = new InvokeOptions();options.RequestMarshaller = AssociateMemberAccountRequestMarshaller.Instance;options.ResponseUnmarshaller = AssociateMemberAccountResponseUnmarshaller.Instance;return Invoke<AssociateMemberAccountResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual void run(){this._enclosing.doRefreshProgress(this.mId, this.mProgress, this.mFromUser, true);this._enclosing.mRefreshProgressRunnable = this;}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  0  1  1  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  0  0  0  0  1  1  0  0</s>
<s>public virtual SetTerminationProtectionResponse SetTerminationProtection(SetTerminationProtectionRequest request){var options = new InvokeOptions();options.RequestMarshaller = SetTerminationProtectionRequestMarshaller.Instance;options.ResponseUnmarshaller = SetTerminationProtectionResponseUnmarshaller.Instance;return Invoke<SetTerminationProtectionResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual string GetErrorHeader(RecognitionException e){int line = e.OffendingToken.Line;int charPositionInLine = e.OffendingToken.Column;return "line " + line + ":" + charPositionInLine;}</s></s>0  0  0  0  0  0  1  0  0  1  1  0  0  0  0  0  1  0  0  0  1  1  1  0  0  0  0  1  0  0  0  1  1  1  0  0  0  0  0  1  0  1</s>
<s>public override java.nio.CharBuffer asReadOnlyBuffer(){java.nio.CharToByteBufferAdapter buf = new java.nio.CharToByteBufferAdapter(byteBuffer.asReadOnlyBuffer());buf._limit = _limit;buf._position = _position;buf._mark = _mark;buf.byteBuffer._order = byteBuffer._order;return buf;}</s></s>0  0  0  0  0  0  0  1  1  1  1  0  0  0  0  0  0  1  1  1  0  1  0  0  0  0  1  1  1  0  0  0  0  1  1  0  0  0  0  1  1  0  1  0  0  0  1  1  0  1  0  0  0  1  1  0  1  0  0  0  0  1  1  1  0  0  1  1  0  1</s>
<s>public virtual StopSentimentDetectionJobResponse StopSentimentDetectionJob(StopSentimentDetectionJobRequest request){var options = new InvokeOptions();options.RequestMarshaller = StopSentimentDetectionJobRequestMarshaller.Instance;options.ResponseUnmarshaller = StopSentimentDetectionJobResponseUnmarshaller.Instance;return Invoke<StopSentimentDetectionJobResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual ObjectIdSubclassMap<ObjectId> GetNewObjectIds(){if (newObjectIds!= null){return newObjectIds;}return new ObjectIdSubclassMap<ObjectId>();}</s></s>0  0  0  0  0  0  1  0  1  1  0  0  0  0  1  0  0  0  1  0  0  0  1  0  1  0</s>
<s>protected internal override void Clear(){hash = Hash(new byte[0]);base.Clear();}</s></s>0  0  0  0  0  0  0  1  0  0  0  0  1  0  0  1  0  0  0  0  0  0  0  0  0  0  0  1  0</s>
<s>public override void reset(){lock (@lock){checkNotClosed();if (_mark == -1){throw new System.IO.IOException("Invalid mark");}pos = _mark;}}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  0  0  0  0  1  1  1  0  0  0  0  0  1  0  1</s>
<s>public RefErrorPtg(ILittleEndianInput in1){field_1_reserved = in1.ReadInt();}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  1  1  0</s>
<s>public virtual SuspendGameServerGroupResponse SuspendGameServerGroup(SuspendGameServerGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = SuspendGameServerGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = SuspendGameServerGroupResponseUnmarshaller.Instance;return Invoke<SuspendGameServerGroupResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public ValueEval Evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex){if (args.Length!= 3){return ErrorEval.VALUE_INVALID;}return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);}</s></s>0  0  0  0  1  1  0  0  0  1  0  1  0  0  1  0  0  1  0  0  0  0  1  1  0  0  0  0  1  1  0  0  1  0  0  1  0  1  0  0  1  0  0  0  0  0  1  0  0  0  0  0  1  0  0  0</s>
<s>public GetRepoRequest(): base("cr", "2016-06-07", "GetRepo", "cr", "openAPI"){UriPattern = "/repos/[RepoNamespace]/[RepoName]";Method = MethodType.GET;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public virtual void SetDate(DateTime? date){if (date.HasValue){SetDate(DateTools.DateToString(date.Value, DateTools.Resolution.SECOND));}else{this.date = null;}}</s></s>0  0  0  0  0  0  1  0  0  0  1  1  0  0  0  1  1  0  0  0  1  0  0  0  0  1  1  0  0  0  1  1  0  0  0  1  1  1  0  0  0  0  0  1  0  0</s>
<s>public override TokenStream Create(TokenStream input){return new GermanMinimalStemFilter(input);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  1  0  0  1</s>
<s>public override object[] toArray(){return (object[])a.Clone();}</s></s>0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  1  1  0</s>
<s>public override void write(char[] buffer, int offset, int len){java.util.Arrays.checkOffsetAndCount(buffer.Length, offset, len);lock (@lock){expand(len);System.Array.Copy(buffer, offset, this.buf, this.count, len);this.count += len;}}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  1  0  0  1  0  0  1  0  0  0  0  0  0  1  1  1  1  0  0  0  1  1  0  1  0  1  0  1  0  0  0  1  0  0  1  0  0  0  0  1  1  1  0  0  1  0  1  0  0  0  1  0  0  0  1  0  1  0  0  0  0  1  0  1</s>
<s>public static RevFilter After(long ts){return new CommitTimeRevFilterAfter(ts);}</s></s>0  0  0  0  0  1  1  0  0  0  1  0  0  0  1  0  0  1</s>
<s>public DeleteGroupPolicyRequest(string groupName, string policyName){_groupName = groupName;_policyName = policyName;}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  0  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual DeregisterTransitGatewayMulticastGroupMembersResponse DeregisterTransitGatewayMulticastGroupMembers(DeregisterTransitGatewayMulticastGroupMembersRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeregisterTransitGatewayMulticastGroupMembersRequestMarshaller.Instance;options.ResponseUnmarshaller = DeregisterTransitGatewayMulticastGroupMembersResponseUnmarshaller.Instance;return Invoke<DeregisterTransitGatewayMulticastGroupMembersResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual BatchDeleteScheduledActionResponse BatchDeleteScheduledAction(BatchDeleteScheduledActionRequest request){var options = new InvokeOptions();options.RequestMarshaller = BatchDeleteScheduledActionRequestMarshaller.Instance;options.ResponseUnmarshaller = BatchDeleteScheduledActionResponseUnmarshaller.Instance;return Invoke<BatchDeleteScheduledActionResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual CreateAlgorithmResponse CreateAlgorithm(CreateAlgorithmRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateAlgorithmRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateAlgorithmResponseUnmarshaller.Instance;return Invoke<CreateAlgorithmResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public int ReadUByte(){CheckPosition(1);return _buf[_ReadIndex++] & 0xFF;}</s></s>0  0  0  0  0  1  0  0  0  0  1  0  0  0  0  0  0  1  0  0  0  1  0</s>
<s>public virtual void SetLength(int sz){NB.EncodeInt32(info, infoOffset + P_SIZE, sz);}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  1  1  0  0  1  0  0  1  1  0  1</s>
<s>public virtual DescribeScalingProcessTypesResponse DescribeScalingProcessTypes(){return DescribeScalingProcessTypes(new DescribeScalingProcessTypesRequest());}</s></s>0  0  0  0  0  1  1  0  0  0  0  1  0  0  0  1  0</s>
<s>public virtual ListResourceRecordSetsResponse ListResourceRecordSets(ListResourceRecordSetsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListResourceRecordSetsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListResourceRecordSetsResponseUnmarshaller.Instance;return Invoke<ListResourceRecordSetsResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override IToken RecoverInline(Parser recognizer){InputMismatchException e = new InputMismatchException(recognizer);for (ParserRuleContext context = recognizer.Context; context!= null; context = ((ParserRuleContext)context.Parent)){context.exception = e;}throw new ParseCanceledException(e);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  0  1  0  0  1  0  1  0  0  1  1  0  1  0  0  1  0  0  0  1  0  1  1  0  0  0  0  1  1  0  1  0  0  1  0  0  1</s>
<s>public virtual SetTagsForResourceResponse SetTagsForResource(SetTagsForResourceRequest request){var options = new InvokeOptions();options.RequestMarshaller = SetTagsForResourceRequestMarshaller.Instance;options.ResponseUnmarshaller = SetTagsForResourceResponseUnmarshaller.Instance;return Invoke<SetTagsForResourceResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public ModifyStrategyRequest(): base("aegis", "2016-11-11", "ModifyStrategy", "vipaegis", "openAPI"){Method = MethodType.POST;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public virtual DescribeVpcEndpointServicesResponse DescribeVpcEndpointServices(DescribeVpcEndpointServicesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeVpcEndpointServicesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeVpcEndpointServicesResponseUnmarshaller.Instance;return Invoke<DescribeVpcEndpointServicesResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual EnableLoggingResponse EnableLogging(EnableLoggingRequest request){var options = new InvokeOptions();options.RequestMarshaller = EnableLoggingRequestMarshaller.Instance;options.ResponseUnmarshaller = EnableLoggingResponseUnmarshaller.Instance;return Invoke<EnableLoggingResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public override bool contains(object o){return this._enclosing.containsValue(o);}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  1  1  0  0  1</s>
<s>public SheetRangeIdentifier(String bookName, NameIdentifier firstSheetIdentifier, NameIdentifier lastSheetIdentifier): base(bookName, firstSheetIdentifier){_lastSheetIdentifier = lastSheetIdentifier;}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  1  0  0  1  1  0  1  0  1  0</s>
<s>public DomainMetadataRequest(string domainName){_domainName = domainName;}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  1</s>
<s>public ParseException(Token currentToken,int[][] expectedTokenSequences,string[] tokenImage): base(Initialize(currentToken, expectedTokenSequences, tokenImage)){this.CurrentToken = currentToken;this.ExpectedTokenSequences = expectedTokenSequences;this.TokenImage = tokenImage;}</s></s>0  0  0  0  0  1  0  1  0  1  0  0  0  1  1  0  0  1  0  0  0  0  0  1  0  0  1  0  1  0  1  0  0  0  0  0  0  0  0  1  0  1  0  1  0  1  0  1  0  1  0</s>
<s>public FetchPhotosRequest(): base("CloudPhoto", "2017-07-11", "FetchPhotos", "cloudphoto", "openAPI"){Protocol = ProtocolType.HTTPS;}</s></s>0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  1  0</s>
<s>public java.io.PrintWriter writer(){return _writer;}</s></s>0  0  0  0  0  0  1  1  1  1  0  0  0  1</s>
<s>public NGramTokenizerFactory(IDictionary<string, string> args): base(args){minGramSize = GetInt32(args, "minGramSize", NGramTokenizer.DEFAULT_MIN_NGRAM_SIZE);maxGramSize = GetInt32(args, "maxGramSize", NGramTokenizer.DEFAULT_MAX_NGRAM_SIZE);if (args.Count > 0){throw new System.ArgumentException("Unknown parameters: " + args);}}</s></s>0  0  0  0  0  1  0  0  1  0  0  1  0  0  1  0  1  0  0  1  0  0  1  0  0  0  0  1  1  0  0  0  1  0  0  1  0  0  1  0  0  0  0  1  1  0  0  0  0  1  1  0  0  0  0  0  1  1  0  0  0  0  1  0</s>
<s>public virtual bool IsDirectoryFileConflict(){return dfConflict!= null;}</s></s>0  0  0  0  0  0  1  0  0  0  0  1  0</s>
<s>public IndonesianStemFilter(TokenStream input, bool stemDerivational): base(input){this.stemDerivational = stemDerivational;termAtt = AddAttribute<ICharTermAttribute>();keywordAtt = AddAttribute<IKeywordAttribute>();}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  0  0  1  0  0  0  0  0  0  1  0  1  0  0  1  0  0  0  1  0  1  0  0  0  1  0  0  0  1  0  1  0</s>
<s>public virtual CreateTrafficPolicyResponse CreateTrafficPolicy(CreateTrafficPolicyRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateTrafficPolicyRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateTrafficPolicyResponseUnmarshaller.Instance;return Invoke<CreateTrafficPolicyResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public void Serialize(ILittleEndianOutput out1){out1.WriteInt(fSD);out1.WriteInt(passwordVerifier);StringUtil.WriteUnicodeString(out1, title);out1.Write(securityDescriptor);}</s></s>0  0  0  0  0  1  0  0  1  1  0  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1  0  0  0  1  1  0  0  1  0  1  0  0  0  1  1  0  0  1</s>
<s>public static double Floor(double n, double s){double f;if ((n < 0 && s > 0) || (n > 0 && s < 0) || (s == 0 && n!= 0)){f = double.NaN;}else{f = (n == 0 || s == 0)? 0 : Math.Floor(n / s) * s;}return f;}</s></s>0  0  0  0  0  0  1  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  1  0  0  0  0  1  0  0  1  0  0  0  0  1  0  0  1  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  1  0  0  0  1  1  1  0  1</s>
<s>public ByteArrayDataOutput(byte[] bytes, int offset, int len){Reset(bytes, offset, len);}</s></s>0  0  0  0  0  1  0  1  0  0  1  0  1  0  0  1  0  0  0  0  1  0  0  1  0  1  0  1</s>
<s>public static IList<ITree> GetChildren(ITree t){IList<ITree> kids = new List<ITree>();for (int i = 0; i < t.ChildCount; i++){kids.Add(t.GetChild(i));}return kids;}</s></s>0  0  0  0  0  0  1  0  1  1  0  0  1  1  0  0  0  0  1  0  1  0  1  0  0  0  1  0  1  0  0  0  0  0  1  0  0  0  1  0  1  1  0  1  0  0  0  0  1  1  0  0  0  0  1  1  0  0  1  0  1</s>
<s>public override void clear(){this._enclosing.clear();}</s></s>0  0  0  0  0  0  1  0  0  0  0  0  0  0  1  1  0</s>
<s>public RefreshAllRecord(bool refreshAll): this(0){RefreshAll = (refreshAll);}</s></s>0  0  0  0  1  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  1</s>
<s>public virtual DeleteNamedQueryResponse DeleteNamedQuery(DeleteNamedQueryRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteNamedQueryRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteNamedQueryResponseUnmarshaller.Instance;return Invoke<DeleteNamedQueryResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public GraphvizFormatter(ConnectionCosts costs){this.costs = costs;this.bestPathMap = new Dictionary<string, string>();sb.Append(FormatHeader());sb.Append("  init [style=invis]\n");sb.Append("  init -> 0.0 [label=\"" + BOS_LABEL + "\"]\n");}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  0  0  1  0  1  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  0  1  1  0  0  0  1  0  0  0  0  1  1  0  0  0  0  0  0  0  1  1  0  0  0  0  0  0  1  0  0  0</s>
<s>public CheckMultiagentRequest(): base("visionai-poc", "2020-04-08", "CheckMultiagent"){Method = MethodType.POST;}</s></s>0  0  0  1  0  0  0  0  0  0  0  1  0  0  1  1</s>
<s>public virtual ListUserProfilesResponse ListUserProfiles(ListUserProfilesRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListUserProfilesRequestMarshaller.Instance;options.ResponseUnmarshaller = ListUserProfilesResponseUnmarshaller.Instance;return Invoke<ListUserProfilesResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual CreateRelationalDatabaseFromSnapshotResponse CreateRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateRelationalDatabaseFromSnapshotRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateRelationalDatabaseFromSnapshotResponseUnmarshaller.Instance;return Invoke<CreateRelationalDatabaseFromSnapshotResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual StartTaskResponse StartTask(StartTaskRequest request){var options = new InvokeOptions();options.RequestMarshaller = StartTaskRequestMarshaller.Instance;options.ResponseUnmarshaller = StartTaskResponseUnmarshaller.Instance;return Invoke<StartTaskResponse>(request, options);}</s></s>0  0  0  0  0  1  1  0  0  1  1  0  0  0  0  0  1  0  0  1  0  0  0  0  1  1  0  0  1  1  0  0  0  1  1  0  0  1  1  0  0  0  1  0  1  0  0  1  0  1</s>
<s>public virtual ICollection<string> GetIgnoredPaths(){return ignoredPaths;}</s></s>0  0  0  0  0  0  1  0  0  1  0  0  0  1</s>
<s>public FeatSmartTag(RecordInputStream in1){data = in1.ReadRemainder();}</s></s>0  0  0  0  0  1  0  0  1  0  0  0  0  0  1  0  0  0  1  1  0</s>
<s>public Change(ChangeAction action, ResourceRecordSet resourceRecordSet){_action = action;_resourceRecordSet = resourceRecordSet;}</s></s>0  0  0  0  0  1  0  0  1  0  1  0  0  0  0  0  1  0  1  0  0  1  0  1</s>
